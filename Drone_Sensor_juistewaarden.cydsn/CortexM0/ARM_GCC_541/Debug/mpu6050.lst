ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"mpu6050.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	devAddr,1,1
  20              		.comm	buffer,22,4
  21              		.section	.text.MPU6050_init,"ax",%progbits
  22              		.align	2
  23              		.global	MPU6050_init
  24              		.code	16
  25              		.thumb_func
  26              		.type	MPU6050_init, %function
  27              	MPU6050_init:
  28              	.LFB0:
  29              		.file 1 "mpu6050.c"
   1:mpu6050.c     **** // I2Cdev library collection - MPU6050 I2C device class
   2:mpu6050.c     **** // Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)
   3:mpu6050.c     **** // 8/24/2011 by Jeff Rowberg <jeff@rowberg.net>
   4:mpu6050.c     **** // Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
   5:mpu6050.c     **** //
   6:mpu6050.c     **** // Changelog:
   7:mpu6050.c     **** // 26/May/2014: C version to be used on PSoC Creator (www.cypress.com) by Hernán Sánchez
   8:mpu6050.c     **** //     ... - ongoing debug release
   9:mpu6050.c     **** 
  10:mpu6050.c     **** // NOTE: THIS IS ONLY A PARIAL RELEASE. THIS DEVICE CLASS IS CURRENTLY UNDERGOING ACTIVE
  11:mpu6050.c     **** // DEVELOPMENT AND IS STILL MISSING SOME IMPORTANT FEATURES. PLEASE KEEP THIS IN MIND IF
  12:mpu6050.c     **** // YOU DECIDE TO USE THIS PARTICULAR CODE FOR ANYTHING.
  13:mpu6050.c     **** 
  14:mpu6050.c     **** /* ============================================
  15:mpu6050.c     **** I2Cdev device library code is placed under the MIT license
  16:mpu6050.c     **** Copyright (c) 2012 Jeff Rowberg
  17:mpu6050.c     **** 
  18:mpu6050.c     **** Permission is hereby granted, free of charge, to any person obtaining a copy
  19:mpu6050.c     **** of this software and associated documentation files (the "Software"), to deal
  20:mpu6050.c     **** in the Software without restriction, including without limitation the rights
  21:mpu6050.c     **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  22:mpu6050.c     **** copies of the Software, and to permit persons to whom the Software is
  23:mpu6050.c     **** furnished to do so, subject to the following conditions:
  24:mpu6050.c     **** 
  25:mpu6050.c     **** The above copyright notice and this permission notice shall be included in
  26:mpu6050.c     **** all copies or substantial portions of the Software.
  27:mpu6050.c     **** 
  28:mpu6050.c     **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 2


  29:mpu6050.c     **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:mpu6050.c     **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  31:mpu6050.c     **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  32:mpu6050.c     **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  33:mpu6050.c     **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  34:mpu6050.c     **** THE SOFTWARE.
  35:mpu6050.c     **** ===============================================
  36:mpu6050.c     **** */
  37:mpu6050.c     **** 
  38:mpu6050.c     **** 
  39:mpu6050.c     **** #include <stdint.h>
  40:mpu6050.c     **** #include "mpu6050.h"
  41:mpu6050.c     **** 
  42:mpu6050.c     **** /** Default constructor, uses default I2C address.
  43:mpu6050.c     ****  * @see MPU6050_DEFAULT_ADDRESS
  44:mpu6050.c     ****  */
  45:mpu6050.c     **** void MPU6050_init() {
  30              		.loc 1 45 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  46:mpu6050.c     ****     devAddr = MPU6050_DEFAULT_ADDRESS;
  40              		.loc 1 46 0
  41 0004 024B     		ldr	r3, .L2
  42 0006 6922     		movs	r2, #105
  43 0008 1A70     		strb	r2, [r3]
  47:mpu6050.c     **** }
  44              		.loc 1 47 0
  45 000a C046     		nop
  46 000c BD46     		mov	sp, r7
  47              		@ sp needed
  48 000e 80BD     		pop	{r7, pc}
  49              	.L3:
  50              		.align	2
  51              	.L2:
  52 0010 00000000 		.word	devAddr
  53              		.cfi_endproc
  54              	.LFE0:
  55              		.size	MPU6050_init, .-MPU6050_init
  56              		.section	.text.I2C_MPU6050_I2CAddress,"ax",%progbits
  57              		.align	2
  58              		.global	I2C_MPU6050_I2CAddress
  59              		.code	16
  60              		.thumb_func
  61              		.type	I2C_MPU6050_I2CAddress, %function
  62              	I2C_MPU6050_I2CAddress:
  63              	.LFB1:
  48:mpu6050.c     **** 
  49:mpu6050.c     **** /** Specific address constructor.
  50:mpu6050.c     ****  * @param address I2C address
  51:mpu6050.c     ****  * @see MPU6050_DEFAULT_ADDRESS
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 3


  52:mpu6050.c     ****  * @see MPU6050_ADDRESS_AD0_LOW
  53:mpu6050.c     ****  * @see MPU6050_ADDRESS_AD0_HIGH
  54:mpu6050.c     ****  */
  55:mpu6050.c     **** void I2C_MPU6050_I2CAddress(uint8_t address) {
  64              		.loc 1 55 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 8
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 80B5     		push	{r7, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 82B0     		sub	sp, sp, #8
  73              		.cfi_def_cfa_offset 16
  74 0004 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
  76 0006 0200     		movs	r2, r0
  77 0008 FB1D     		adds	r3, r7, #7
  78 000a 1A70     		strb	r2, [r3]
  56:mpu6050.c     ****     devAddr = address;
  79              		.loc 1 56 0
  80 000c 034B     		ldr	r3, .L5
  81 000e FA1D     		adds	r2, r7, #7
  82 0010 1278     		ldrb	r2, [r2]
  83 0012 1A70     		strb	r2, [r3]
  57:mpu6050.c     **** }
  84              		.loc 1 57 0
  85 0014 C046     		nop
  86 0016 BD46     		mov	sp, r7
  87 0018 02B0     		add	sp, sp, #8
  88              		@ sp needed
  89 001a 80BD     		pop	{r7, pc}
  90              	.L6:
  91              		.align	2
  92              	.L5:
  93 001c 00000000 		.word	devAddr
  94              		.cfi_endproc
  95              	.LFE1:
  96              		.size	I2C_MPU6050_I2CAddress, .-I2C_MPU6050_I2CAddress
  97              		.section	.text.MPU6050_initialize,"ax",%progbits
  98              		.align	2
  99              		.global	MPU6050_initialize
 100              		.code	16
 101              		.thumb_func
 102              		.type	MPU6050_initialize, %function
 103              	MPU6050_initialize:
 104              	.LFB2:
  58:mpu6050.c     **** 
  59:mpu6050.c     **** /** Power on and prepare for general usage.
  60:mpu6050.c     ****  * This will activate the device and take it out of sleep mode (which must be done
  61:mpu6050.c     ****  * after start-up). This function also sets both the accelerometer and the gyroscope
  62:mpu6050.c     ****  * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
  63:mpu6050.c     ****  * the clock source to use the X Gyro for reference, which is slightly better than
  64:mpu6050.c     ****  * the default internal clock source.
  65:mpu6050.c     ****  */
  66:mpu6050.c     **** void MPU6050_initialize() {
 105              		.loc 1 66 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 4


 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 00AF     		add	r7, sp, #0
 114              		.cfi_def_cfa_register 7
  67:mpu6050.c     ****     MPU6050_setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 115              		.loc 1 67 0
 116 0004 0120     		movs	r0, #1
 117 0006 FFF7FEFF 		bl	MPU6050_setClockSource
  68:mpu6050.c     ****     MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 118              		.loc 1 68 0
 119 000a 0020     		movs	r0, #0
 120 000c FFF7FEFF 		bl	MPU6050_setFullScaleGyroRange
  69:mpu6050.c     ****     MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 121              		.loc 1 69 0
 122 0010 0020     		movs	r0, #0
 123 0012 FFF7FEFF 		bl	MPU6050_setFullScaleAccelRange
  70:mpu6050.c     ****     MPU6050_setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 124              		.loc 1 70 0
 125 0016 0020     		movs	r0, #0
 126 0018 FFF7FEFF 		bl	MPU6050_setSleepEnabled
  71:mpu6050.c     **** }
 127              		.loc 1 71 0
 128 001c C046     		nop
 129 001e BD46     		mov	sp, r7
 130              		@ sp needed
 131 0020 80BD     		pop	{r7, pc}
 132              		.cfi_endproc
 133              	.LFE2:
 134              		.size	MPU6050_initialize, .-MPU6050_initialize
 135 0022 C046     		.section	.text.MPU6050_testConnection,"ax",%progbits
 136              		.align	2
 137              		.global	MPU6050_testConnection
 138              		.code	16
 139              		.thumb_func
 140              		.type	MPU6050_testConnection, %function
 141              	MPU6050_testConnection:
 142              	.LFB3:
  72:mpu6050.c     **** 
  73:mpu6050.c     **** /** Verify the I2C connection.
  74:mpu6050.c     ****  * Make sure the device is connected and responds as expected.
  75:mpu6050.c     ****  * @return True if connection is valid, false otherwise
  76:mpu6050.c     ****  */
  77:mpu6050.c     **** bool MPU6050_testConnection() {
 143              		.loc 1 77 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 1, uses_anonymous_args = 0
 147 0000 80B5     		push	{r7, lr}
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 5


 152              		.cfi_def_cfa_register 7
  78:mpu6050.c     ****     return MPU6050_getDeviceID() == 0x34;
 153              		.loc 1 78 0
 154 0004 FFF7FEFF 		bl	MPU6050_getDeviceID
 155 0008 0300     		movs	r3, r0
 156 000a 343B     		subs	r3, r3, #52
 157 000c 5A42     		rsbs	r2, r3, #0
 158 000e 5341     		adcs	r3, r3, r2
 159 0010 DBB2     		uxtb	r3, r3
  79:mpu6050.c     **** }
 160              		.loc 1 79 0
 161 0012 1800     		movs	r0, r3
 162 0014 BD46     		mov	sp, r7
 163              		@ sp needed
 164 0016 80BD     		pop	{r7, pc}
 165              		.cfi_endproc
 166              	.LFE3:
 167              		.size	MPU6050_testConnection, .-MPU6050_testConnection
 168              		.section	.text.MPU6050_getAuxVDDIOLevel,"ax",%progbits
 169              		.align	2
 170              		.global	MPU6050_getAuxVDDIOLevel
 171              		.code	16
 172              		.thumb_func
 173              		.type	MPU6050_getAuxVDDIOLevel, %function
 174              	MPU6050_getAuxVDDIOLevel:
 175              	.LFB4:
  80:mpu6050.c     **** 
  81:mpu6050.c     **** // AUX_VDDIO register (InvenSense demo code calls this RA_*G_OFFS_TC)
  82:mpu6050.c     **** 
  83:mpu6050.c     **** /** Get the auxiliary I2C supply voltage level.
  84:mpu6050.c     ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  85:mpu6050.c     ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  86:mpu6050.c     ****  * the MPU-6000, which does not have a VLOGIC pin.
  87:mpu6050.c     ****  * @return I2C supply voltage level (0=VLOGIC, 1=VDD)
  88:mpu6050.c     ****  */
  89:mpu6050.c     **** uint8_t MPU6050_getAuxVDDIOLevel() {
 176              		.loc 1 89 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
  90:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, buffer);
 186              		.loc 1 90 0
 187 0004 054B     		ldr	r3, .L12
 188 0006 1878     		ldrb	r0, [r3]
 189 0008 054B     		ldr	r3, .L12+4
 190 000a 0722     		movs	r2, #7
 191 000c 0121     		movs	r1, #1
 192 000e FFF7FEFF 		bl	I2CReadBit
  91:mpu6050.c     ****     return buffer[0];
 193              		.loc 1 91 0
 194 0012 034B     		ldr	r3, .L12+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 6


 195 0014 1B78     		ldrb	r3, [r3]
  92:mpu6050.c     **** }
 196              		.loc 1 92 0
 197 0016 1800     		movs	r0, r3
 198 0018 BD46     		mov	sp, r7
 199              		@ sp needed
 200 001a 80BD     		pop	{r7, pc}
 201              	.L13:
 202              		.align	2
 203              	.L12:
 204 001c 00000000 		.word	devAddr
 205 0020 00000000 		.word	buffer
 206              		.cfi_endproc
 207              	.LFE4:
 208              		.size	MPU6050_getAuxVDDIOLevel, .-MPU6050_getAuxVDDIOLevel
 209              		.section	.text.MPU6050_setAuxVDDIOLevel,"ax",%progbits
 210              		.align	2
 211              		.global	MPU6050_setAuxVDDIOLevel
 212              		.code	16
 213              		.thumb_func
 214              		.type	MPU6050_setAuxVDDIOLevel, %function
 215              	MPU6050_setAuxVDDIOLevel:
 216              	.LFB5:
  93:mpu6050.c     **** /** Set the auxiliary I2C supply voltage level.
  94:mpu6050.c     ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  95:mpu6050.c     ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  96:mpu6050.c     ****  * the MPU-6000, which does not have a VLOGIC pin.
  97:mpu6050.c     ****  * @param level I2C supply voltage level (0=VLOGIC, 1=VDD)
  98:mpu6050.c     ****  */
  99:mpu6050.c     **** void MPU6050_setAuxVDDIOLevel(uint8_t level) {
 217              		.loc 1 99 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 8
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 82B0     		sub	sp, sp, #8
 226              		.cfi_def_cfa_offset 16
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 0200     		movs	r2, r0
 230 0008 FB1D     		adds	r3, r7, #7
 231 000a 1A70     		strb	r2, [r3]
 100:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, level);
 232              		.loc 1 100 0
 233 000c 054B     		ldr	r3, .L15
 234 000e 1878     		ldrb	r0, [r3]
 235 0010 FB1D     		adds	r3, r7, #7
 236 0012 1B78     		ldrb	r3, [r3]
 237 0014 0722     		movs	r2, #7
 238 0016 0121     		movs	r1, #1
 239 0018 FFF7FEFF 		bl	I2CWriteBit
 101:mpu6050.c     **** }
 240              		.loc 1 101 0
 241 001c C046     		nop
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 7


 242 001e BD46     		mov	sp, r7
 243 0020 02B0     		add	sp, sp, #8
 244              		@ sp needed
 245 0022 80BD     		pop	{r7, pc}
 246              	.L16:
 247              		.align	2
 248              	.L15:
 249 0024 00000000 		.word	devAddr
 250              		.cfi_endproc
 251              	.LFE5:
 252              		.size	MPU6050_setAuxVDDIOLevel, .-MPU6050_setAuxVDDIOLevel
 253              		.section	.text.MPU6050_getRate,"ax",%progbits
 254              		.align	2
 255              		.global	MPU6050_getRate
 256              		.code	16
 257              		.thumb_func
 258              		.type	MPU6050_getRate, %function
 259              	MPU6050_getRate:
 260              	.LFB6:
 102:mpu6050.c     **** 
 103:mpu6050.c     **** // SMPLRT_DIV register
 104:mpu6050.c     **** 
 105:mpu6050.c     **** /** Get gyroscope output rate divider.
 106:mpu6050.c     ****  * The sensor register output, FIFO output, DMP sampling, Motion detection, Zero
 107:mpu6050.c     ****  * Motion detection, and Free Fall detection are all based on the Sample Rate.
 108:mpu6050.c     ****  * The Sample Rate is generated by dividing the gyroscope output rate by
 109:mpu6050.c     ****  * SMPLRT_DIV:
 110:mpu6050.c     ****  *
 111:mpu6050.c     ****  * Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 112:mpu6050.c     ****  *
 113:mpu6050.c     ****  * where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or
 114:mpu6050.c     ****  * 7), and 1kHz when the DLPF is enabled (see Register 26).
 115:mpu6050.c     ****  *
 116:mpu6050.c     ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 117:mpu6050.c     ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 118:mpu6050.c     ****  * FIFO, DMP, and sensor registers more than once.
 119:mpu6050.c     ****  *
 120:mpu6050.c     ****  * For a diagram of the gyroscope and accelerometer signal paths, see Section 8
 121:mpu6050.c     ****  * of the MPU-6000/MPU-6050 Product Specification document.
 122:mpu6050.c     ****  *
 123:mpu6050.c     ****  * @return Current sample rate
 124:mpu6050.c     ****  * @see MPU6050_RA_SMPLRT_DIV
 125:mpu6050.c     ****  */
 126:mpu6050.c     **** uint8_t MPU6050_getRate() {
 261              		.loc 1 126 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 00AF     		add	r7, sp, #0
 270              		.cfi_def_cfa_register 7
 127:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_SMPLRT_DIV, buffer);
 271              		.loc 1 127 0
 272 0004 054B     		ldr	r3, .L19
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 8


 273 0006 1B78     		ldrb	r3, [r3]
 274 0008 054A     		ldr	r2, .L19+4
 275 000a 1921     		movs	r1, #25
 276 000c 1800     		movs	r0, r3
 277 000e FFF7FEFF 		bl	I2CReadByte
 128:mpu6050.c     ****     return buffer[0];
 278              		.loc 1 128 0
 279 0012 034B     		ldr	r3, .L19+4
 280 0014 1B78     		ldrb	r3, [r3]
 129:mpu6050.c     **** }
 281              		.loc 1 129 0
 282 0016 1800     		movs	r0, r3
 283 0018 BD46     		mov	sp, r7
 284              		@ sp needed
 285 001a 80BD     		pop	{r7, pc}
 286              	.L20:
 287              		.align	2
 288              	.L19:
 289 001c 00000000 		.word	devAddr
 290 0020 00000000 		.word	buffer
 291              		.cfi_endproc
 292              	.LFE6:
 293              		.size	MPU6050_getRate, .-MPU6050_getRate
 294              		.section	.text.MPU6050_setRate,"ax",%progbits
 295              		.align	2
 296              		.global	MPU6050_setRate
 297              		.code	16
 298              		.thumb_func
 299              		.type	MPU6050_setRate, %function
 300              	MPU6050_setRate:
 301              	.LFB7:
 130:mpu6050.c     **** /** Set gyroscope sample rate divider.
 131:mpu6050.c     ****  * @param rate New sample rate divider
 132:mpu6050.c     ****  * @see getRate()
 133:mpu6050.c     ****  * @see MPU6050_RA_SMPLRT_DIV
 134:mpu6050.c     ****  */
 135:mpu6050.c     **** void MPU6050_setRate(uint8_t rate) {
 302              		.loc 1 135 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 8
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306 0000 80B5     		push	{r7, lr}
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0002 82B0     		sub	sp, sp, #8
 311              		.cfi_def_cfa_offset 16
 312 0004 00AF     		add	r7, sp, #0
 313              		.cfi_def_cfa_register 7
 314 0006 0200     		movs	r2, r0
 315 0008 FB1D     		adds	r3, r7, #7
 316 000a 1A70     		strb	r2, [r3]
 136:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 317              		.loc 1 136 0
 318 000c 054B     		ldr	r3, .L22
 319 000e 1878     		ldrb	r0, [r3]
 320 0010 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 9


 321 0012 1B78     		ldrb	r3, [r3]
 322 0014 1A00     		movs	r2, r3
 323 0016 1921     		movs	r1, #25
 324 0018 FFF7FEFF 		bl	I2CWriteByte
 137:mpu6050.c     **** }
 325              		.loc 1 137 0
 326 001c C046     		nop
 327 001e BD46     		mov	sp, r7
 328 0020 02B0     		add	sp, sp, #8
 329              		@ sp needed
 330 0022 80BD     		pop	{r7, pc}
 331              	.L23:
 332              		.align	2
 333              	.L22:
 334 0024 00000000 		.word	devAddr
 335              		.cfi_endproc
 336              	.LFE7:
 337              		.size	MPU6050_setRate, .-MPU6050_setRate
 338              		.section	.text.MPU6050_getExternalFrameSync,"ax",%progbits
 339              		.align	2
 340              		.global	MPU6050_getExternalFrameSync
 341              		.code	16
 342              		.thumb_func
 343              		.type	MPU6050_getExternalFrameSync, %function
 344              	MPU6050_getExternalFrameSync:
 345              	.LFB8:
 138:mpu6050.c     **** 
 139:mpu6050.c     **** // CONFIG register
 140:mpu6050.c     **** 
 141:mpu6050.c     **** /** Get external FSYNC configuration.
 142:mpu6050.c     ****  * Configures the external Frame Synchronization (FSYNC) pin sampling. An
 143:mpu6050.c     ****  * external signal connected to the FSYNC pin can be sampled by configuring
 144:mpu6050.c     ****  * EXT_SYNC_SET. Signal changes to the FSYNC pin are latched so that short
 145:mpu6050.c     ****  * strobes may be captured. The latched FSYNC signal will be sampled at the
 146:mpu6050.c     ****  * Sampling Rate, as defined in register 25. After sampling, the latch will
 147:mpu6050.c     ****  * reset to the current FSYNC signal state.
 148:mpu6050.c     ****  *
 149:mpu6050.c     ****  * The sampled value will be reported in place of the least significant bit in
 150:mpu6050.c     ****  * a sensor data register determined by the value of EXT_SYNC_SET according to
 151:mpu6050.c     ****  * the following table.
 152:mpu6050.c     ****  *
 153:mpu6050.c     ****  * <pre>
 154:mpu6050.c     ****  * EXT_SYNC_SET | FSYNC Bit Location
 155:mpu6050.c     ****  * -------------+-------------------
 156:mpu6050.c     ****  * 0            | Input disabled
 157:mpu6050.c     ****  * 1            | TEMP_OUT_L[0]
 158:mpu6050.c     ****  * 2            | GYRO_XOUT_L[0]
 159:mpu6050.c     ****  * 3            | GYRO_YOUT_L[0]
 160:mpu6050.c     ****  * 4            | GYRO_ZOUT_L[0]
 161:mpu6050.c     ****  * 5            | ACCEL_XOUT_L[0]
 162:mpu6050.c     ****  * 6            | ACCEL_YOUT_L[0]
 163:mpu6050.c     ****  * 7            | ACCEL_ZOUT_L[0]
 164:mpu6050.c     ****  * </pre>
 165:mpu6050.c     ****  *
 166:mpu6050.c     ****  * @return FSYNC configuration value
 167:mpu6050.c     ****  */
 168:mpu6050.c     **** uint8_t MPU6050_getExternalFrameSync() {
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 10


 346              		.loc 1 168 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 82B0     		sub	sp, sp, #8
 355              		.cfi_def_cfa_offset 16
 356 0004 02AF     		add	r7, sp, #8
 357              		.cfi_def_cfa 7, 8
 169:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_
 358              		.loc 1 169 0
 359 0006 074B     		ldr	r3, .L26
 360 0008 1878     		ldrb	r0, [r3]
 361 000a 074B     		ldr	r3, .L26+4
 362 000c 0093     		str	r3, [sp]
 363 000e 0323     		movs	r3, #3
 364 0010 0522     		movs	r2, #5
 365 0012 1A21     		movs	r1, #26
 366 0014 FFF7FEFF 		bl	I2CReadBits
 170:mpu6050.c     ****     return buffer[0];
 367              		.loc 1 170 0
 368 0018 034B     		ldr	r3, .L26+4
 369 001a 1B78     		ldrb	r3, [r3]
 171:mpu6050.c     **** }
 370              		.loc 1 171 0
 371 001c 1800     		movs	r0, r3
 372 001e BD46     		mov	sp, r7
 373              		@ sp needed
 374 0020 80BD     		pop	{r7, pc}
 375              	.L27:
 376 0022 C046     		.align	2
 377              	.L26:
 378 0024 00000000 		.word	devAddr
 379 0028 00000000 		.word	buffer
 380              		.cfi_endproc
 381              	.LFE8:
 382              		.size	MPU6050_getExternalFrameSync, .-MPU6050_getExternalFrameSync
 383              		.section	.text.MPU6050_setExternalFrameSync,"ax",%progbits
 384              		.align	2
 385              		.global	MPU6050_setExternalFrameSync
 386              		.code	16
 387              		.thumb_func
 388              		.type	MPU6050_setExternalFrameSync, %function
 389              	MPU6050_setExternalFrameSync:
 390              	.LFB9:
 172:mpu6050.c     **** /** Set external FSYNC configuration.
 173:mpu6050.c     ****  * @see getExternalFrameSync()
 174:mpu6050.c     ****  * @see MPU6050_RA_CONFIG
 175:mpu6050.c     ****  * @param sync New FSYNC configuration value
 176:mpu6050.c     ****  */
 177:mpu6050.c     **** void MPU6050_setExternalFrameSync(uint8_t sync) {
 391              		.loc 1 177 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 11


 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 84B0     		sub	sp, sp, #16
 400              		.cfi_def_cfa_offset 24
 401 0004 02AF     		add	r7, sp, #8
 402              		.cfi_def_cfa 7, 16
 403 0006 0200     		movs	r2, r0
 404 0008 FB1D     		adds	r3, r7, #7
 405 000a 1A70     		strb	r2, [r3]
 178:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET
 406              		.loc 1 178 0
 407 000c 064B     		ldr	r3, .L29
 408 000e 1878     		ldrb	r0, [r3]
 409 0010 FB1D     		adds	r3, r7, #7
 410 0012 1B78     		ldrb	r3, [r3]
 411 0014 0093     		str	r3, [sp]
 412 0016 0323     		movs	r3, #3
 413 0018 0522     		movs	r2, #5
 414 001a 1A21     		movs	r1, #26
 415 001c FFF7FEFF 		bl	I2CWriteBits
 179:mpu6050.c     **** }
 416              		.loc 1 179 0
 417 0020 C046     		nop
 418 0022 BD46     		mov	sp, r7
 419 0024 02B0     		add	sp, sp, #8
 420              		@ sp needed
 421 0026 80BD     		pop	{r7, pc}
 422              	.L30:
 423              		.align	2
 424              	.L29:
 425 0028 00000000 		.word	devAddr
 426              		.cfi_endproc
 427              	.LFE9:
 428              		.size	MPU6050_setExternalFrameSync, .-MPU6050_setExternalFrameSync
 429              		.section	.text.MPU6050_getDLPFMode,"ax",%progbits
 430              		.align	2
 431              		.global	MPU6050_getDLPFMode
 432              		.code	16
 433              		.thumb_func
 434              		.type	MPU6050_getDLPFMode, %function
 435              	MPU6050_getDLPFMode:
 436              	.LFB10:
 180:mpu6050.c     **** /** Get digital low-pass filter configuration.
 181:mpu6050.c     ****  * The DLPF_CFG parameter sets the digital low pass filter configuration. It
 182:mpu6050.c     ****  * also determines the internal sampling rate used by the device as shown in
 183:mpu6050.c     ****  * the table below.
 184:mpu6050.c     ****  *
 185:mpu6050.c     ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 186:mpu6050.c     ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 187:mpu6050.c     ****  * FIFO, DMP, and sensor registers more than once.
 188:mpu6050.c     ****  *
 189:mpu6050.c     ****  * <pre>
 190:mpu6050.c     ****  *          |   ACCELEROMETER    |           GYROSCOPE
 191:mpu6050.c     ****  * DLPF_CFG | Bandwidth | Delay  | Bandwidth | Delay  | Sample Rate
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 12


 192:mpu6050.c     ****  * ---------+-----------+--------+-----------+--------+-------------
 193:mpu6050.c     ****  * 0        | 260Hz     | 0ms    | 256Hz     | 0.98ms | 8kHz
 194:mpu6050.c     ****  * 1        | 184Hz     | 2.0ms  | 188Hz     | 1.9ms  | 1kHz
 195:mpu6050.c     ****  * 2        | 94Hz      | 3.0ms  | 98Hz      | 2.8ms  | 1kHz
 196:mpu6050.c     ****  * 3        | 44Hz      | 4.9ms  | 42Hz      | 4.8ms  | 1kHz
 197:mpu6050.c     ****  * 4        | 21Hz      | 8.5ms  | 20Hz      | 8.3ms  | 1kHz
 198:mpu6050.c     ****  * 5        | 10Hz      | 13.8ms | 10Hz      | 13.4ms | 1kHz
 199:mpu6050.c     ****  * 6        | 5Hz       | 19.0ms | 5Hz       | 18.6ms | 1kHz
 200:mpu6050.c     ****  * 7        |   -- Reserved --   |   -- Reserved --   | Reserved
 201:mpu6050.c     ****  * </pre>
 202:mpu6050.c     ****  *
 203:mpu6050.c     ****  * @return DLFP configuration
 204:mpu6050.c     ****  * @see MPU6050_RA_CONFIG
 205:mpu6050.c     ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 206:mpu6050.c     ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 207:mpu6050.c     ****  */
 208:mpu6050.c     **** uint8_t MPU6050_getDLPFMode() {
 437              		.loc 1 208 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441 0000 80B5     		push	{r7, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 82B0     		sub	sp, sp, #8
 446              		.cfi_def_cfa_offset 16
 447 0004 02AF     		add	r7, sp, #8
 448              		.cfi_def_cfa 7, 8
 209:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, 
 449              		.loc 1 209 0
 450 0006 074B     		ldr	r3, .L33
 451 0008 1878     		ldrb	r0, [r3]
 452 000a 074B     		ldr	r3, .L33+4
 453 000c 0093     		str	r3, [sp]
 454 000e 0323     		movs	r3, #3
 455 0010 0222     		movs	r2, #2
 456 0012 1A21     		movs	r1, #26
 457 0014 FFF7FEFF 		bl	I2CReadBits
 210:mpu6050.c     ****     return buffer[0];
 458              		.loc 1 210 0
 459 0018 034B     		ldr	r3, .L33+4
 460 001a 1B78     		ldrb	r3, [r3]
 211:mpu6050.c     **** }
 461              		.loc 1 211 0
 462 001c 1800     		movs	r0, r3
 463 001e BD46     		mov	sp, r7
 464              		@ sp needed
 465 0020 80BD     		pop	{r7, pc}
 466              	.L34:
 467 0022 C046     		.align	2
 468              	.L33:
 469 0024 00000000 		.word	devAddr
 470 0028 00000000 		.word	buffer
 471              		.cfi_endproc
 472              	.LFE10:
 473              		.size	MPU6050_getDLPFMode, .-MPU6050_getDLPFMode
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 13


 474              		.section	.text.MPU6050_setDLPFMode,"ax",%progbits
 475              		.align	2
 476              		.global	MPU6050_setDLPFMode
 477              		.code	16
 478              		.thumb_func
 479              		.type	MPU6050_setDLPFMode, %function
 480              	MPU6050_setDLPFMode:
 481              	.LFB11:
 212:mpu6050.c     **** /** Set digital low-pass filter configuration.
 213:mpu6050.c     ****  * @param mode New DLFP configuration setting
 214:mpu6050.c     ****  * @see getDLPFBandwidth()
 215:mpu6050.c     ****  * @see MPU6050_DLPF_BW_256
 216:mpu6050.c     ****  * @see MPU6050_RA_CONFIG
 217:mpu6050.c     ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 218:mpu6050.c     ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 219:mpu6050.c     ****  */
 220:mpu6050.c     **** void MPU6050_setDLPFMode(uint8_t mode) {
 482              		.loc 1 220 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 0000 80B5     		push	{r7, lr}
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 84B0     		sub	sp, sp, #16
 491              		.cfi_def_cfa_offset 24
 492 0004 02AF     		add	r7, sp, #8
 493              		.cfi_def_cfa 7, 16
 494 0006 0200     		movs	r2, r0
 495 0008 FB1D     		adds	r3, r7, #7
 496 000a 1A70     		strb	r2, [r3]
 221:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH,
 497              		.loc 1 221 0
 498 000c 064B     		ldr	r3, .L36
 499 000e 1878     		ldrb	r0, [r3]
 500 0010 FB1D     		adds	r3, r7, #7
 501 0012 1B78     		ldrb	r3, [r3]
 502 0014 0093     		str	r3, [sp]
 503 0016 0323     		movs	r3, #3
 504 0018 0222     		movs	r2, #2
 505 001a 1A21     		movs	r1, #26
 506 001c FFF7FEFF 		bl	I2CWriteBits
 222:mpu6050.c     **** }
 507              		.loc 1 222 0
 508 0020 C046     		nop
 509 0022 BD46     		mov	sp, r7
 510 0024 02B0     		add	sp, sp, #8
 511              		@ sp needed
 512 0026 80BD     		pop	{r7, pc}
 513              	.L37:
 514              		.align	2
 515              	.L36:
 516 0028 00000000 		.word	devAddr
 517              		.cfi_endproc
 518              	.LFE11:
 519              		.size	MPU6050_setDLPFMode, .-MPU6050_setDLPFMode
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 14


 520              		.section	.text.MPU6050_getFullScaleGyroRange,"ax",%progbits
 521              		.align	2
 522              		.global	MPU6050_getFullScaleGyroRange
 523              		.code	16
 524              		.thumb_func
 525              		.type	MPU6050_getFullScaleGyroRange, %function
 526              	MPU6050_getFullScaleGyroRange:
 527              	.LFB12:
 223:mpu6050.c     **** 
 224:mpu6050.c     **** // GYRO_CONFIG register
 225:mpu6050.c     **** 
 226:mpu6050.c     **** /** Get full-scale gyroscope range.
 227:mpu6050.c     ****  * The FS_SEL parameter allows setting the full-scale range of the gyro sensors,
 228:mpu6050.c     ****  * as described in the table below.
 229:mpu6050.c     ****  *
 230:mpu6050.c     ****  * <pre>
 231:mpu6050.c     ****  * 0 = +/- 250 degrees/sec
 232:mpu6050.c     ****  * 1 = +/- 500 degrees/sec
 233:mpu6050.c     ****  * 2 = +/- 1000 degrees/sec
 234:mpu6050.c     ****  * 3 = +/- 2000 degrees/sec
 235:mpu6050.c     ****  * </pre>
 236:mpu6050.c     ****  *
 237:mpu6050.c     ****  * @return Current full-scale gyroscope range setting
 238:mpu6050.c     ****  * @see MPU6050_GYRO_FS_250
 239:mpu6050.c     ****  * @see MPU6050_RA_GYRO_CONFIG
 240:mpu6050.c     ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
 241:mpu6050.c     ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 242:mpu6050.c     ****  */
 243:mpu6050.c     **** uint8_t MPU6050_getFullScaleGyroRange() {
 528              		.loc 1 243 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 82B0     		sub	sp, sp, #8
 537              		.cfi_def_cfa_offset 16
 538 0004 02AF     		add	r7, sp, #8
 539              		.cfi_def_cfa 7, 8
 244:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL
 540              		.loc 1 244 0
 541 0006 074B     		ldr	r3, .L40
 542 0008 1878     		ldrb	r0, [r3]
 543 000a 074B     		ldr	r3, .L40+4
 544 000c 0093     		str	r3, [sp]
 545 000e 0223     		movs	r3, #2
 546 0010 0422     		movs	r2, #4
 547 0012 1B21     		movs	r1, #27
 548 0014 FFF7FEFF 		bl	I2CReadBits
 245:mpu6050.c     ****     return buffer[0];
 549              		.loc 1 245 0
 550 0018 034B     		ldr	r3, .L40+4
 551 001a 1B78     		ldrb	r3, [r3]
 246:mpu6050.c     **** }
 552              		.loc 1 246 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 15


 553 001c 1800     		movs	r0, r3
 554 001e BD46     		mov	sp, r7
 555              		@ sp needed
 556 0020 80BD     		pop	{r7, pc}
 557              	.L41:
 558 0022 C046     		.align	2
 559              	.L40:
 560 0024 00000000 		.word	devAddr
 561 0028 00000000 		.word	buffer
 562              		.cfi_endproc
 563              	.LFE12:
 564              		.size	MPU6050_getFullScaleGyroRange, .-MPU6050_getFullScaleGyroRange
 565              		.section	.text.MPU6050_setFullScaleGyroRange,"ax",%progbits
 566              		.align	2
 567              		.global	MPU6050_setFullScaleGyroRange
 568              		.code	16
 569              		.thumb_func
 570              		.type	MPU6050_setFullScaleGyroRange, %function
 571              	MPU6050_setFullScaleGyroRange:
 572              	.LFB13:
 247:mpu6050.c     **** /** Set full-scale gyroscope range.
 248:mpu6050.c     ****  * @param range New full-scale gyroscope range value
 249:mpu6050.c     ****  * @see getFullScaleRange()
 250:mpu6050.c     ****  * @see MPU6050_GYRO_FS_250
 251:mpu6050.c     ****  * @see MPU6050_RA_GYRO_CONFIG
 252:mpu6050.c     ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
 253:mpu6050.c     ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 254:mpu6050.c     ****  */
 255:mpu6050.c     **** void MPU6050_setFullScaleGyroRange(uint8_t range) {
 573              		.loc 1 255 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 8
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577 0000 80B5     		push	{r7, lr}
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 0002 84B0     		sub	sp, sp, #16
 582              		.cfi_def_cfa_offset 24
 583 0004 02AF     		add	r7, sp, #8
 584              		.cfi_def_cfa 7, 16
 585 0006 0200     		movs	r2, r0
 586 0008 FB1D     		adds	r3, r7, #7
 587 000a 1A70     		strb	r2, [r3]
 256:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SE
 588              		.loc 1 256 0
 589 000c 064B     		ldr	r3, .L43
 590 000e 1878     		ldrb	r0, [r3]
 591 0010 FB1D     		adds	r3, r7, #7
 592 0012 1B78     		ldrb	r3, [r3]
 593 0014 0093     		str	r3, [sp]
 594 0016 0223     		movs	r3, #2
 595 0018 0422     		movs	r2, #4
 596 001a 1B21     		movs	r1, #27
 597 001c FFF7FEFF 		bl	I2CWriteBits
 257:mpu6050.c     **** }
 598              		.loc 1 257 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 16


 599 0020 C046     		nop
 600 0022 BD46     		mov	sp, r7
 601 0024 02B0     		add	sp, sp, #8
 602              		@ sp needed
 603 0026 80BD     		pop	{r7, pc}
 604              	.L44:
 605              		.align	2
 606              	.L43:
 607 0028 00000000 		.word	devAddr
 608              		.cfi_endproc
 609              	.LFE13:
 610              		.size	MPU6050_setFullScaleGyroRange, .-MPU6050_setFullScaleGyroRange
 611              		.section	.text.MPU6050_getAccelXSelfTest,"ax",%progbits
 612              		.align	2
 613              		.global	MPU6050_getAccelXSelfTest
 614              		.code	16
 615              		.thumb_func
 616              		.type	MPU6050_getAccelXSelfTest, %function
 617              	MPU6050_getAccelXSelfTest:
 618              	.LFB14:
 258:mpu6050.c     **** 
 259:mpu6050.c     **** // ACCEL_CONFIG register
 260:mpu6050.c     **** 
 261:mpu6050.c     **** /** Get self-test enabled setting for accelerometer X axis.
 262:mpu6050.c     ****  * @return Self-test enabled value
 263:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 264:mpu6050.c     ****  */
 265:mpu6050.c     **** bool MPU6050_getAccelXSelfTest() {
 619              		.loc 1 265 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623 0000 80B5     		push	{r7, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 266:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, buffer);
 629              		.loc 1 266 0
 630 0004 074B     		ldr	r3, .L47
 631 0006 1878     		ldrb	r0, [r3]
 632 0008 074B     		ldr	r3, .L47+4
 633 000a 0722     		movs	r2, #7
 634 000c 1C21     		movs	r1, #28
 635 000e FFF7FEFF 		bl	I2CReadBit
 267:mpu6050.c     ****     return buffer[0];
 636              		.loc 1 267 0
 637 0012 054B     		ldr	r3, .L47+4
 638 0014 1B78     		ldrb	r3, [r3]
 639 0016 5A1E     		subs	r2, r3, #1
 640 0018 9341     		sbcs	r3, r3, r2
 641 001a DBB2     		uxtb	r3, r3
 268:mpu6050.c     **** }
 642              		.loc 1 268 0
 643 001c 1800     		movs	r0, r3
 644 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 17


 645              		@ sp needed
 646 0020 80BD     		pop	{r7, pc}
 647              	.L48:
 648 0022 C046     		.align	2
 649              	.L47:
 650 0024 00000000 		.word	devAddr
 651 0028 00000000 		.word	buffer
 652              		.cfi_endproc
 653              	.LFE14:
 654              		.size	MPU6050_getAccelXSelfTest, .-MPU6050_getAccelXSelfTest
 655              		.section	.text.MPU6050_setAccelXSelfTest,"ax",%progbits
 656              		.align	2
 657              		.global	MPU6050_setAccelXSelfTest
 658              		.code	16
 659              		.thumb_func
 660              		.type	MPU6050_setAccelXSelfTest, %function
 661              	MPU6050_setAccelXSelfTest:
 662              	.LFB15:
 269:mpu6050.c     **** /** Set self-test enabled setting for accelerometer X axis.
 270:mpu6050.c     ****  * @param enabled Self-test enabled value
 271:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 272:mpu6050.c     ****  */
 273:mpu6050.c     **** void MPU6050_setAccelXSelfTest(bool enabled) {
 663              		.loc 1 273 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667 0000 80B5     		push	{r7, lr}
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 7, -8
 670              		.cfi_offset 14, -4
 671 0002 82B0     		sub	sp, sp, #8
 672              		.cfi_def_cfa_offset 16
 673 0004 00AF     		add	r7, sp, #0
 674              		.cfi_def_cfa_register 7
 675 0006 0200     		movs	r2, r0
 676 0008 FB1D     		adds	r3, r7, #7
 677 000a 1A70     		strb	r2, [r3]
 274:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, enabled);
 678              		.loc 1 274 0
 679 000c 054B     		ldr	r3, .L50
 680 000e 1878     		ldrb	r0, [r3]
 681 0010 FB1D     		adds	r3, r7, #7
 682 0012 1B78     		ldrb	r3, [r3]
 683 0014 0722     		movs	r2, #7
 684 0016 1C21     		movs	r1, #28
 685 0018 FFF7FEFF 		bl	I2CWriteBit
 275:mpu6050.c     **** }
 686              		.loc 1 275 0
 687 001c C046     		nop
 688 001e BD46     		mov	sp, r7
 689 0020 02B0     		add	sp, sp, #8
 690              		@ sp needed
 691 0022 80BD     		pop	{r7, pc}
 692              	.L51:
 693              		.align	2
 694              	.L50:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 18


 695 0024 00000000 		.word	devAddr
 696              		.cfi_endproc
 697              	.LFE15:
 698              		.size	MPU6050_setAccelXSelfTest, .-MPU6050_setAccelXSelfTest
 699              		.section	.text.MPU6050_getAccelYSelfTest,"ax",%progbits
 700              		.align	2
 701              		.global	MPU6050_getAccelYSelfTest
 702              		.code	16
 703              		.thumb_func
 704              		.type	MPU6050_getAccelYSelfTest, %function
 705              	MPU6050_getAccelYSelfTest:
 706              	.LFB16:
 276:mpu6050.c     **** /** Get self-test enabled value for accelerometer Y axis.
 277:mpu6050.c     ****  * @return Self-test enabled value
 278:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 279:mpu6050.c     ****  */
 280:mpu6050.c     **** bool MPU6050_getAccelYSelfTest() {
 707              		.loc 1 280 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711 0000 80B5     		push	{r7, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 00AF     		add	r7, sp, #0
 716              		.cfi_def_cfa_register 7
 281:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, buffer);
 717              		.loc 1 281 0
 718 0004 074B     		ldr	r3, .L54
 719 0006 1878     		ldrb	r0, [r3]
 720 0008 074B     		ldr	r3, .L54+4
 721 000a 0622     		movs	r2, #6
 722 000c 1C21     		movs	r1, #28
 723 000e FFF7FEFF 		bl	I2CReadBit
 282:mpu6050.c     ****     return buffer[0];
 724              		.loc 1 282 0
 725 0012 054B     		ldr	r3, .L54+4
 726 0014 1B78     		ldrb	r3, [r3]
 727 0016 5A1E     		subs	r2, r3, #1
 728 0018 9341     		sbcs	r3, r3, r2
 729 001a DBB2     		uxtb	r3, r3
 283:mpu6050.c     **** }
 730              		.loc 1 283 0
 731 001c 1800     		movs	r0, r3
 732 001e BD46     		mov	sp, r7
 733              		@ sp needed
 734 0020 80BD     		pop	{r7, pc}
 735              	.L55:
 736 0022 C046     		.align	2
 737              	.L54:
 738 0024 00000000 		.word	devAddr
 739 0028 00000000 		.word	buffer
 740              		.cfi_endproc
 741              	.LFE16:
 742              		.size	MPU6050_getAccelYSelfTest, .-MPU6050_getAccelYSelfTest
 743              		.section	.text.MPU6050_setAccelYSelfTest,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 19


 744              		.align	2
 745              		.global	MPU6050_setAccelYSelfTest
 746              		.code	16
 747              		.thumb_func
 748              		.type	MPU6050_setAccelYSelfTest, %function
 749              	MPU6050_setAccelYSelfTest:
 750              	.LFB17:
 284:mpu6050.c     **** /** Set self-test enabled value for accelerometer Y axis.
 285:mpu6050.c     ****  * @param enabled Self-test enabled value
 286:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 287:mpu6050.c     ****  */
 288:mpu6050.c     **** void MPU6050_setAccelYSelfTest(bool enabled) {
 751              		.loc 1 288 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 0002 82B0     		sub	sp, sp, #8
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 763 0006 0200     		movs	r2, r0
 764 0008 FB1D     		adds	r3, r7, #7
 765 000a 1A70     		strb	r2, [r3]
 289:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, enabled);
 766              		.loc 1 289 0
 767 000c 054B     		ldr	r3, .L57
 768 000e 1878     		ldrb	r0, [r3]
 769 0010 FB1D     		adds	r3, r7, #7
 770 0012 1B78     		ldrb	r3, [r3]
 771 0014 0622     		movs	r2, #6
 772 0016 1C21     		movs	r1, #28
 773 0018 FFF7FEFF 		bl	I2CWriteBit
 290:mpu6050.c     **** }
 774              		.loc 1 290 0
 775 001c C046     		nop
 776 001e BD46     		mov	sp, r7
 777 0020 02B0     		add	sp, sp, #8
 778              		@ sp needed
 779 0022 80BD     		pop	{r7, pc}
 780              	.L58:
 781              		.align	2
 782              	.L57:
 783 0024 00000000 		.word	devAddr
 784              		.cfi_endproc
 785              	.LFE17:
 786              		.size	MPU6050_setAccelYSelfTest, .-MPU6050_setAccelYSelfTest
 787              		.section	.text.MPU6050_getAccelZSelfTest,"ax",%progbits
 788              		.align	2
 789              		.global	MPU6050_getAccelZSelfTest
 790              		.code	16
 791              		.thumb_func
 792              		.type	MPU6050_getAccelZSelfTest, %function
 793              	MPU6050_getAccelZSelfTest:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 20


 794              	.LFB18:
 291:mpu6050.c     **** /** Get self-test enabled value for accelerometer Z axis.
 292:mpu6050.c     ****  * @return Self-test enabled value
 293:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 294:mpu6050.c     ****  */
 295:mpu6050.c     **** bool MPU6050_getAccelZSelfTest() {
 795              		.loc 1 295 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 1, uses_anonymous_args = 0
 799 0000 80B5     		push	{r7, lr}
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 00AF     		add	r7, sp, #0
 804              		.cfi_def_cfa_register 7
 296:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, buffer);
 805              		.loc 1 296 0
 806 0004 074B     		ldr	r3, .L61
 807 0006 1878     		ldrb	r0, [r3]
 808 0008 074B     		ldr	r3, .L61+4
 809 000a 0522     		movs	r2, #5
 810 000c 1C21     		movs	r1, #28
 811 000e FFF7FEFF 		bl	I2CReadBit
 297:mpu6050.c     ****     return buffer[0];
 812              		.loc 1 297 0
 813 0012 054B     		ldr	r3, .L61+4
 814 0014 1B78     		ldrb	r3, [r3]
 815 0016 5A1E     		subs	r2, r3, #1
 816 0018 9341     		sbcs	r3, r3, r2
 817 001a DBB2     		uxtb	r3, r3
 298:mpu6050.c     **** }
 818              		.loc 1 298 0
 819 001c 1800     		movs	r0, r3
 820 001e BD46     		mov	sp, r7
 821              		@ sp needed
 822 0020 80BD     		pop	{r7, pc}
 823              	.L62:
 824 0022 C046     		.align	2
 825              	.L61:
 826 0024 00000000 		.word	devAddr
 827 0028 00000000 		.word	buffer
 828              		.cfi_endproc
 829              	.LFE18:
 830              		.size	MPU6050_getAccelZSelfTest, .-MPU6050_getAccelZSelfTest
 831              		.section	.text.MPU6050_setAccelZSelfTest,"ax",%progbits
 832              		.align	2
 833              		.global	MPU6050_setAccelZSelfTest
 834              		.code	16
 835              		.thumb_func
 836              		.type	MPU6050_setAccelZSelfTest, %function
 837              	MPU6050_setAccelZSelfTest:
 838              	.LFB19:
 299:mpu6050.c     **** /** Set self-test enabled value for accelerometer Z axis.
 300:mpu6050.c     ****  * @param enabled Self-test enabled value
 301:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 302:mpu6050.c     ****  */
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 21


 303:mpu6050.c     **** void MPU6050_setAccelZSelfTest(bool enabled) {
 839              		.loc 1 303 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0000 80B5     		push	{r7, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 7, -8
 846              		.cfi_offset 14, -4
 847 0002 82B0     		sub	sp, sp, #8
 848              		.cfi_def_cfa_offset 16
 849 0004 00AF     		add	r7, sp, #0
 850              		.cfi_def_cfa_register 7
 851 0006 0200     		movs	r2, r0
 852 0008 FB1D     		adds	r3, r7, #7
 853 000a 1A70     		strb	r2, [r3]
 304:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, enabled);
 854              		.loc 1 304 0
 855 000c 054B     		ldr	r3, .L64
 856 000e 1878     		ldrb	r0, [r3]
 857 0010 FB1D     		adds	r3, r7, #7
 858 0012 1B78     		ldrb	r3, [r3]
 859 0014 0522     		movs	r2, #5
 860 0016 1C21     		movs	r1, #28
 861 0018 FFF7FEFF 		bl	I2CWriteBit
 305:mpu6050.c     **** }
 862              		.loc 1 305 0
 863 001c C046     		nop
 864 001e BD46     		mov	sp, r7
 865 0020 02B0     		add	sp, sp, #8
 866              		@ sp needed
 867 0022 80BD     		pop	{r7, pc}
 868              	.L65:
 869              		.align	2
 870              	.L64:
 871 0024 00000000 		.word	devAddr
 872              		.cfi_endproc
 873              	.LFE19:
 874              		.size	MPU6050_setAccelZSelfTest, .-MPU6050_setAccelZSelfTest
 875              		.section	.text.MPU6050_getFullScaleAccelRange,"ax",%progbits
 876              		.align	2
 877              		.global	MPU6050_getFullScaleAccelRange
 878              		.code	16
 879              		.thumb_func
 880              		.type	MPU6050_getFullScaleAccelRange, %function
 881              	MPU6050_getFullScaleAccelRange:
 882              	.LFB20:
 306:mpu6050.c     **** /** Get full-scale accelerometer range.
 307:mpu6050.c     ****  * The FS_SEL parameter allows setting the full-scale range of the accelerometer
 308:mpu6050.c     ****  * sensors, as described in the table below.
 309:mpu6050.c     ****  *
 310:mpu6050.c     ****  * <pre>
 311:mpu6050.c     ****  * 0 = +/- 2g
 312:mpu6050.c     ****  * 1 = +/- 4g
 313:mpu6050.c     ****  * 2 = +/- 8g
 314:mpu6050.c     ****  * 3 = +/- 16g
 315:mpu6050.c     ****  * </pre>
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 22


 316:mpu6050.c     ****  *
 317:mpu6050.c     ****  * @return Current full-scale accelerometer range setting
 318:mpu6050.c     ****  * @see MPU6050_ACCEL_FS_2
 319:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 320:mpu6050.c     ****  * @see MPU6050_ACONFIG_AFS_SEL_BIT
 321:mpu6050.c     ****  * @see MPU6050_ACONFIG_AFS_SEL_LENGTH
 322:mpu6050.c     ****  */
 323:mpu6050.c     **** uint8_t MPU6050_getFullScaleAccelRange() {
 883              		.loc 1 323 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 82B0     		sub	sp, sp, #8
 892              		.cfi_def_cfa_offset 16
 893 0004 02AF     		add	r7, sp, #8
 894              		.cfi_def_cfa 7, 8
 324:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_
 895              		.loc 1 324 0
 896 0006 074B     		ldr	r3, .L68
 897 0008 1878     		ldrb	r0, [r3]
 898 000a 074B     		ldr	r3, .L68+4
 899 000c 0093     		str	r3, [sp]
 900 000e 0223     		movs	r3, #2
 901 0010 0422     		movs	r2, #4
 902 0012 1C21     		movs	r1, #28
 903 0014 FFF7FEFF 		bl	I2CReadBits
 325:mpu6050.c     ****     return buffer[0];
 904              		.loc 1 325 0
 905 0018 034B     		ldr	r3, .L68+4
 906 001a 1B78     		ldrb	r3, [r3]
 326:mpu6050.c     **** }
 907              		.loc 1 326 0
 908 001c 1800     		movs	r0, r3
 909 001e BD46     		mov	sp, r7
 910              		@ sp needed
 911 0020 80BD     		pop	{r7, pc}
 912              	.L69:
 913 0022 C046     		.align	2
 914              	.L68:
 915 0024 00000000 		.word	devAddr
 916 0028 00000000 		.word	buffer
 917              		.cfi_endproc
 918              	.LFE20:
 919              		.size	MPU6050_getFullScaleAccelRange, .-MPU6050_getFullScaleAccelRange
 920              		.section	.text.MPU6050_setFullScaleAccelRange,"ax",%progbits
 921              		.align	2
 922              		.global	MPU6050_setFullScaleAccelRange
 923              		.code	16
 924              		.thumb_func
 925              		.type	MPU6050_setFullScaleAccelRange, %function
 926              	MPU6050_setFullScaleAccelRange:
 927              	.LFB21:
 327:mpu6050.c     **** /** Set full-scale accelerometer range.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 23


 328:mpu6050.c     ****  * @param range New full-scale accelerometer range setting
 329:mpu6050.c     ****  * @see getFullScaleAccelRange()
 330:mpu6050.c     ****  */
 331:mpu6050.c     **** void MPU6050_setFullScaleAccelRange(uint8_t range) {
 928              		.loc 1 331 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 8
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 84B0     		sub	sp, sp, #16
 937              		.cfi_def_cfa_offset 24
 938 0004 02AF     		add	r7, sp, #8
 939              		.cfi_def_cfa 7, 16
 940 0006 0200     		movs	r2, r0
 941 0008 FB1D     		adds	r3, r7, #7
 942 000a 1A70     		strb	r2, [r3]
 332:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS
 943              		.loc 1 332 0
 944 000c 064B     		ldr	r3, .L71
 945 000e 1878     		ldrb	r0, [r3]
 946 0010 FB1D     		adds	r3, r7, #7
 947 0012 1B78     		ldrb	r3, [r3]
 948 0014 0093     		str	r3, [sp]
 949 0016 0223     		movs	r3, #2
 950 0018 0422     		movs	r2, #4
 951 001a 1C21     		movs	r1, #28
 952 001c FFF7FEFF 		bl	I2CWriteBits
 333:mpu6050.c     **** }
 953              		.loc 1 333 0
 954 0020 C046     		nop
 955 0022 BD46     		mov	sp, r7
 956 0024 02B0     		add	sp, sp, #8
 957              		@ sp needed
 958 0026 80BD     		pop	{r7, pc}
 959              	.L72:
 960              		.align	2
 961              	.L71:
 962 0028 00000000 		.word	devAddr
 963              		.cfi_endproc
 964              	.LFE21:
 965              		.size	MPU6050_setFullScaleAccelRange, .-MPU6050_setFullScaleAccelRange
 966              		.section	.text.MPU6050_getDHPFMode,"ax",%progbits
 967              		.align	2
 968              		.global	MPU6050_getDHPFMode
 969              		.code	16
 970              		.thumb_func
 971              		.type	MPU6050_getDHPFMode, %function
 972              	MPU6050_getDHPFMode:
 973              	.LFB22:
 334:mpu6050.c     **** /** Get the high-pass filter configuration.
 335:mpu6050.c     ****  * The DHPF is a filter module in the path leading to motion detectors (Free
 336:mpu6050.c     ****  * Fall, Motion threshold, and Zero Motion). The high pass filter output is not
 337:mpu6050.c     ****  * available to the data registers (see Figure in Section 8 of the MPU-6000/
 338:mpu6050.c     ****  * MPU-6050 Product Specification document).
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 24


 339:mpu6050.c     ****  *
 340:mpu6050.c     ****  * The high pass filter has three modes:
 341:mpu6050.c     ****  *
 342:mpu6050.c     ****  * <pre>
 343:mpu6050.c     ****  *    Reset: The filter output settles to zero within one sample. This
 344:mpu6050.c     ****  *           effectively disables the high pass filter. This mode may be toggled
 345:mpu6050.c     ****  *           to quickly settle the filter.
 346:mpu6050.c     ****  *
 347:mpu6050.c     ****  *    On:    The high pass filter will pass signals above the cut off frequency.
 348:mpu6050.c     ****  *
 349:mpu6050.c     ****  *    Hold:  When triggered, the filter holds the present sample. The filter
 350:mpu6050.c     ****  *           output will be the difference between the input sample and the held
 351:mpu6050.c     ****  *           sample.
 352:mpu6050.c     ****  * </pre>
 353:mpu6050.c     ****  *
 354:mpu6050.c     ****  * <pre>
 355:mpu6050.c     ****  * ACCEL_HPF | Filter Mode | Cut-off Frequency
 356:mpu6050.c     ****  * ----------+-------------+------------------
 357:mpu6050.c     ****  * 0         | Reset       | None
 358:mpu6050.c     ****  * 1         | On          | 5Hz
 359:mpu6050.c     ****  * 2         | On          | 2.5Hz
 360:mpu6050.c     ****  * 3         | On          | 1.25Hz
 361:mpu6050.c     ****  * 4         | On          | 0.63Hz
 362:mpu6050.c     ****  * 7         | Hold        | None
 363:mpu6050.c     ****  * </pre>
 364:mpu6050.c     ****  *
 365:mpu6050.c     ****  * @return Current high-pass filter configuration
 366:mpu6050.c     ****  * @see MPU6050_DHPF_RESET
 367:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 368:mpu6050.c     ****  */
 369:mpu6050.c     **** uint8_t MPU6050_getDHPFMode() {
 974              		.loc 1 369 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978 0000 80B5     		push	{r7, lr}
 979              		.cfi_def_cfa_offset 8
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 82B0     		sub	sp, sp, #8
 983              		.cfi_def_cfa_offset 16
 984 0004 02AF     		add	r7, sp, #8
 985              		.cfi_def_cfa 7, 8
 370:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_AC
 986              		.loc 1 370 0
 987 0006 074B     		ldr	r3, .L75
 988 0008 1878     		ldrb	r0, [r3]
 989 000a 074B     		ldr	r3, .L75+4
 990 000c 0093     		str	r3, [sp]
 991 000e 0323     		movs	r3, #3
 992 0010 0222     		movs	r2, #2
 993 0012 1C21     		movs	r1, #28
 994 0014 FFF7FEFF 		bl	I2CReadBits
 371:mpu6050.c     ****     return buffer[0];
 995              		.loc 1 371 0
 996 0018 034B     		ldr	r3, .L75+4
 997 001a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 25


 372:mpu6050.c     **** }
 998              		.loc 1 372 0
 999 001c 1800     		movs	r0, r3
 1000 001e BD46     		mov	sp, r7
 1001              		@ sp needed
 1002 0020 80BD     		pop	{r7, pc}
 1003              	.L76:
 1004 0022 C046     		.align	2
 1005              	.L75:
 1006 0024 00000000 		.word	devAddr
 1007 0028 00000000 		.word	buffer
 1008              		.cfi_endproc
 1009              	.LFE22:
 1010              		.size	MPU6050_getDHPFMode, .-MPU6050_getDHPFMode
 1011              		.section	.text.MPU6050_setDHPFMode,"ax",%progbits
 1012              		.align	2
 1013              		.global	MPU6050_setDHPFMode
 1014              		.code	16
 1015              		.thumb_func
 1016              		.type	MPU6050_setDHPFMode, %function
 1017              	MPU6050_setDHPFMode:
 1018              	.LFB23:
 373:mpu6050.c     **** /** Set the high-pass filter configuration.
 374:mpu6050.c     ****  * @param bandwidth New high-pass filter configuration
 375:mpu6050.c     ****  * @see setDHPFMode()
 376:mpu6050.c     ****  * @see MPU6050_DHPF_RESET
 377:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_CONFIG
 378:mpu6050.c     ****  */
 379:mpu6050.c     **** void MPU6050_setDHPFMode(uint8_t bandwidth) {
 1019              		.loc 1 379 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 8
 1022              		@ frame_needed = 1, uses_anonymous_args = 0
 1023 0000 80B5     		push	{r7, lr}
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 0002 84B0     		sub	sp, sp, #16
 1028              		.cfi_def_cfa_offset 24
 1029 0004 02AF     		add	r7, sp, #8
 1030              		.cfi_def_cfa 7, 16
 1031 0006 0200     		movs	r2, r0
 1032 0008 FB1D     		adds	r3, r7, #7
 1033 000a 1A70     		strb	r2, [r3]
 380:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_A
 1034              		.loc 1 380 0
 1035 000c 064B     		ldr	r3, .L78
 1036 000e 1878     		ldrb	r0, [r3]
 1037 0010 FB1D     		adds	r3, r7, #7
 1038 0012 1B78     		ldrb	r3, [r3]
 1039 0014 0093     		str	r3, [sp]
 1040 0016 0323     		movs	r3, #3
 1041 0018 0222     		movs	r2, #2
 1042 001a 1C21     		movs	r1, #28
 1043 001c FFF7FEFF 		bl	I2CWriteBits
 381:mpu6050.c     **** }
 1044              		.loc 1 381 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 26


 1045 0020 C046     		nop
 1046 0022 BD46     		mov	sp, r7
 1047 0024 02B0     		add	sp, sp, #8
 1048              		@ sp needed
 1049 0026 80BD     		pop	{r7, pc}
 1050              	.L79:
 1051              		.align	2
 1052              	.L78:
 1053 0028 00000000 		.word	devAddr
 1054              		.cfi_endproc
 1055              	.LFE23:
 1056              		.size	MPU6050_setDHPFMode, .-MPU6050_setDHPFMode
 1057              		.section	.text.MPU6050_getFreefallDetectionThreshold,"ax",%progbits
 1058              		.align	2
 1059              		.global	MPU6050_getFreefallDetectionThreshold
 1060              		.code	16
 1061              		.thumb_func
 1062              		.type	MPU6050_getFreefallDetectionThreshold, %function
 1063              	MPU6050_getFreefallDetectionThreshold:
 1064              	.LFB24:
 382:mpu6050.c     **** 
 383:mpu6050.c     **** // FF_THR register
 384:mpu6050.c     **** 
 385:mpu6050.c     **** /** Get free-fall event acceleration threshold.
 386:mpu6050.c     ****  * This register configures the detection threshold for Free Fall event
 387:mpu6050.c     ****  * detection. The unit of FF_THR is 1LSB = 2mg. Free Fall is detected when the
 388:mpu6050.c     ****  * absolute value of the accelerometer measurements for the three axes are each
 389:mpu6050.c     ****  * less than the detection threshold. This condition increments the Free Fall
 390:mpu6050.c     ****  * duration counter (Register 30). The Free Fall interrupt is triggered when the
 391:mpu6050.c     ****  * Free Fall duration counter reaches the time specified in FF_DUR.
 392:mpu6050.c     ****  *
 393:mpu6050.c     ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of the
 394:mpu6050.c     ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 395:mpu6050.c     ****  * 58 of this document.
 396:mpu6050.c     ****  *
 397:mpu6050.c     ****  * @return Current free-fall acceleration threshold value (LSB = 2mg)
 398:mpu6050.c     ****  * @see MPU6050_RA_FF_THR
 399:mpu6050.c     ****  */
 400:mpu6050.c     **** uint8_t MPU6050_getFreefallDetectionThreshold() {
 1065              		.loc 1 400 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              		.cfi_def_cfa_offset 8
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 00AF     		add	r7, sp, #0
 1074              		.cfi_def_cfa_register 7
 401:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_FF_THR, buffer);
 1075              		.loc 1 401 0
 1076 0004 054B     		ldr	r3, .L82
 1077 0006 1B78     		ldrb	r3, [r3]
 1078 0008 054A     		ldr	r2, .L82+4
 1079 000a 1D21     		movs	r1, #29
 1080 000c 1800     		movs	r0, r3
 1081 000e FFF7FEFF 		bl	I2CReadByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 27


 402:mpu6050.c     ****     return buffer[0];
 1082              		.loc 1 402 0
 1083 0012 034B     		ldr	r3, .L82+4
 1084 0014 1B78     		ldrb	r3, [r3]
 403:mpu6050.c     **** }
 1085              		.loc 1 403 0
 1086 0016 1800     		movs	r0, r3
 1087 0018 BD46     		mov	sp, r7
 1088              		@ sp needed
 1089 001a 80BD     		pop	{r7, pc}
 1090              	.L83:
 1091              		.align	2
 1092              	.L82:
 1093 001c 00000000 		.word	devAddr
 1094 0020 00000000 		.word	buffer
 1095              		.cfi_endproc
 1096              	.LFE24:
 1097              		.size	MPU6050_getFreefallDetectionThreshold, .-MPU6050_getFreefallDetectionThreshold
 1098              		.section	.text.MPU6050_setFreefallDetectionThreshold,"ax",%progbits
 1099              		.align	2
 1100              		.global	MPU6050_setFreefallDetectionThreshold
 1101              		.code	16
 1102              		.thumb_func
 1103              		.type	MPU6050_setFreefallDetectionThreshold, %function
 1104              	MPU6050_setFreefallDetectionThreshold:
 1105              	.LFB25:
 404:mpu6050.c     **** /** Get free-fall event acceleration threshold.
 405:mpu6050.c     ****  * @param threshold New free-fall acceleration threshold value (LSB = 2mg)
 406:mpu6050.c     ****  * @see getFreefallDetectionThreshold()
 407:mpu6050.c     ****  * @see MPU6050_RA_FF_THR
 408:mpu6050.c     ****  */
 409:mpu6050.c     **** void MPU6050_setFreefallDetectionThreshold(uint8_t threshold) {
 1106              		.loc 1 409 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 8
 1109              		@ frame_needed = 1, uses_anonymous_args = 0
 1110 0000 80B5     		push	{r7, lr}
 1111              		.cfi_def_cfa_offset 8
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114 0002 82B0     		sub	sp, sp, #8
 1115              		.cfi_def_cfa_offset 16
 1116 0004 00AF     		add	r7, sp, #0
 1117              		.cfi_def_cfa_register 7
 1118 0006 0200     		movs	r2, r0
 1119 0008 FB1D     		adds	r3, r7, #7
 1120 000a 1A70     		strb	r2, [r3]
 410:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_FF_THR, threshold);
 1121              		.loc 1 410 0
 1122 000c 054B     		ldr	r3, .L85
 1123 000e 1878     		ldrb	r0, [r3]
 1124 0010 FB1D     		adds	r3, r7, #7
 1125 0012 1B78     		ldrb	r3, [r3]
 1126 0014 1A00     		movs	r2, r3
 1127 0016 1D21     		movs	r1, #29
 1128 0018 FFF7FEFF 		bl	I2CWriteByte
 411:mpu6050.c     **** }
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 28


 1129              		.loc 1 411 0
 1130 001c C046     		nop
 1131 001e BD46     		mov	sp, r7
 1132 0020 02B0     		add	sp, sp, #8
 1133              		@ sp needed
 1134 0022 80BD     		pop	{r7, pc}
 1135              	.L86:
 1136              		.align	2
 1137              	.L85:
 1138 0024 00000000 		.word	devAddr
 1139              		.cfi_endproc
 1140              	.LFE25:
 1141              		.size	MPU6050_setFreefallDetectionThreshold, .-MPU6050_setFreefallDetectionThreshold
 1142              		.section	.text.MPU6050_getFreefallDetectionDuration,"ax",%progbits
 1143              		.align	2
 1144              		.global	MPU6050_getFreefallDetectionDuration
 1145              		.code	16
 1146              		.thumb_func
 1147              		.type	MPU6050_getFreefallDetectionDuration, %function
 1148              	MPU6050_getFreefallDetectionDuration:
 1149              	.LFB26:
 412:mpu6050.c     **** 
 413:mpu6050.c     **** // FF_DUR register
 414:mpu6050.c     **** 
 415:mpu6050.c     **** /** Get free-fall event duration threshold.
 416:mpu6050.c     ****  * This register configures the duration counter threshold for Free Fall event
 417:mpu6050.c     ****  * detection. The duration counter ticks at 1kHz, therefore FF_DUR has a unit
 418:mpu6050.c     ****  * of 1 LSB = 1 ms.
 419:mpu6050.c     ****  *
 420:mpu6050.c     ****  * The Free Fall duration counter increments while the absolute value of the
 421:mpu6050.c     ****  * accelerometer measurements are each less than the detection threshold
 422:mpu6050.c     ****  * (Register 29). The Free Fall interrupt is triggered when the Free Fall
 423:mpu6050.c     ****  * duration counter reaches the time specified in this register.
 424:mpu6050.c     ****  *
 425:mpu6050.c     ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of
 426:mpu6050.c     ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 427:mpu6050.c     ****  * and 58 of this document.
 428:mpu6050.c     ****  *
 429:mpu6050.c     ****  * @return Current free-fall duration threshold value (LSB = 1ms)
 430:mpu6050.c     ****  * @see MPU6050_RA_FF_DUR
 431:mpu6050.c     ****  */
 432:mpu6050.c     **** uint8_t MPU6050_getFreefallDetectionDuration() {
 1150              		.loc 1 432 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0000 80B5     		push	{r7, lr}
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 433:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_FF_DUR, buffer);
 1160              		.loc 1 433 0
 1161 0004 054B     		ldr	r3, .L89
 1162 0006 1B78     		ldrb	r3, [r3]
 1163 0008 054A     		ldr	r2, .L89+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 29


 1164 000a 1E21     		movs	r1, #30
 1165 000c 1800     		movs	r0, r3
 1166 000e FFF7FEFF 		bl	I2CReadByte
 434:mpu6050.c     ****     return buffer[0];
 1167              		.loc 1 434 0
 1168 0012 034B     		ldr	r3, .L89+4
 1169 0014 1B78     		ldrb	r3, [r3]
 435:mpu6050.c     **** }
 1170              		.loc 1 435 0
 1171 0016 1800     		movs	r0, r3
 1172 0018 BD46     		mov	sp, r7
 1173              		@ sp needed
 1174 001a 80BD     		pop	{r7, pc}
 1175              	.L90:
 1176              		.align	2
 1177              	.L89:
 1178 001c 00000000 		.word	devAddr
 1179 0020 00000000 		.word	buffer
 1180              		.cfi_endproc
 1181              	.LFE26:
 1182              		.size	MPU6050_getFreefallDetectionDuration, .-MPU6050_getFreefallDetectionDuration
 1183              		.section	.text.MPU6050_setFreefallDetectionDuration,"ax",%progbits
 1184              		.align	2
 1185              		.global	MPU6050_setFreefallDetectionDuration
 1186              		.code	16
 1187              		.thumb_func
 1188              		.type	MPU6050_setFreefallDetectionDuration, %function
 1189              	MPU6050_setFreefallDetectionDuration:
 1190              	.LFB27:
 436:mpu6050.c     **** /** Get free-fall event duration threshold.
 437:mpu6050.c     ****  * @param duration New free-fall duration threshold value (LSB = 1ms)
 438:mpu6050.c     ****  * @see getFreefallDetectionDuration()
 439:mpu6050.c     ****  * @see MPU6050_RA_FF_DUR
 440:mpu6050.c     ****  */
 441:mpu6050.c     **** void MPU6050_setFreefallDetectionDuration(uint8_t duration) {
 1191              		.loc 1 441 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 8
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 0002 82B0     		sub	sp, sp, #8
 1200              		.cfi_def_cfa_offset 16
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 0006 0200     		movs	r2, r0
 1204 0008 FB1D     		adds	r3, r7, #7
 1205 000a 1A70     		strb	r2, [r3]
 442:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_FF_DUR, duration);
 1206              		.loc 1 442 0
 1207 000c 054B     		ldr	r3, .L92
 1208 000e 1878     		ldrb	r0, [r3]
 1209 0010 FB1D     		adds	r3, r7, #7
 1210 0012 1B78     		ldrb	r3, [r3]
 1211 0014 1A00     		movs	r2, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 30


 1212 0016 1E21     		movs	r1, #30
 1213 0018 FFF7FEFF 		bl	I2CWriteByte
 443:mpu6050.c     **** }
 1214              		.loc 1 443 0
 1215 001c C046     		nop
 1216 001e BD46     		mov	sp, r7
 1217 0020 02B0     		add	sp, sp, #8
 1218              		@ sp needed
 1219 0022 80BD     		pop	{r7, pc}
 1220              	.L93:
 1221              		.align	2
 1222              	.L92:
 1223 0024 00000000 		.word	devAddr
 1224              		.cfi_endproc
 1225              	.LFE27:
 1226              		.size	MPU6050_setFreefallDetectionDuration, .-MPU6050_setFreefallDetectionDuration
 1227              		.section	.text.MPU6050_getMotionDetectionThreshold,"ax",%progbits
 1228              		.align	2
 1229              		.global	MPU6050_getMotionDetectionThreshold
 1230              		.code	16
 1231              		.thumb_func
 1232              		.type	MPU6050_getMotionDetectionThreshold, %function
 1233              	MPU6050_getMotionDetectionThreshold:
 1234              	.LFB28:
 444:mpu6050.c     **** 
 445:mpu6050.c     **** // MOT_THR register
 446:mpu6050.c     **** 
 447:mpu6050.c     **** /** Get motion detection event acceleration threshold.
 448:mpu6050.c     ****  * This register configures the detection threshold for Motion interrupt
 449:mpu6050.c     ****  * generation. The unit of MOT_THR is 1LSB = 2mg. Motion is detected when the
 450:mpu6050.c     ****  * absolute value of any of the accelerometer measurements exceeds this Motion
 451:mpu6050.c     ****  * detection threshold. This condition increments the Motion detection duration
 452:mpu6050.c     ****  * counter (Register 32). The Motion detection interrupt is triggered when the
 453:mpu6050.c     ****  * Motion Detection counter reaches the time count specified in MOT_DUR
 454:mpu6050.c     ****  * (Register 32).
 455:mpu6050.c     ****  *
 456:mpu6050.c     ****  * The Motion interrupt will indicate the axis and polarity of detected motion
 457:mpu6050.c     ****  * in MOT_DETECT_STATUS (Register 97).
 458:mpu6050.c     ****  *
 459:mpu6050.c     ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 460:mpu6050.c     ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 461:mpu6050.c     ****  * 58 of this document.
 462:mpu6050.c     ****  *
 463:mpu6050.c     ****  * @return Current motion detection acceleration threshold value (LSB = 2mg)
 464:mpu6050.c     ****  * @see MPU6050_RA_MOT_THR
 465:mpu6050.c     ****  */
 466:mpu6050.c     **** uint8_t MPU6050_getMotionDetectionThreshold() {
 1235              		.loc 1 466 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239 0000 80B5     		push	{r7, lr}
 1240              		.cfi_def_cfa_offset 8
 1241              		.cfi_offset 7, -8
 1242              		.cfi_offset 14, -4
 1243 0002 00AF     		add	r7, sp, #0
 1244              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 31


 467:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_MOT_THR, buffer);
 1245              		.loc 1 467 0
 1246 0004 054B     		ldr	r3, .L96
 1247 0006 1B78     		ldrb	r3, [r3]
 1248 0008 054A     		ldr	r2, .L96+4
 1249 000a 1F21     		movs	r1, #31
 1250 000c 1800     		movs	r0, r3
 1251 000e FFF7FEFF 		bl	I2CReadByte
 468:mpu6050.c     ****     return buffer[0];
 1252              		.loc 1 468 0
 1253 0012 034B     		ldr	r3, .L96+4
 1254 0014 1B78     		ldrb	r3, [r3]
 469:mpu6050.c     **** }
 1255              		.loc 1 469 0
 1256 0016 1800     		movs	r0, r3
 1257 0018 BD46     		mov	sp, r7
 1258              		@ sp needed
 1259 001a 80BD     		pop	{r7, pc}
 1260              	.L97:
 1261              		.align	2
 1262              	.L96:
 1263 001c 00000000 		.word	devAddr
 1264 0020 00000000 		.word	buffer
 1265              		.cfi_endproc
 1266              	.LFE28:
 1267              		.size	MPU6050_getMotionDetectionThreshold, .-MPU6050_getMotionDetectionThreshold
 1268              		.section	.text.MPU6050_setMotionDetectionThreshold,"ax",%progbits
 1269              		.align	2
 1270              		.global	MPU6050_setMotionDetectionThreshold
 1271              		.code	16
 1272              		.thumb_func
 1273              		.type	MPU6050_setMotionDetectionThreshold, %function
 1274              	MPU6050_setMotionDetectionThreshold:
 1275              	.LFB29:
 470:mpu6050.c     **** /** Set free-fall event acceleration threshold.
 471:mpu6050.c     ****  * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 472:mpu6050.c     ****  * @see getMotionDetectionThreshold()
 473:mpu6050.c     ****  * @see MPU6050_RA_MOT_THR
 474:mpu6050.c     ****  */
 475:mpu6050.c     **** void MPU6050_setMotionDetectionThreshold(uint8_t threshold) {
 1276              		.loc 1 475 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 8
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 0000 80B5     		push	{r7, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 82B0     		sub	sp, sp, #8
 1285              		.cfi_def_cfa_offset 16
 1286 0004 00AF     		add	r7, sp, #0
 1287              		.cfi_def_cfa_register 7
 1288 0006 0200     		movs	r2, r0
 1289 0008 FB1D     		adds	r3, r7, #7
 1290 000a 1A70     		strb	r2, [r3]
 476:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 1291              		.loc 1 476 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 32


 1292 000c 054B     		ldr	r3, .L99
 1293 000e 1878     		ldrb	r0, [r3]
 1294 0010 FB1D     		adds	r3, r7, #7
 1295 0012 1B78     		ldrb	r3, [r3]
 1296 0014 1A00     		movs	r2, r3
 1297 0016 1F21     		movs	r1, #31
 1298 0018 FFF7FEFF 		bl	I2CWriteByte
 477:mpu6050.c     **** }
 1299              		.loc 1 477 0
 1300 001c C046     		nop
 1301 001e BD46     		mov	sp, r7
 1302 0020 02B0     		add	sp, sp, #8
 1303              		@ sp needed
 1304 0022 80BD     		pop	{r7, pc}
 1305              	.L100:
 1306              		.align	2
 1307              	.L99:
 1308 0024 00000000 		.word	devAddr
 1309              		.cfi_endproc
 1310              	.LFE29:
 1311              		.size	MPU6050_setMotionDetectionThreshold, .-MPU6050_setMotionDetectionThreshold
 1312              		.section	.text.MPU6050_getMotionDetectionDuration,"ax",%progbits
 1313              		.align	2
 1314              		.global	MPU6050_getMotionDetectionDuration
 1315              		.code	16
 1316              		.thumb_func
 1317              		.type	MPU6050_getMotionDetectionDuration, %function
 1318              	MPU6050_getMotionDetectionDuration:
 1319              	.LFB30:
 478:mpu6050.c     **** 
 479:mpu6050.c     **** // MOT_DUR register
 480:mpu6050.c     **** 
 481:mpu6050.c     **** /** Get motion detection event duration threshold.
 482:mpu6050.c     ****  * This register configures the duration counter threshold for Motion interrupt
 483:mpu6050.c     ****  * generation. The duration counter ticks at 1 kHz, therefore MOT_DUR has a unit
 484:mpu6050.c     ****  * of 1LSB = 1ms. The Motion detection duration counter increments when the
 485:mpu6050.c     ****  * absolute value of any of the accelerometer measurements exceeds the Motion
 486:mpu6050.c     ****  * detection threshold (Register 31). The Motion detection interrupt is
 487:mpu6050.c     ****  * triggered when the Motion detection counter reaches the time count specified
 488:mpu6050.c     ****  * in this register.
 489:mpu6050.c     ****  *
 490:mpu6050.c     ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 491:mpu6050.c     ****  * MPU-6000/MPU-6050 Product Specification document.
 492:mpu6050.c     ****  *
 493:mpu6050.c     ****  * @return Current motion detection duration threshold value (LSB = 1ms)
 494:mpu6050.c     ****  * @see MPU6050_RA_MOT_DUR
 495:mpu6050.c     ****  */
 496:mpu6050.c     **** uint8_t MPU6050_getMotionDetectionDuration() {
 1320              		.loc 1 496 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 0
 1323              		@ frame_needed = 1, uses_anonymous_args = 0
 1324 0000 80B5     		push	{r7, lr}
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 33


 1329              		.cfi_def_cfa_register 7
 497:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_MOT_DUR, buffer);
 1330              		.loc 1 497 0
 1331 0004 054B     		ldr	r3, .L103
 1332 0006 1B78     		ldrb	r3, [r3]
 1333 0008 054A     		ldr	r2, .L103+4
 1334 000a 2021     		movs	r1, #32
 1335 000c 1800     		movs	r0, r3
 1336 000e FFF7FEFF 		bl	I2CReadByte
 498:mpu6050.c     ****     return buffer[0];
 1337              		.loc 1 498 0
 1338 0012 034B     		ldr	r3, .L103+4
 1339 0014 1B78     		ldrb	r3, [r3]
 499:mpu6050.c     **** }
 1340              		.loc 1 499 0
 1341 0016 1800     		movs	r0, r3
 1342 0018 BD46     		mov	sp, r7
 1343              		@ sp needed
 1344 001a 80BD     		pop	{r7, pc}
 1345              	.L104:
 1346              		.align	2
 1347              	.L103:
 1348 001c 00000000 		.word	devAddr
 1349 0020 00000000 		.word	buffer
 1350              		.cfi_endproc
 1351              	.LFE30:
 1352              		.size	MPU6050_getMotionDetectionDuration, .-MPU6050_getMotionDetectionDuration
 1353              		.section	.text.MPU6050_setMotionDetectionDuration,"ax",%progbits
 1354              		.align	2
 1355              		.global	MPU6050_setMotionDetectionDuration
 1356              		.code	16
 1357              		.thumb_func
 1358              		.type	MPU6050_setMotionDetectionDuration, %function
 1359              	MPU6050_setMotionDetectionDuration:
 1360              	.LFB31:
 500:mpu6050.c     **** /** Set motion detection event duration threshold.
 501:mpu6050.c     ****  * @param duration New motion detection duration threshold value (LSB = 1ms)
 502:mpu6050.c     ****  * @see getMotionDetectionDuration()
 503:mpu6050.c     ****  * @see MPU6050_RA_MOT_DUR
 504:mpu6050.c     ****  */
 505:mpu6050.c     **** void MPU6050_setMotionDetectionDuration(uint8_t duration) {
 1361              		.loc 1 505 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365 0000 80B5     		push	{r7, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 82B0     		sub	sp, sp, #8
 1370              		.cfi_def_cfa_offset 16
 1371 0004 00AF     		add	r7, sp, #0
 1372              		.cfi_def_cfa_register 7
 1373 0006 0200     		movs	r2, r0
 1374 0008 FB1D     		adds	r3, r7, #7
 1375 000a 1A70     		strb	r2, [r3]
 506:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_DUR, duration);
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 34


 1376              		.loc 1 506 0
 1377 000c 054B     		ldr	r3, .L106
 1378 000e 1878     		ldrb	r0, [r3]
 1379 0010 FB1D     		adds	r3, r7, #7
 1380 0012 1B78     		ldrb	r3, [r3]
 1381 0014 1A00     		movs	r2, r3
 1382 0016 2021     		movs	r1, #32
 1383 0018 FFF7FEFF 		bl	I2CWriteByte
 507:mpu6050.c     **** }
 1384              		.loc 1 507 0
 1385 001c C046     		nop
 1386 001e BD46     		mov	sp, r7
 1387 0020 02B0     		add	sp, sp, #8
 1388              		@ sp needed
 1389 0022 80BD     		pop	{r7, pc}
 1390              	.L107:
 1391              		.align	2
 1392              	.L106:
 1393 0024 00000000 		.word	devAddr
 1394              		.cfi_endproc
 1395              	.LFE31:
 1396              		.size	MPU6050_setMotionDetectionDuration, .-MPU6050_setMotionDetectionDuration
 1397              		.section	.text.MPU6050_getZeroMotionDetectionThreshold,"ax",%progbits
 1398              		.align	2
 1399              		.global	MPU6050_getZeroMotionDetectionThreshold
 1400              		.code	16
 1401              		.thumb_func
 1402              		.type	MPU6050_getZeroMotionDetectionThreshold, %function
 1403              	MPU6050_getZeroMotionDetectionThreshold:
 1404              	.LFB32:
 508:mpu6050.c     **** 
 509:mpu6050.c     **** // ZRMOT_THR register
 510:mpu6050.c     **** 
 511:mpu6050.c     **** /** Get zero motion detection event acceleration threshold.
 512:mpu6050.c     ****  * This register configures the detection threshold for Zero Motion interrupt
 513:mpu6050.c     ****  * generation. The unit of ZRMOT_THR is 1LSB = 2mg. Zero Motion is detected when
 514:mpu6050.c     ****  * the absolute value of the accelerometer measurements for the 3 axes are each
 515:mpu6050.c     ****  * less than the detection threshold. This condition increments the Zero Motion
 516:mpu6050.c     ****  * duration counter (Register 34). The Zero Motion interrupt is triggered when
 517:mpu6050.c     ****  * the Zero Motion duration counter reaches the time count specified in
 518:mpu6050.c     ****  * ZRMOT_DUR (Register 34).
 519:mpu6050.c     ****  *
 520:mpu6050.c     ****  * Unlike Free Fall or Motion detection, Zero Motion detection triggers an
 521:mpu6050.c     ****  * interrupt both when Zero Motion is first detected and when Zero Motion is no
 522:mpu6050.c     ****  * longer detected.
 523:mpu6050.c     ****  *
 524:mpu6050.c     ****  * When a zero motion event is detected, a Zero Motion Status will be indicated
 525:mpu6050.c     ****  * in the MOT_DETECT_STATUS register (Register 97). When a motion-to-zero-motion
 526:mpu6050.c     ****  * condition is detected, the status bit is set to 1. When a zero-motion-to-
 527:mpu6050.c     ****  * motion condition is detected, the status bit is set to 0.
 528:mpu6050.c     ****  *
 529:mpu6050.c     ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 530:mpu6050.c     ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 531:mpu6050.c     ****  * and 58 of this document.
 532:mpu6050.c     ****  *
 533:mpu6050.c     ****  * @return Current zero motion detection acceleration threshold value (LSB = 2mg)
 534:mpu6050.c     ****  * @see MPU6050_RA_ZRMOT_THR
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 35


 535:mpu6050.c     ****  */
 536:mpu6050.c     **** uint8_t MPU6050_getZeroMotionDetectionThreshold() {
 1405              		.loc 1 536 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 1, uses_anonymous_args = 0
 1409 0000 80B5     		push	{r7, lr}
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 7, -8
 1412              		.cfi_offset 14, -4
 1413 0002 00AF     		add	r7, sp, #0
 1414              		.cfi_def_cfa_register 7
 537:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_THR, buffer);
 1415              		.loc 1 537 0
 1416 0004 054B     		ldr	r3, .L110
 1417 0006 1B78     		ldrb	r3, [r3]
 1418 0008 054A     		ldr	r2, .L110+4
 1419 000a 2121     		movs	r1, #33
 1420 000c 1800     		movs	r0, r3
 1421 000e FFF7FEFF 		bl	I2CReadByte
 538:mpu6050.c     ****     return buffer[0];
 1422              		.loc 1 538 0
 1423 0012 034B     		ldr	r3, .L110+4
 1424 0014 1B78     		ldrb	r3, [r3]
 539:mpu6050.c     **** }
 1425              		.loc 1 539 0
 1426 0016 1800     		movs	r0, r3
 1427 0018 BD46     		mov	sp, r7
 1428              		@ sp needed
 1429 001a 80BD     		pop	{r7, pc}
 1430              	.L111:
 1431              		.align	2
 1432              	.L110:
 1433 001c 00000000 		.word	devAddr
 1434 0020 00000000 		.word	buffer
 1435              		.cfi_endproc
 1436              	.LFE32:
 1437              		.size	MPU6050_getZeroMotionDetectionThreshold, .-MPU6050_getZeroMotionDetectionThreshold
 1438              		.section	.text.MPU6050_setZeroMotionDetectionThreshold,"ax",%progbits
 1439              		.align	2
 1440              		.global	MPU6050_setZeroMotionDetectionThreshold
 1441              		.code	16
 1442              		.thumb_func
 1443              		.type	MPU6050_setZeroMotionDetectionThreshold, %function
 1444              	MPU6050_setZeroMotionDetectionThreshold:
 1445              	.LFB33:
 540:mpu6050.c     **** /** Set zero motion detection event acceleration threshold.
 541:mpu6050.c     ****  * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 542:mpu6050.c     ****  * @see getZeroMotionDetectionThreshold()
 543:mpu6050.c     ****  * @see MPU6050_RA_ZRMOT_THR
 544:mpu6050.c     ****  */
 545:mpu6050.c     **** void MPU6050_setZeroMotionDetectionThreshold(uint8_t threshold) {
 1446              		.loc 1 545 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 36


 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 7, -8
 1453              		.cfi_offset 14, -4
 1454 0002 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 16
 1456 0004 00AF     		add	r7, sp, #0
 1457              		.cfi_def_cfa_register 7
 1458 0006 0200     		movs	r2, r0
 1459 0008 FB1D     		adds	r3, r7, #7
 1460 000a 1A70     		strb	r2, [r3]
 546:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 1461              		.loc 1 546 0
 1462 000c 054B     		ldr	r3, .L113
 1463 000e 1878     		ldrb	r0, [r3]
 1464 0010 FB1D     		adds	r3, r7, #7
 1465 0012 1B78     		ldrb	r3, [r3]
 1466 0014 1A00     		movs	r2, r3
 1467 0016 2121     		movs	r1, #33
 1468 0018 FFF7FEFF 		bl	I2CWriteByte
 547:mpu6050.c     **** }
 1469              		.loc 1 547 0
 1470 001c C046     		nop
 1471 001e BD46     		mov	sp, r7
 1472 0020 02B0     		add	sp, sp, #8
 1473              		@ sp needed
 1474 0022 80BD     		pop	{r7, pc}
 1475              	.L114:
 1476              		.align	2
 1477              	.L113:
 1478 0024 00000000 		.word	devAddr
 1479              		.cfi_endproc
 1480              	.LFE33:
 1481              		.size	MPU6050_setZeroMotionDetectionThreshold, .-MPU6050_setZeroMotionDetectionThreshold
 1482              		.section	.text.MPU6050_getZeroMotionDetectionDuration,"ax",%progbits
 1483              		.align	2
 1484              		.global	MPU6050_getZeroMotionDetectionDuration
 1485              		.code	16
 1486              		.thumb_func
 1487              		.type	MPU6050_getZeroMotionDetectionDuration, %function
 1488              	MPU6050_getZeroMotionDetectionDuration:
 1489              	.LFB34:
 548:mpu6050.c     **** 
 549:mpu6050.c     **** // ZRMOT_DUR register
 550:mpu6050.c     **** 
 551:mpu6050.c     **** /** Get zero motion detection event duration threshold.
 552:mpu6050.c     ****  * This register configures the duration counter threshold for Zero Motion
 553:mpu6050.c     ****  * interrupt generation. The duration counter ticks at 16 Hz, therefore
 554:mpu6050.c     ****  * ZRMOT_DUR has a unit of 1 LSB = 64 ms. The Zero Motion duration counter
 555:mpu6050.c     ****  * increments while the absolute value of the accelerometer measurements are
 556:mpu6050.c     ****  * each less than the detection threshold (Register 33). The Zero Motion
 557:mpu6050.c     ****  * interrupt is triggered when the Zero Motion duration counter reaches the time
 558:mpu6050.c     ****  * count specified in this register.
 559:mpu6050.c     ****  *
 560:mpu6050.c     ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 561:mpu6050.c     ****  * the MPU-6000/MPU-6050 Product Specification document, as well as Registers 56
 562:mpu6050.c     ****  * and 58 of this document.
 563:mpu6050.c     ****  *
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 37


 564:mpu6050.c     ****  * @return Current zero motion detection duration threshold value (LSB = 64ms)
 565:mpu6050.c     ****  * @see MPU6050_RA_ZRMOT_DUR
 566:mpu6050.c     ****  */
 567:mpu6050.c     **** uint8_t MPU6050_getZeroMotionDetectionDuration() {
 1490              		.loc 1 567 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}
 1495              		.cfi_def_cfa_offset 8
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
 1498 0002 00AF     		add	r7, sp, #0
 1499              		.cfi_def_cfa_register 7
 568:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_DUR, buffer);
 1500              		.loc 1 568 0
 1501 0004 054B     		ldr	r3, .L117
 1502 0006 1B78     		ldrb	r3, [r3]
 1503 0008 054A     		ldr	r2, .L117+4
 1504 000a 2221     		movs	r1, #34
 1505 000c 1800     		movs	r0, r3
 1506 000e FFF7FEFF 		bl	I2CReadByte
 569:mpu6050.c     ****     return buffer[0];
 1507              		.loc 1 569 0
 1508 0012 034B     		ldr	r3, .L117+4
 1509 0014 1B78     		ldrb	r3, [r3]
 570:mpu6050.c     **** }
 1510              		.loc 1 570 0
 1511 0016 1800     		movs	r0, r3
 1512 0018 BD46     		mov	sp, r7
 1513              		@ sp needed
 1514 001a 80BD     		pop	{r7, pc}
 1515              	.L118:
 1516              		.align	2
 1517              	.L117:
 1518 001c 00000000 		.word	devAddr
 1519 0020 00000000 		.word	buffer
 1520              		.cfi_endproc
 1521              	.LFE34:
 1522              		.size	MPU6050_getZeroMotionDetectionDuration, .-MPU6050_getZeroMotionDetectionDuration
 1523              		.section	.text.MPU6050_setZeroMotionDetectionDuration,"ax",%progbits
 1524              		.align	2
 1525              		.global	MPU6050_setZeroMotionDetectionDuration
 1526              		.code	16
 1527              		.thumb_func
 1528              		.type	MPU6050_setZeroMotionDetectionDuration, %function
 1529              	MPU6050_setZeroMotionDetectionDuration:
 1530              	.LFB35:
 571:mpu6050.c     **** /** Set zero motion detection event duration threshold.
 572:mpu6050.c     ****  * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 573:mpu6050.c     ****  * @see getZeroMotionDetectionDuration()
 574:mpu6050.c     ****  * @see MPU6050_RA_ZRMOT_DUR
 575:mpu6050.c     ****  */
 576:mpu6050.c     **** void MPU6050_setZeroMotionDetectionDuration(uint8_t duration) {
 1531              		.loc 1 576 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 38


 1534              		@ frame_needed = 1, uses_anonymous_args = 0
 1535 0000 80B5     		push	{r7, lr}
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 7, -8
 1538              		.cfi_offset 14, -4
 1539 0002 82B0     		sub	sp, sp, #8
 1540              		.cfi_def_cfa_offset 16
 1541 0004 00AF     		add	r7, sp, #0
 1542              		.cfi_def_cfa_register 7
 1543 0006 0200     		movs	r2, r0
 1544 0008 FB1D     		adds	r3, r7, #7
 1545 000a 1A70     		strb	r2, [r3]
 577:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 1546              		.loc 1 577 0
 1547 000c 054B     		ldr	r3, .L120
 1548 000e 1878     		ldrb	r0, [r3]
 1549 0010 FB1D     		adds	r3, r7, #7
 1550 0012 1B78     		ldrb	r3, [r3]
 1551 0014 1A00     		movs	r2, r3
 1552 0016 2221     		movs	r1, #34
 1553 0018 FFF7FEFF 		bl	I2CWriteByte
 578:mpu6050.c     **** }
 1554              		.loc 1 578 0
 1555 001c C046     		nop
 1556 001e BD46     		mov	sp, r7
 1557 0020 02B0     		add	sp, sp, #8
 1558              		@ sp needed
 1559 0022 80BD     		pop	{r7, pc}
 1560              	.L121:
 1561              		.align	2
 1562              	.L120:
 1563 0024 00000000 		.word	devAddr
 1564              		.cfi_endproc
 1565              	.LFE35:
 1566              		.size	MPU6050_setZeroMotionDetectionDuration, .-MPU6050_setZeroMotionDetectionDuration
 1567              		.section	.text.MPU6050_getTempFIFOEnabled,"ax",%progbits
 1568              		.align	2
 1569              		.global	MPU6050_getTempFIFOEnabled
 1570              		.code	16
 1571              		.thumb_func
 1572              		.type	MPU6050_getTempFIFOEnabled, %function
 1573              	MPU6050_getTempFIFOEnabled:
 1574              	.LFB36:
 579:mpu6050.c     **** 
 580:mpu6050.c     **** // FIFO_EN register
 581:mpu6050.c     **** 
 582:mpu6050.c     **** /** Get temperature FIFO enabled value.
 583:mpu6050.c     ****  * When set to 1, this bit enables TEMP_OUT_H and TEMP_OUT_L (Registers 65 and
 584:mpu6050.c     ****  * 66) to be written into the FIFO buffer.
 585:mpu6050.c     ****  * @return Current temperature FIFO enabled value
 586:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 587:mpu6050.c     ****  */
 588:mpu6050.c     **** bool MPU6050_getTempFIFOEnabled() {
 1575              		.loc 1 588 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 39


 1579 0000 80B5     		push	{r7, lr}
 1580              		.cfi_def_cfa_offset 8
 1581              		.cfi_offset 7, -8
 1582              		.cfi_offset 14, -4
 1583 0002 00AF     		add	r7, sp, #0
 1584              		.cfi_def_cfa_register 7
 589:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, buffer);
 1585              		.loc 1 589 0
 1586 0004 074B     		ldr	r3, .L124
 1587 0006 1878     		ldrb	r0, [r3]
 1588 0008 074B     		ldr	r3, .L124+4
 1589 000a 0722     		movs	r2, #7
 1590 000c 2321     		movs	r1, #35
 1591 000e FFF7FEFF 		bl	I2CReadBit
 590:mpu6050.c     ****     return buffer[0];
 1592              		.loc 1 590 0
 1593 0012 054B     		ldr	r3, .L124+4
 1594 0014 1B78     		ldrb	r3, [r3]
 1595 0016 5A1E     		subs	r2, r3, #1
 1596 0018 9341     		sbcs	r3, r3, r2
 1597 001a DBB2     		uxtb	r3, r3
 591:mpu6050.c     **** }
 1598              		.loc 1 591 0
 1599 001c 1800     		movs	r0, r3
 1600 001e BD46     		mov	sp, r7
 1601              		@ sp needed
 1602 0020 80BD     		pop	{r7, pc}
 1603              	.L125:
 1604 0022 C046     		.align	2
 1605              	.L124:
 1606 0024 00000000 		.word	devAddr
 1607 0028 00000000 		.word	buffer
 1608              		.cfi_endproc
 1609              	.LFE36:
 1610              		.size	MPU6050_getTempFIFOEnabled, .-MPU6050_getTempFIFOEnabled
 1611              		.section	.text.MPU6050_setTempFIFOEnabled,"ax",%progbits
 1612              		.align	2
 1613              		.global	MPU6050_setTempFIFOEnabled
 1614              		.code	16
 1615              		.thumb_func
 1616              		.type	MPU6050_setTempFIFOEnabled, %function
 1617              	MPU6050_setTempFIFOEnabled:
 1618              	.LFB37:
 592:mpu6050.c     **** /** Set temperature FIFO enabled value.
 593:mpu6050.c     ****  * @param enabled New temperature FIFO enabled value
 594:mpu6050.c     ****  * @see getTempFIFOEnabled()
 595:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 596:mpu6050.c     ****  */
 597:mpu6050.c     **** void MPU6050_setTempFIFOEnabled(bool enabled) {
 1619              		.loc 1 597 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 8
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623 0000 80B5     		push	{r7, lr}
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 40


 1627 0002 82B0     		sub	sp, sp, #8
 1628              		.cfi_def_cfa_offset 16
 1629 0004 00AF     		add	r7, sp, #0
 1630              		.cfi_def_cfa_register 7
 1631 0006 0200     		movs	r2, r0
 1632 0008 FB1D     		adds	r3, r7, #7
 1633 000a 1A70     		strb	r2, [r3]
 598:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, enabled);
 1634              		.loc 1 598 0
 1635 000c 054B     		ldr	r3, .L127
 1636 000e 1878     		ldrb	r0, [r3]
 1637 0010 FB1D     		adds	r3, r7, #7
 1638 0012 1B78     		ldrb	r3, [r3]
 1639 0014 0722     		movs	r2, #7
 1640 0016 2321     		movs	r1, #35
 1641 0018 FFF7FEFF 		bl	I2CWriteBit
 599:mpu6050.c     **** }
 1642              		.loc 1 599 0
 1643 001c C046     		nop
 1644 001e BD46     		mov	sp, r7
 1645 0020 02B0     		add	sp, sp, #8
 1646              		@ sp needed
 1647 0022 80BD     		pop	{r7, pc}
 1648              	.L128:
 1649              		.align	2
 1650              	.L127:
 1651 0024 00000000 		.word	devAddr
 1652              		.cfi_endproc
 1653              	.LFE37:
 1654              		.size	MPU6050_setTempFIFOEnabled, .-MPU6050_setTempFIFOEnabled
 1655              		.section	.text.MPU6050_getXGyroFIFOEnabled,"ax",%progbits
 1656              		.align	2
 1657              		.global	MPU6050_getXGyroFIFOEnabled
 1658              		.code	16
 1659              		.thumb_func
 1660              		.type	MPU6050_getXGyroFIFOEnabled, %function
 1661              	MPU6050_getXGyroFIFOEnabled:
 1662              	.LFB38:
 600:mpu6050.c     **** /** Get gyroscope X-axis FIFO enabled value.
 601:mpu6050.c     ****  * When set to 1, this bit enables GYRO_XOUT_H and GYRO_XOUT_L (Registers 67 and
 602:mpu6050.c     ****  * 68) to be written into the FIFO buffer.
 603:mpu6050.c     ****  * @return Current gyroscope X-axis FIFO enabled value
 604:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 605:mpu6050.c     ****  */
 606:mpu6050.c     **** bool MPU6050_getXGyroFIFOEnabled() {
 1663              		.loc 1 606 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 0
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667 0000 80B5     		push	{r7, lr}
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 7, -8
 1670              		.cfi_offset 14, -4
 1671 0002 00AF     		add	r7, sp, #0
 1672              		.cfi_def_cfa_register 7
 607:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, buffer);
 1673              		.loc 1 607 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 41


 1674 0004 074B     		ldr	r3, .L131
 1675 0006 1878     		ldrb	r0, [r3]
 1676 0008 074B     		ldr	r3, .L131+4
 1677 000a 0622     		movs	r2, #6
 1678 000c 2321     		movs	r1, #35
 1679 000e FFF7FEFF 		bl	I2CReadBit
 608:mpu6050.c     ****     return buffer[0];
 1680              		.loc 1 608 0
 1681 0012 054B     		ldr	r3, .L131+4
 1682 0014 1B78     		ldrb	r3, [r3]
 1683 0016 5A1E     		subs	r2, r3, #1
 1684 0018 9341     		sbcs	r3, r3, r2
 1685 001a DBB2     		uxtb	r3, r3
 609:mpu6050.c     **** }
 1686              		.loc 1 609 0
 1687 001c 1800     		movs	r0, r3
 1688 001e BD46     		mov	sp, r7
 1689              		@ sp needed
 1690 0020 80BD     		pop	{r7, pc}
 1691              	.L132:
 1692 0022 C046     		.align	2
 1693              	.L131:
 1694 0024 00000000 		.word	devAddr
 1695 0028 00000000 		.word	buffer
 1696              		.cfi_endproc
 1697              	.LFE38:
 1698              		.size	MPU6050_getXGyroFIFOEnabled, .-MPU6050_getXGyroFIFOEnabled
 1699              		.section	.text.MPU6050_setXGyroFIFOEnabled,"ax",%progbits
 1700              		.align	2
 1701              		.global	MPU6050_setXGyroFIFOEnabled
 1702              		.code	16
 1703              		.thumb_func
 1704              		.type	MPU6050_setXGyroFIFOEnabled, %function
 1705              	MPU6050_setXGyroFIFOEnabled:
 1706              	.LFB39:
 610:mpu6050.c     **** /** Set gyroscope X-axis FIFO enabled value.
 611:mpu6050.c     ****  * @param enabled New gyroscope X-axis FIFO enabled value
 612:mpu6050.c     ****  * @see getXGyroFIFOEnabled()
 613:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 614:mpu6050.c     ****  */
 615:mpu6050.c     **** void MPU6050_setXGyroFIFOEnabled(bool enabled) {
 1707              		.loc 1 615 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 8
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711 0000 80B5     		push	{r7, lr}
 1712              		.cfi_def_cfa_offset 8
 1713              		.cfi_offset 7, -8
 1714              		.cfi_offset 14, -4
 1715 0002 82B0     		sub	sp, sp, #8
 1716              		.cfi_def_cfa_offset 16
 1717 0004 00AF     		add	r7, sp, #0
 1718              		.cfi_def_cfa_register 7
 1719 0006 0200     		movs	r2, r0
 1720 0008 FB1D     		adds	r3, r7, #7
 1721 000a 1A70     		strb	r2, [r3]
 616:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 42


 1722              		.loc 1 616 0
 1723 000c 054B     		ldr	r3, .L134
 1724 000e 1878     		ldrb	r0, [r3]
 1725 0010 FB1D     		adds	r3, r7, #7
 1726 0012 1B78     		ldrb	r3, [r3]
 1727 0014 0622     		movs	r2, #6
 1728 0016 2321     		movs	r1, #35
 1729 0018 FFF7FEFF 		bl	I2CWriteBit
 617:mpu6050.c     **** }
 1730              		.loc 1 617 0
 1731 001c C046     		nop
 1732 001e BD46     		mov	sp, r7
 1733 0020 02B0     		add	sp, sp, #8
 1734              		@ sp needed
 1735 0022 80BD     		pop	{r7, pc}
 1736              	.L135:
 1737              		.align	2
 1738              	.L134:
 1739 0024 00000000 		.word	devAddr
 1740              		.cfi_endproc
 1741              	.LFE39:
 1742              		.size	MPU6050_setXGyroFIFOEnabled, .-MPU6050_setXGyroFIFOEnabled
 1743              		.section	.text.MPU6050_getYGyroFIFOEnabled,"ax",%progbits
 1744              		.align	2
 1745              		.global	MPU6050_getYGyroFIFOEnabled
 1746              		.code	16
 1747              		.thumb_func
 1748              		.type	MPU6050_getYGyroFIFOEnabled, %function
 1749              	MPU6050_getYGyroFIFOEnabled:
 1750              	.LFB40:
 618:mpu6050.c     **** /** Get gyroscope Y-axis FIFO enabled value.
 619:mpu6050.c     ****  * When set to 1, this bit enables GYRO_YOUT_H and GYRO_YOUT_L (Registers 69 and
 620:mpu6050.c     ****  * 70) to be written into the FIFO buffer.
 621:mpu6050.c     ****  * @return Current gyroscope Y-axis FIFO enabled value
 622:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 623:mpu6050.c     ****  */
 624:mpu6050.c     **** bool MPU6050_getYGyroFIFOEnabled() {
 1751              		.loc 1 624 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 1, uses_anonymous_args = 0
 1755 0000 80B5     		push	{r7, lr}
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 00AF     		add	r7, sp, #0
 1760              		.cfi_def_cfa_register 7
 625:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, buffer);
 1761              		.loc 1 625 0
 1762 0004 074B     		ldr	r3, .L138
 1763 0006 1878     		ldrb	r0, [r3]
 1764 0008 074B     		ldr	r3, .L138+4
 1765 000a 0522     		movs	r2, #5
 1766 000c 2321     		movs	r1, #35
 1767 000e FFF7FEFF 		bl	I2CReadBit
 626:mpu6050.c     ****     return buffer[0];
 1768              		.loc 1 626 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 43


 1769 0012 054B     		ldr	r3, .L138+4
 1770 0014 1B78     		ldrb	r3, [r3]
 1771 0016 5A1E     		subs	r2, r3, #1
 1772 0018 9341     		sbcs	r3, r3, r2
 1773 001a DBB2     		uxtb	r3, r3
 627:mpu6050.c     **** }
 1774              		.loc 1 627 0
 1775 001c 1800     		movs	r0, r3
 1776 001e BD46     		mov	sp, r7
 1777              		@ sp needed
 1778 0020 80BD     		pop	{r7, pc}
 1779              	.L139:
 1780 0022 C046     		.align	2
 1781              	.L138:
 1782 0024 00000000 		.word	devAddr
 1783 0028 00000000 		.word	buffer
 1784              		.cfi_endproc
 1785              	.LFE40:
 1786              		.size	MPU6050_getYGyroFIFOEnabled, .-MPU6050_getYGyroFIFOEnabled
 1787              		.section	.text.MPU6050_setYGyroFIFOEnabled,"ax",%progbits
 1788              		.align	2
 1789              		.global	MPU6050_setYGyroFIFOEnabled
 1790              		.code	16
 1791              		.thumb_func
 1792              		.type	MPU6050_setYGyroFIFOEnabled, %function
 1793              	MPU6050_setYGyroFIFOEnabled:
 1794              	.LFB41:
 628:mpu6050.c     **** /** Set gyroscope Y-axis FIFO enabled value.
 629:mpu6050.c     ****  * @param enabled New gyroscope Y-axis FIFO enabled value
 630:mpu6050.c     ****  * @see getYGyroFIFOEnabled()
 631:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 632:mpu6050.c     ****  */
 633:mpu6050.c     **** void MPU6050_setYGyroFIFOEnabled(bool enabled) {
 1795              		.loc 1 633 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 8
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0000 80B5     		push	{r7, lr}
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 7, -8
 1802              		.cfi_offset 14, -4
 1803 0002 82B0     		sub	sp, sp, #8
 1804              		.cfi_def_cfa_offset 16
 1805 0004 00AF     		add	r7, sp, #0
 1806              		.cfi_def_cfa_register 7
 1807 0006 0200     		movs	r2, r0
 1808 0008 FB1D     		adds	r3, r7, #7
 1809 000a 1A70     		strb	r2, [r3]
 634:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);
 1810              		.loc 1 634 0
 1811 000c 054B     		ldr	r3, .L141
 1812 000e 1878     		ldrb	r0, [r3]
 1813 0010 FB1D     		adds	r3, r7, #7
 1814 0012 1B78     		ldrb	r3, [r3]
 1815 0014 0522     		movs	r2, #5
 1816 0016 2321     		movs	r1, #35
 1817 0018 FFF7FEFF 		bl	I2CWriteBit
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 44


 635:mpu6050.c     **** }
 1818              		.loc 1 635 0
 1819 001c C046     		nop
 1820 001e BD46     		mov	sp, r7
 1821 0020 02B0     		add	sp, sp, #8
 1822              		@ sp needed
 1823 0022 80BD     		pop	{r7, pc}
 1824              	.L142:
 1825              		.align	2
 1826              	.L141:
 1827 0024 00000000 		.word	devAddr
 1828              		.cfi_endproc
 1829              	.LFE41:
 1830              		.size	MPU6050_setYGyroFIFOEnabled, .-MPU6050_setYGyroFIFOEnabled
 1831              		.section	.text.MPU6050_getZGyroFIFOEnabled,"ax",%progbits
 1832              		.align	2
 1833              		.global	MPU6050_getZGyroFIFOEnabled
 1834              		.code	16
 1835              		.thumb_func
 1836              		.type	MPU6050_getZGyroFIFOEnabled, %function
 1837              	MPU6050_getZGyroFIFOEnabled:
 1838              	.LFB42:
 636:mpu6050.c     **** /** Get gyroscope Z-axis FIFO enabled value.
 637:mpu6050.c     ****  * When set to 1, this bit enables GYRO_ZOUT_H and GYRO_ZOUT_L (Registers 71 and
 638:mpu6050.c     ****  * 72) to be written into the FIFO buffer.
 639:mpu6050.c     ****  * @return Current gyroscope Z-axis FIFO enabled value
 640:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 641:mpu6050.c     ****  */
 642:mpu6050.c     **** bool MPU6050_getZGyroFIFOEnabled() {
 1839              		.loc 1 642 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 1, uses_anonymous_args = 0
 1843 0000 80B5     		push	{r7, lr}
 1844              		.cfi_def_cfa_offset 8
 1845              		.cfi_offset 7, -8
 1846              		.cfi_offset 14, -4
 1847 0002 00AF     		add	r7, sp, #0
 1848              		.cfi_def_cfa_register 7
 643:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, buffer);
 1849              		.loc 1 643 0
 1850 0004 074B     		ldr	r3, .L145
 1851 0006 1878     		ldrb	r0, [r3]
 1852 0008 074B     		ldr	r3, .L145+4
 1853 000a 0422     		movs	r2, #4
 1854 000c 2321     		movs	r1, #35
 1855 000e FFF7FEFF 		bl	I2CReadBit
 644:mpu6050.c     ****     return buffer[0];
 1856              		.loc 1 644 0
 1857 0012 054B     		ldr	r3, .L145+4
 1858 0014 1B78     		ldrb	r3, [r3]
 1859 0016 5A1E     		subs	r2, r3, #1
 1860 0018 9341     		sbcs	r3, r3, r2
 1861 001a DBB2     		uxtb	r3, r3
 645:mpu6050.c     **** }
 1862              		.loc 1 645 0
 1863 001c 1800     		movs	r0, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 45


 1864 001e BD46     		mov	sp, r7
 1865              		@ sp needed
 1866 0020 80BD     		pop	{r7, pc}
 1867              	.L146:
 1868 0022 C046     		.align	2
 1869              	.L145:
 1870 0024 00000000 		.word	devAddr
 1871 0028 00000000 		.word	buffer
 1872              		.cfi_endproc
 1873              	.LFE42:
 1874              		.size	MPU6050_getZGyroFIFOEnabled, .-MPU6050_getZGyroFIFOEnabled
 1875              		.section	.text.MPU6050_setZGyroFIFOEnabled,"ax",%progbits
 1876              		.align	2
 1877              		.global	MPU6050_setZGyroFIFOEnabled
 1878              		.code	16
 1879              		.thumb_func
 1880              		.type	MPU6050_setZGyroFIFOEnabled, %function
 1881              	MPU6050_setZGyroFIFOEnabled:
 1882              	.LFB43:
 646:mpu6050.c     **** /** Set gyroscope Z-axis FIFO enabled value.
 647:mpu6050.c     ****  * @param enabled New gyroscope Z-axis FIFO enabled value
 648:mpu6050.c     ****  * @see getZGyroFIFOEnabled()
 649:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 650:mpu6050.c     ****  */
 651:mpu6050.c     **** void MPU6050_setZGyroFIFOEnabled(bool enabled) {
 1883              		.loc 1 651 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 8
 1886              		@ frame_needed = 1, uses_anonymous_args = 0
 1887 0000 80B5     		push	{r7, lr}
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 7, -8
 1890              		.cfi_offset 14, -4
 1891 0002 82B0     		sub	sp, sp, #8
 1892              		.cfi_def_cfa_offset 16
 1893 0004 00AF     		add	r7, sp, #0
 1894              		.cfi_def_cfa_register 7
 1895 0006 0200     		movs	r2, r0
 1896 0008 FB1D     		adds	r3, r7, #7
 1897 000a 1A70     		strb	r2, [r3]
 652:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);
 1898              		.loc 1 652 0
 1899 000c 054B     		ldr	r3, .L148
 1900 000e 1878     		ldrb	r0, [r3]
 1901 0010 FB1D     		adds	r3, r7, #7
 1902 0012 1B78     		ldrb	r3, [r3]
 1903 0014 0422     		movs	r2, #4
 1904 0016 2321     		movs	r1, #35
 1905 0018 FFF7FEFF 		bl	I2CWriteBit
 653:mpu6050.c     **** }
 1906              		.loc 1 653 0
 1907 001c C046     		nop
 1908 001e BD46     		mov	sp, r7
 1909 0020 02B0     		add	sp, sp, #8
 1910              		@ sp needed
 1911 0022 80BD     		pop	{r7, pc}
 1912              	.L149:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 46


 1913              		.align	2
 1914              	.L148:
 1915 0024 00000000 		.word	devAddr
 1916              		.cfi_endproc
 1917              	.LFE43:
 1918              		.size	MPU6050_setZGyroFIFOEnabled, .-MPU6050_setZGyroFIFOEnabled
 1919              		.section	.text.MPU6050_getAccelFIFOEnabled,"ax",%progbits
 1920              		.align	2
 1921              		.global	MPU6050_getAccelFIFOEnabled
 1922              		.code	16
 1923              		.thumb_func
 1924              		.type	MPU6050_getAccelFIFOEnabled, %function
 1925              	MPU6050_getAccelFIFOEnabled:
 1926              	.LFB44:
 654:mpu6050.c     **** /** Get accelerometer FIFO enabled value.
 655:mpu6050.c     ****  * When set to 1, this bit enables ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H,
 656:mpu6050.c     ****  * ACCEL_YOUT_L, ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64) to be
 657:mpu6050.c     ****  * written into the FIFO buffer.
 658:mpu6050.c     ****  * @return Current accelerometer FIFO enabled value
 659:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 660:mpu6050.c     ****  */
 661:mpu6050.c     **** bool MPU6050_getAccelFIFOEnabled() {
 1927              		.loc 1 661 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 1, uses_anonymous_args = 0
 1931 0000 80B5     		push	{r7, lr}
 1932              		.cfi_def_cfa_offset 8
 1933              		.cfi_offset 7, -8
 1934              		.cfi_offset 14, -4
 1935 0002 00AF     		add	r7, sp, #0
 1936              		.cfi_def_cfa_register 7
 662:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, buffer);
 1937              		.loc 1 662 0
 1938 0004 074B     		ldr	r3, .L152
 1939 0006 1878     		ldrb	r0, [r3]
 1940 0008 074B     		ldr	r3, .L152+4
 1941 000a 0322     		movs	r2, #3
 1942 000c 2321     		movs	r1, #35
 1943 000e FFF7FEFF 		bl	I2CReadBit
 663:mpu6050.c     ****     return buffer[0];
 1944              		.loc 1 663 0
 1945 0012 054B     		ldr	r3, .L152+4
 1946 0014 1B78     		ldrb	r3, [r3]
 1947 0016 5A1E     		subs	r2, r3, #1
 1948 0018 9341     		sbcs	r3, r3, r2
 1949 001a DBB2     		uxtb	r3, r3
 664:mpu6050.c     **** }
 1950              		.loc 1 664 0
 1951 001c 1800     		movs	r0, r3
 1952 001e BD46     		mov	sp, r7
 1953              		@ sp needed
 1954 0020 80BD     		pop	{r7, pc}
 1955              	.L153:
 1956 0022 C046     		.align	2
 1957              	.L152:
 1958 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 47


 1959 0028 00000000 		.word	buffer
 1960              		.cfi_endproc
 1961              	.LFE44:
 1962              		.size	MPU6050_getAccelFIFOEnabled, .-MPU6050_getAccelFIFOEnabled
 1963              		.section	.text.MPU6050_setAccelFIFOEnabled,"ax",%progbits
 1964              		.align	2
 1965              		.global	MPU6050_setAccelFIFOEnabled
 1966              		.code	16
 1967              		.thumb_func
 1968              		.type	MPU6050_setAccelFIFOEnabled, %function
 1969              	MPU6050_setAccelFIFOEnabled:
 1970              	.LFB45:
 665:mpu6050.c     **** /** Set accelerometer FIFO enabled value.
 666:mpu6050.c     ****  * @param enabled New accelerometer FIFO enabled value
 667:mpu6050.c     ****  * @see getAccelFIFOEnabled()
 668:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 669:mpu6050.c     ****  */
 670:mpu6050.c     **** void MPU6050_setAccelFIFOEnabled(bool enabled) {
 1971              		.loc 1 670 0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 8
 1974              		@ frame_needed = 1, uses_anonymous_args = 0
 1975 0000 80B5     		push	{r7, lr}
 1976              		.cfi_def_cfa_offset 8
 1977              		.cfi_offset 7, -8
 1978              		.cfi_offset 14, -4
 1979 0002 82B0     		sub	sp, sp, #8
 1980              		.cfi_def_cfa_offset 16
 1981 0004 00AF     		add	r7, sp, #0
 1982              		.cfi_def_cfa_register 7
 1983 0006 0200     		movs	r2, r0
 1984 0008 FB1D     		adds	r3, r7, #7
 1985 000a 1A70     		strb	r2, [r3]
 671:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);
 1986              		.loc 1 671 0
 1987 000c 054B     		ldr	r3, .L155
 1988 000e 1878     		ldrb	r0, [r3]
 1989 0010 FB1D     		adds	r3, r7, #7
 1990 0012 1B78     		ldrb	r3, [r3]
 1991 0014 0322     		movs	r2, #3
 1992 0016 2321     		movs	r1, #35
 1993 0018 FFF7FEFF 		bl	I2CWriteBit
 672:mpu6050.c     **** }
 1994              		.loc 1 672 0
 1995 001c C046     		nop
 1996 001e BD46     		mov	sp, r7
 1997 0020 02B0     		add	sp, sp, #8
 1998              		@ sp needed
 1999 0022 80BD     		pop	{r7, pc}
 2000              	.L156:
 2001              		.align	2
 2002              	.L155:
 2003 0024 00000000 		.word	devAddr
 2004              		.cfi_endproc
 2005              	.LFE45:
 2006              		.size	MPU6050_setAccelFIFOEnabled, .-MPU6050_setAccelFIFOEnabled
 2007              		.section	.text.MPU6050_getSlave2FIFOEnabled,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 48


 2008              		.align	2
 2009              		.global	MPU6050_getSlave2FIFOEnabled
 2010              		.code	16
 2011              		.thumb_func
 2012              		.type	MPU6050_getSlave2FIFOEnabled, %function
 2013              	MPU6050_getSlave2FIFOEnabled:
 2014              	.LFB46:
 673:mpu6050.c     **** /** Get Slave 2 FIFO enabled value.
 674:mpu6050.c     ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 675:mpu6050.c     ****  * associated with Slave 2 to be written into the FIFO buffer.
 676:mpu6050.c     ****  * @return Current Slave 2 FIFO enabled value
 677:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 678:mpu6050.c     ****  */
 679:mpu6050.c     **** bool MPU6050_getSlave2FIFOEnabled() {
 2015              		.loc 1 679 0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 1, uses_anonymous_args = 0
 2019 0000 80B5     		push	{r7, lr}
 2020              		.cfi_def_cfa_offset 8
 2021              		.cfi_offset 7, -8
 2022              		.cfi_offset 14, -4
 2023 0002 00AF     		add	r7, sp, #0
 2024              		.cfi_def_cfa_register 7
 680:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, buffer);
 2025              		.loc 1 680 0
 2026 0004 074B     		ldr	r3, .L159
 2027 0006 1878     		ldrb	r0, [r3]
 2028 0008 074B     		ldr	r3, .L159+4
 2029 000a 0222     		movs	r2, #2
 2030 000c 2321     		movs	r1, #35
 2031 000e FFF7FEFF 		bl	I2CReadBit
 681:mpu6050.c     ****     return buffer[0];
 2032              		.loc 1 681 0
 2033 0012 054B     		ldr	r3, .L159+4
 2034 0014 1B78     		ldrb	r3, [r3]
 2035 0016 5A1E     		subs	r2, r3, #1
 2036 0018 9341     		sbcs	r3, r3, r2
 2037 001a DBB2     		uxtb	r3, r3
 682:mpu6050.c     **** }
 2038              		.loc 1 682 0
 2039 001c 1800     		movs	r0, r3
 2040 001e BD46     		mov	sp, r7
 2041              		@ sp needed
 2042 0020 80BD     		pop	{r7, pc}
 2043              	.L160:
 2044 0022 C046     		.align	2
 2045              	.L159:
 2046 0024 00000000 		.word	devAddr
 2047 0028 00000000 		.word	buffer
 2048              		.cfi_endproc
 2049              	.LFE46:
 2050              		.size	MPU6050_getSlave2FIFOEnabled, .-MPU6050_getSlave2FIFOEnabled
 2051              		.section	.text.MPU6050_setSlave2FIFOEnabled,"ax",%progbits
 2052              		.align	2
 2053              		.global	MPU6050_setSlave2FIFOEnabled
 2054              		.code	16
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 49


 2055              		.thumb_func
 2056              		.type	MPU6050_setSlave2FIFOEnabled, %function
 2057              	MPU6050_setSlave2FIFOEnabled:
 2058              	.LFB47:
 683:mpu6050.c     **** /** Set Slave 2 FIFO enabled value.
 684:mpu6050.c     ****  * @param enabled New Slave 2 FIFO enabled value
 685:mpu6050.c     ****  * @see getSlave2FIFOEnabled()
 686:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 687:mpu6050.c     ****  */
 688:mpu6050.c     **** void MPU6050_setSlave2FIFOEnabled(bool enabled) {
 2059              		.loc 1 688 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0000 80B5     		push	{r7, lr}
 2064              		.cfi_def_cfa_offset 8
 2065              		.cfi_offset 7, -8
 2066              		.cfi_offset 14, -4
 2067 0002 82B0     		sub	sp, sp, #8
 2068              		.cfi_def_cfa_offset 16
 2069 0004 00AF     		add	r7, sp, #0
 2070              		.cfi_def_cfa_register 7
 2071 0006 0200     		movs	r2, r0
 2072 0008 FB1D     		adds	r3, r7, #7
 2073 000a 1A70     		strb	r2, [r3]
 689:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, enabled);
 2074              		.loc 1 689 0
 2075 000c 054B     		ldr	r3, .L162
 2076 000e 1878     		ldrb	r0, [r3]
 2077 0010 FB1D     		adds	r3, r7, #7
 2078 0012 1B78     		ldrb	r3, [r3]
 2079 0014 0222     		movs	r2, #2
 2080 0016 2321     		movs	r1, #35
 2081 0018 FFF7FEFF 		bl	I2CWriteBit
 690:mpu6050.c     **** }
 2082              		.loc 1 690 0
 2083 001c C046     		nop
 2084 001e BD46     		mov	sp, r7
 2085 0020 02B0     		add	sp, sp, #8
 2086              		@ sp needed
 2087 0022 80BD     		pop	{r7, pc}
 2088              	.L163:
 2089              		.align	2
 2090              	.L162:
 2091 0024 00000000 		.word	devAddr
 2092              		.cfi_endproc
 2093              	.LFE47:
 2094              		.size	MPU6050_setSlave2FIFOEnabled, .-MPU6050_setSlave2FIFOEnabled
 2095              		.section	.text.MPU6050_getSlave1FIFOEnabled,"ax",%progbits
 2096              		.align	2
 2097              		.global	MPU6050_getSlave1FIFOEnabled
 2098              		.code	16
 2099              		.thumb_func
 2100              		.type	MPU6050_getSlave1FIFOEnabled, %function
 2101              	MPU6050_getSlave1FIFOEnabled:
 2102              	.LFB48:
 691:mpu6050.c     **** /** Get Slave 1 FIFO enabled value.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 50


 692:mpu6050.c     ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 693:mpu6050.c     ****  * associated with Slave 1 to be written into the FIFO buffer.
 694:mpu6050.c     ****  * @return Current Slave 1 FIFO enabled value
 695:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 696:mpu6050.c     ****  */
 697:mpu6050.c     **** bool MPU6050_getSlave1FIFOEnabled() {
 2103              		.loc 1 697 0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 1, uses_anonymous_args = 0
 2107 0000 80B5     		push	{r7, lr}
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 7, -8
 2110              		.cfi_offset 14, -4
 2111 0002 00AF     		add	r7, sp, #0
 2112              		.cfi_def_cfa_register 7
 698:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, buffer);
 2113              		.loc 1 698 0
 2114 0004 074B     		ldr	r3, .L166
 2115 0006 1878     		ldrb	r0, [r3]
 2116 0008 074B     		ldr	r3, .L166+4
 2117 000a 0122     		movs	r2, #1
 2118 000c 2321     		movs	r1, #35
 2119 000e FFF7FEFF 		bl	I2CReadBit
 699:mpu6050.c     ****     return buffer[0];
 2120              		.loc 1 699 0
 2121 0012 054B     		ldr	r3, .L166+4
 2122 0014 1B78     		ldrb	r3, [r3]
 2123 0016 5A1E     		subs	r2, r3, #1
 2124 0018 9341     		sbcs	r3, r3, r2
 2125 001a DBB2     		uxtb	r3, r3
 700:mpu6050.c     **** }
 2126              		.loc 1 700 0
 2127 001c 1800     		movs	r0, r3
 2128 001e BD46     		mov	sp, r7
 2129              		@ sp needed
 2130 0020 80BD     		pop	{r7, pc}
 2131              	.L167:
 2132 0022 C046     		.align	2
 2133              	.L166:
 2134 0024 00000000 		.word	devAddr
 2135 0028 00000000 		.word	buffer
 2136              		.cfi_endproc
 2137              	.LFE48:
 2138              		.size	MPU6050_getSlave1FIFOEnabled, .-MPU6050_getSlave1FIFOEnabled
 2139              		.section	.text.MPU6050_setSlave1FIFOEnabled,"ax",%progbits
 2140              		.align	2
 2141              		.global	MPU6050_setSlave1FIFOEnabled
 2142              		.code	16
 2143              		.thumb_func
 2144              		.type	MPU6050_setSlave1FIFOEnabled, %function
 2145              	MPU6050_setSlave1FIFOEnabled:
 2146              	.LFB49:
 701:mpu6050.c     **** /** Set Slave 1 FIFO enabled value.
 702:mpu6050.c     ****  * @param enabled New Slave 1 FIFO enabled value
 703:mpu6050.c     ****  * @see getSlave1FIFOEnabled()
 704:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 51


 705:mpu6050.c     ****  */
 706:mpu6050.c     **** void MPU6050_setSlave1FIFOEnabled(bool enabled) {
 2147              		.loc 1 706 0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 8
 2150              		@ frame_needed = 1, uses_anonymous_args = 0
 2151 0000 80B5     		push	{r7, lr}
 2152              		.cfi_def_cfa_offset 8
 2153              		.cfi_offset 7, -8
 2154              		.cfi_offset 14, -4
 2155 0002 82B0     		sub	sp, sp, #8
 2156              		.cfi_def_cfa_offset 16
 2157 0004 00AF     		add	r7, sp, #0
 2158              		.cfi_def_cfa_register 7
 2159 0006 0200     		movs	r2, r0
 2160 0008 FB1D     		adds	r3, r7, #7
 2161 000a 1A70     		strb	r2, [r3]
 707:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, enabled);
 2162              		.loc 1 707 0
 2163 000c 054B     		ldr	r3, .L169
 2164 000e 1878     		ldrb	r0, [r3]
 2165 0010 FB1D     		adds	r3, r7, #7
 2166 0012 1B78     		ldrb	r3, [r3]
 2167 0014 0122     		movs	r2, #1
 2168 0016 2321     		movs	r1, #35
 2169 0018 FFF7FEFF 		bl	I2CWriteBit
 708:mpu6050.c     **** }
 2170              		.loc 1 708 0
 2171 001c C046     		nop
 2172 001e BD46     		mov	sp, r7
 2173 0020 02B0     		add	sp, sp, #8
 2174              		@ sp needed
 2175 0022 80BD     		pop	{r7, pc}
 2176              	.L170:
 2177              		.align	2
 2178              	.L169:
 2179 0024 00000000 		.word	devAddr
 2180              		.cfi_endproc
 2181              	.LFE49:
 2182              		.size	MPU6050_setSlave1FIFOEnabled, .-MPU6050_setSlave1FIFOEnabled
 2183              		.section	.text.MPU6050_getSlave0FIFOEnabled,"ax",%progbits
 2184              		.align	2
 2185              		.global	MPU6050_getSlave0FIFOEnabled
 2186              		.code	16
 2187              		.thumb_func
 2188              		.type	MPU6050_getSlave0FIFOEnabled, %function
 2189              	MPU6050_getSlave0FIFOEnabled:
 2190              	.LFB50:
 709:mpu6050.c     **** /** Get Slave 0 FIFO enabled value.
 710:mpu6050.c     ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 711:mpu6050.c     ****  * associated with Slave 0 to be written into the FIFO buffer.
 712:mpu6050.c     ****  * @return Current Slave 0 FIFO enabled value
 713:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 714:mpu6050.c     ****  */
 715:mpu6050.c     **** bool MPU6050_getSlave0FIFOEnabled() {
 2191              		.loc 1 715 0
 2192              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 52


 2193              		@ args = 0, pretend = 0, frame = 0
 2194              		@ frame_needed = 1, uses_anonymous_args = 0
 2195 0000 80B5     		push	{r7, lr}
 2196              		.cfi_def_cfa_offset 8
 2197              		.cfi_offset 7, -8
 2198              		.cfi_offset 14, -4
 2199 0002 00AF     		add	r7, sp, #0
 2200              		.cfi_def_cfa_register 7
 716:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, buffer);
 2201              		.loc 1 716 0
 2202 0004 074B     		ldr	r3, .L173
 2203 0006 1878     		ldrb	r0, [r3]
 2204 0008 074B     		ldr	r3, .L173+4
 2205 000a 0022     		movs	r2, #0
 2206 000c 2321     		movs	r1, #35
 2207 000e FFF7FEFF 		bl	I2CReadBit
 717:mpu6050.c     ****     return buffer[0];
 2208              		.loc 1 717 0
 2209 0012 054B     		ldr	r3, .L173+4
 2210 0014 1B78     		ldrb	r3, [r3]
 2211 0016 5A1E     		subs	r2, r3, #1
 2212 0018 9341     		sbcs	r3, r3, r2
 2213 001a DBB2     		uxtb	r3, r3
 718:mpu6050.c     **** }
 2214              		.loc 1 718 0
 2215 001c 1800     		movs	r0, r3
 2216 001e BD46     		mov	sp, r7
 2217              		@ sp needed
 2218 0020 80BD     		pop	{r7, pc}
 2219              	.L174:
 2220 0022 C046     		.align	2
 2221              	.L173:
 2222 0024 00000000 		.word	devAddr
 2223 0028 00000000 		.word	buffer
 2224              		.cfi_endproc
 2225              	.LFE50:
 2226              		.size	MPU6050_getSlave0FIFOEnabled, .-MPU6050_getSlave0FIFOEnabled
 2227              		.section	.text.MPU6050_setSlave0FIFOEnabled,"ax",%progbits
 2228              		.align	2
 2229              		.global	MPU6050_setSlave0FIFOEnabled
 2230              		.code	16
 2231              		.thumb_func
 2232              		.type	MPU6050_setSlave0FIFOEnabled, %function
 2233              	MPU6050_setSlave0FIFOEnabled:
 2234              	.LFB51:
 719:mpu6050.c     **** /** Set Slave 0 FIFO enabled value.
 720:mpu6050.c     ****  * @param enabled New Slave 0 FIFO enabled value
 721:mpu6050.c     ****  * @see getSlave0FIFOEnabled()
 722:mpu6050.c     ****  * @see MPU6050_RA_FIFO_EN
 723:mpu6050.c     ****  */
 724:mpu6050.c     **** void MPU6050_setSlave0FIFOEnabled(bool enabled) {
 2235              		.loc 1 724 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239 0000 80B5     		push	{r7, lr}
 2240              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 53


 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 82B0     		sub	sp, sp, #8
 2244              		.cfi_def_cfa_offset 16
 2245 0004 00AF     		add	r7, sp, #0
 2246              		.cfi_def_cfa_register 7
 2247 0006 0200     		movs	r2, r0
 2248 0008 FB1D     		adds	r3, r7, #7
 2249 000a 1A70     		strb	r2, [r3]
 725:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, enabled);
 2250              		.loc 1 725 0
 2251 000c 054B     		ldr	r3, .L176
 2252 000e 1878     		ldrb	r0, [r3]
 2253 0010 FB1D     		adds	r3, r7, #7
 2254 0012 1B78     		ldrb	r3, [r3]
 2255 0014 0022     		movs	r2, #0
 2256 0016 2321     		movs	r1, #35
 2257 0018 FFF7FEFF 		bl	I2CWriteBit
 726:mpu6050.c     **** }
 2258              		.loc 1 726 0
 2259 001c C046     		nop
 2260 001e BD46     		mov	sp, r7
 2261 0020 02B0     		add	sp, sp, #8
 2262              		@ sp needed
 2263 0022 80BD     		pop	{r7, pc}
 2264              	.L177:
 2265              		.align	2
 2266              	.L176:
 2267 0024 00000000 		.word	devAddr
 2268              		.cfi_endproc
 2269              	.LFE51:
 2270              		.size	MPU6050_setSlave0FIFOEnabled, .-MPU6050_setSlave0FIFOEnabled
 2271              		.section	.text.MPU6050_getMultiMasterEnabled,"ax",%progbits
 2272              		.align	2
 2273              		.global	MPU6050_getMultiMasterEnabled
 2274              		.code	16
 2275              		.thumb_func
 2276              		.type	MPU6050_getMultiMasterEnabled, %function
 2277              	MPU6050_getMultiMasterEnabled:
 2278              	.LFB52:
 727:mpu6050.c     **** 
 728:mpu6050.c     **** // I2C_MST_CTRL register
 729:mpu6050.c     **** 
 730:mpu6050.c     **** /** Get multi-master enabled value.
 731:mpu6050.c     ****  * Multi-master capability allows multiple I2C masters to operate on the same
 732:mpu6050.c     ****  * bus. In circuits where multi-master capability is required, set MULT_MST_EN
 733:mpu6050.c     ****  * to 1. This will increase current drawn by approximately 30uA.
 734:mpu6050.c     ****  *
 735:mpu6050.c     ****  * In circuits where multi-master capability is required, the state of the I2C
 736:mpu6050.c     ****  * bus must always be monitored by each separate I2C Master. Before an I2C
 737:mpu6050.c     ****  * Master can assume arbitration of the bus, it must first confirm that no other
 738:mpu6050.c     ****  * I2C Master has arbitration of the bus. When MULT_MST_EN is set to 1, the
 739:mpu6050.c     ****  * MPU-60X0's bus arbitration detection logic is turned on, enabling it to
 740:mpu6050.c     ****  * detect when the bus is available.
 741:mpu6050.c     ****  *
 742:mpu6050.c     ****  * @return Current multi-master enabled value
 743:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 54


 744:mpu6050.c     ****  */
 745:mpu6050.c     **** bool MPU6050_getMultiMasterEnabled() {
 2279              		.loc 1 745 0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 1, uses_anonymous_args = 0
 2283 0000 80B5     		push	{r7, lr}
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 00AF     		add	r7, sp, #0
 2288              		.cfi_def_cfa_register 7
 746:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, buffer);
 2289              		.loc 1 746 0
 2290 0004 074B     		ldr	r3, .L180
 2291 0006 1878     		ldrb	r0, [r3]
 2292 0008 074B     		ldr	r3, .L180+4
 2293 000a 0722     		movs	r2, #7
 2294 000c 2421     		movs	r1, #36
 2295 000e FFF7FEFF 		bl	I2CReadBit
 747:mpu6050.c     ****     return buffer[0];
 2296              		.loc 1 747 0
 2297 0012 054B     		ldr	r3, .L180+4
 2298 0014 1B78     		ldrb	r3, [r3]
 2299 0016 5A1E     		subs	r2, r3, #1
 2300 0018 9341     		sbcs	r3, r3, r2
 2301 001a DBB2     		uxtb	r3, r3
 748:mpu6050.c     **** }
 2302              		.loc 1 748 0
 2303 001c 1800     		movs	r0, r3
 2304 001e BD46     		mov	sp, r7
 2305              		@ sp needed
 2306 0020 80BD     		pop	{r7, pc}
 2307              	.L181:
 2308 0022 C046     		.align	2
 2309              	.L180:
 2310 0024 00000000 		.word	devAddr
 2311 0028 00000000 		.word	buffer
 2312              		.cfi_endproc
 2313              	.LFE52:
 2314              		.size	MPU6050_getMultiMasterEnabled, .-MPU6050_getMultiMasterEnabled
 2315              		.section	.text.MPU6050_setMultiMasterEnabled,"ax",%progbits
 2316              		.align	2
 2317              		.global	MPU6050_setMultiMasterEnabled
 2318              		.code	16
 2319              		.thumb_func
 2320              		.type	MPU6050_setMultiMasterEnabled, %function
 2321              	MPU6050_setMultiMasterEnabled:
 2322              	.LFB53:
 749:mpu6050.c     **** /** Set multi-master enabled value.
 750:mpu6050.c     ****  * @param enabled New multi-master enabled value
 751:mpu6050.c     ****  * @see getMultiMasterEnabled()
 752:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 753:mpu6050.c     ****  */
 754:mpu6050.c     **** void MPU6050_setMultiMasterEnabled(bool enabled) {
 2323              		.loc 1 754 0
 2324              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 55


 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 1, uses_anonymous_args = 0
 2327 0000 80B5     		push	{r7, lr}
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 7, -8
 2330              		.cfi_offset 14, -4
 2331 0002 82B0     		sub	sp, sp, #8
 2332              		.cfi_def_cfa_offset 16
 2333 0004 00AF     		add	r7, sp, #0
 2334              		.cfi_def_cfa_register 7
 2335 0006 0200     		movs	r2, r0
 2336 0008 FB1D     		adds	r3, r7, #7
 2337 000a 1A70     		strb	r2, [r3]
 755:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, enabled);
 2338              		.loc 1 755 0
 2339 000c 054B     		ldr	r3, .L183
 2340 000e 1878     		ldrb	r0, [r3]
 2341 0010 FB1D     		adds	r3, r7, #7
 2342 0012 1B78     		ldrb	r3, [r3]
 2343 0014 0722     		movs	r2, #7
 2344 0016 2421     		movs	r1, #36
 2345 0018 FFF7FEFF 		bl	I2CWriteBit
 756:mpu6050.c     **** }
 2346              		.loc 1 756 0
 2347 001c C046     		nop
 2348 001e BD46     		mov	sp, r7
 2349 0020 02B0     		add	sp, sp, #8
 2350              		@ sp needed
 2351 0022 80BD     		pop	{r7, pc}
 2352              	.L184:
 2353              		.align	2
 2354              	.L183:
 2355 0024 00000000 		.word	devAddr
 2356              		.cfi_endproc
 2357              	.LFE53:
 2358              		.size	MPU6050_setMultiMasterEnabled, .-MPU6050_setMultiMasterEnabled
 2359              		.section	.text.MPU6050_getWaitForExternalSensorEnabled,"ax",%progbits
 2360              		.align	2
 2361              		.global	MPU6050_getWaitForExternalSensorEnabled
 2362              		.code	16
 2363              		.thumb_func
 2364              		.type	MPU6050_getWaitForExternalSensorEnabled, %function
 2365              	MPU6050_getWaitForExternalSensorEnabled:
 2366              	.LFB54:
 757:mpu6050.c     **** /** Get wait-for-external-sensor-data enabled value.
 758:mpu6050.c     ****  * When the WAIT_FOR_ES bit is set to 1, the Data Ready interrupt will be
 759:mpu6050.c     ****  * delayed until External Sensor data from the Slave Devices are loaded into the
 760:mpu6050.c     ****  * EXT_SENS_DATA registers. This is used to ensure that both the internal sensor
 761:mpu6050.c     ****  * data (i.e. from gyro and accel) and external sensor data have been loaded to
 762:mpu6050.c     ****  * their respective data registers (i.e. the data is synced) when the Data Ready
 763:mpu6050.c     ****  * interrupt is triggered.
 764:mpu6050.c     ****  *
 765:mpu6050.c     ****  * @return Current wait-for-external-sensor-data enabled value
 766:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 767:mpu6050.c     ****  */
 768:mpu6050.c     **** bool MPU6050_getWaitForExternalSensorEnabled() {
 2367              		.loc 1 768 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 56


 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371 0000 80B5     		push	{r7, lr}
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0002 00AF     		add	r7, sp, #0
 2376              		.cfi_def_cfa_register 7
 769:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, buffer);
 2377              		.loc 1 769 0
 2378 0004 074B     		ldr	r3, .L187
 2379 0006 1878     		ldrb	r0, [r3]
 2380 0008 074B     		ldr	r3, .L187+4
 2381 000a 0622     		movs	r2, #6
 2382 000c 2421     		movs	r1, #36
 2383 000e FFF7FEFF 		bl	I2CReadBit
 770:mpu6050.c     ****     return buffer[0];
 2384              		.loc 1 770 0
 2385 0012 054B     		ldr	r3, .L187+4
 2386 0014 1B78     		ldrb	r3, [r3]
 2387 0016 5A1E     		subs	r2, r3, #1
 2388 0018 9341     		sbcs	r3, r3, r2
 2389 001a DBB2     		uxtb	r3, r3
 771:mpu6050.c     **** }
 2390              		.loc 1 771 0
 2391 001c 1800     		movs	r0, r3
 2392 001e BD46     		mov	sp, r7
 2393              		@ sp needed
 2394 0020 80BD     		pop	{r7, pc}
 2395              	.L188:
 2396 0022 C046     		.align	2
 2397              	.L187:
 2398 0024 00000000 		.word	devAddr
 2399 0028 00000000 		.word	buffer
 2400              		.cfi_endproc
 2401              	.LFE54:
 2402              		.size	MPU6050_getWaitForExternalSensorEnabled, .-MPU6050_getWaitForExternalSensorEnabled
 2403              		.section	.text.MPU6050_setWaitForExternalSensorEnabled,"ax",%progbits
 2404              		.align	2
 2405              		.global	MPU6050_setWaitForExternalSensorEnabled
 2406              		.code	16
 2407              		.thumb_func
 2408              		.type	MPU6050_setWaitForExternalSensorEnabled, %function
 2409              	MPU6050_setWaitForExternalSensorEnabled:
 2410              	.LFB55:
 772:mpu6050.c     **** /** Set wait-for-external-sensor-data enabled value.
 773:mpu6050.c     ****  * @param enabled New wait-for-external-sensor-data enabled value
 774:mpu6050.c     ****  * @see getWaitForExternalSensorEnabled()
 775:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 776:mpu6050.c     ****  */
 777:mpu6050.c     **** void MPU6050_setWaitForExternalSensorEnabled(bool enabled) {
 2411              		.loc 1 777 0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 8
 2414              		@ frame_needed = 1, uses_anonymous_args = 0
 2415 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 57


 2416              		.cfi_def_cfa_offset 8
 2417              		.cfi_offset 7, -8
 2418              		.cfi_offset 14, -4
 2419 0002 82B0     		sub	sp, sp, #8
 2420              		.cfi_def_cfa_offset 16
 2421 0004 00AF     		add	r7, sp, #0
 2422              		.cfi_def_cfa_register 7
 2423 0006 0200     		movs	r2, r0
 2424 0008 FB1D     		adds	r3, r7, #7
 2425 000a 1A70     		strb	r2, [r3]
 778:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, enabled);
 2426              		.loc 1 778 0
 2427 000c 054B     		ldr	r3, .L190
 2428 000e 1878     		ldrb	r0, [r3]
 2429 0010 FB1D     		adds	r3, r7, #7
 2430 0012 1B78     		ldrb	r3, [r3]
 2431 0014 0622     		movs	r2, #6
 2432 0016 2421     		movs	r1, #36
 2433 0018 FFF7FEFF 		bl	I2CWriteBit
 779:mpu6050.c     **** }
 2434              		.loc 1 779 0
 2435 001c C046     		nop
 2436 001e BD46     		mov	sp, r7
 2437 0020 02B0     		add	sp, sp, #8
 2438              		@ sp needed
 2439 0022 80BD     		pop	{r7, pc}
 2440              	.L191:
 2441              		.align	2
 2442              	.L190:
 2443 0024 00000000 		.word	devAddr
 2444              		.cfi_endproc
 2445              	.LFE55:
 2446              		.size	MPU6050_setWaitForExternalSensorEnabled, .-MPU6050_setWaitForExternalSensorEnabled
 2447              		.section	.text.MPU6050_getSlave3FIFOEnabled,"ax",%progbits
 2448              		.align	2
 2449              		.global	MPU6050_getSlave3FIFOEnabled
 2450              		.code	16
 2451              		.thumb_func
 2452              		.type	MPU6050_getSlave3FIFOEnabled, %function
 2453              	MPU6050_getSlave3FIFOEnabled:
 2454              	.LFB56:
 780:mpu6050.c     **** /** Get Slave 3 FIFO enabled value.
 781:mpu6050.c     ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 782:mpu6050.c     ****  * associated with Slave 3 to be written into the FIFO buffer.
 783:mpu6050.c     ****  * @return Current Slave 3 FIFO enabled value
 784:mpu6050.c     ****  * @see MPU6050_RA_MST_CTRL
 785:mpu6050.c     ****  */
 786:mpu6050.c     **** bool MPU6050_getSlave3FIFOEnabled() {
 2455              		.loc 1 786 0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 1, uses_anonymous_args = 0
 2459 0000 80B5     		push	{r7, lr}
 2460              		.cfi_def_cfa_offset 8
 2461              		.cfi_offset 7, -8
 2462              		.cfi_offset 14, -4
 2463 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 58


 2464              		.cfi_def_cfa_register 7
 787:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, buffer);
 2465              		.loc 1 787 0
 2466 0004 074B     		ldr	r3, .L194
 2467 0006 1878     		ldrb	r0, [r3]
 2468 0008 074B     		ldr	r3, .L194+4
 2469 000a 0522     		movs	r2, #5
 2470 000c 2421     		movs	r1, #36
 2471 000e FFF7FEFF 		bl	I2CReadBit
 788:mpu6050.c     ****     return buffer[0];
 2472              		.loc 1 788 0
 2473 0012 054B     		ldr	r3, .L194+4
 2474 0014 1B78     		ldrb	r3, [r3]
 2475 0016 5A1E     		subs	r2, r3, #1
 2476 0018 9341     		sbcs	r3, r3, r2
 2477 001a DBB2     		uxtb	r3, r3
 789:mpu6050.c     **** }
 2478              		.loc 1 789 0
 2479 001c 1800     		movs	r0, r3
 2480 001e BD46     		mov	sp, r7
 2481              		@ sp needed
 2482 0020 80BD     		pop	{r7, pc}
 2483              	.L195:
 2484 0022 C046     		.align	2
 2485              	.L194:
 2486 0024 00000000 		.word	devAddr
 2487 0028 00000000 		.word	buffer
 2488              		.cfi_endproc
 2489              	.LFE56:
 2490              		.size	MPU6050_getSlave3FIFOEnabled, .-MPU6050_getSlave3FIFOEnabled
 2491              		.section	.text.MPU6050_setSlave3FIFOEnabled,"ax",%progbits
 2492              		.align	2
 2493              		.global	MPU6050_setSlave3FIFOEnabled
 2494              		.code	16
 2495              		.thumb_func
 2496              		.type	MPU6050_setSlave3FIFOEnabled, %function
 2497              	MPU6050_setSlave3FIFOEnabled:
 2498              	.LFB57:
 790:mpu6050.c     **** /** Set Slave 3 FIFO enabled value.
 791:mpu6050.c     ****  * @param enabled New Slave 3 FIFO enabled value
 792:mpu6050.c     ****  * @see getSlave3FIFOEnabled()
 793:mpu6050.c     ****  * @see MPU6050_RA_MST_CTRL
 794:mpu6050.c     ****  */
 795:mpu6050.c     **** void MPU6050_setSlave3FIFOEnabled(bool enabled) {
 2499              		.loc 1 795 0
 2500              		.cfi_startproc
 2501              		@ args = 0, pretend = 0, frame = 8
 2502              		@ frame_needed = 1, uses_anonymous_args = 0
 2503 0000 80B5     		push	{r7, lr}
 2504              		.cfi_def_cfa_offset 8
 2505              		.cfi_offset 7, -8
 2506              		.cfi_offset 14, -4
 2507 0002 82B0     		sub	sp, sp, #8
 2508              		.cfi_def_cfa_offset 16
 2509 0004 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
 2511 0006 0200     		movs	r2, r0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 59


 2512 0008 FB1D     		adds	r3, r7, #7
 2513 000a 1A70     		strb	r2, [r3]
 796:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, enabled);
 2514              		.loc 1 796 0
 2515 000c 054B     		ldr	r3, .L197
 2516 000e 1878     		ldrb	r0, [r3]
 2517 0010 FB1D     		adds	r3, r7, #7
 2518 0012 1B78     		ldrb	r3, [r3]
 2519 0014 0522     		movs	r2, #5
 2520 0016 2421     		movs	r1, #36
 2521 0018 FFF7FEFF 		bl	I2CWriteBit
 797:mpu6050.c     **** }
 2522              		.loc 1 797 0
 2523 001c C046     		nop
 2524 001e BD46     		mov	sp, r7
 2525 0020 02B0     		add	sp, sp, #8
 2526              		@ sp needed
 2527 0022 80BD     		pop	{r7, pc}
 2528              	.L198:
 2529              		.align	2
 2530              	.L197:
 2531 0024 00000000 		.word	devAddr
 2532              		.cfi_endproc
 2533              	.LFE57:
 2534              		.size	MPU6050_setSlave3FIFOEnabled, .-MPU6050_setSlave3FIFOEnabled
 2535              		.section	.text.MPU6050_getSlaveReadWriteTransitionEnabled,"ax",%progbits
 2536              		.align	2
 2537              		.global	MPU6050_getSlaveReadWriteTransitionEnabled
 2538              		.code	16
 2539              		.thumb_func
 2540              		.type	MPU6050_getSlaveReadWriteTransitionEnabled, %function
 2541              	MPU6050_getSlaveReadWriteTransitionEnabled:
 2542              	.LFB58:
 798:mpu6050.c     **** /** Get slave read/write transition enabled value.
 799:mpu6050.c     ****  * The I2C_MST_P_NSR bit configures the I2C Master's transition from one slave
 800:mpu6050.c     ****  * read to the next slave read. If the bit equals 0, there will be a restart
 801:mpu6050.c     ****  * between reads. If the bit equals 1, there will be a stop followed by a start
 802:mpu6050.c     ****  * of the following read. When a write transaction follows a read transaction,
 803:mpu6050.c     ****  * the stop followed by a start of the successive write will be always used.
 804:mpu6050.c     ****  *
 805:mpu6050.c     ****  * @return Current slave read/write transition enabled value
 806:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 807:mpu6050.c     ****  */
 808:mpu6050.c     **** bool MPU6050_getSlaveReadWriteTransitionEnabled() {
 2543              		.loc 1 808 0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547 0000 80B5     		push	{r7, lr}
 2548              		.cfi_def_cfa_offset 8
 2549              		.cfi_offset 7, -8
 2550              		.cfi_offset 14, -4
 2551 0002 00AF     		add	r7, sp, #0
 2552              		.cfi_def_cfa_register 7
 809:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, buffer);
 2553              		.loc 1 809 0
 2554 0004 074B     		ldr	r3, .L201
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 60


 2555 0006 1878     		ldrb	r0, [r3]
 2556 0008 074B     		ldr	r3, .L201+4
 2557 000a 0422     		movs	r2, #4
 2558 000c 2421     		movs	r1, #36
 2559 000e FFF7FEFF 		bl	I2CReadBit
 810:mpu6050.c     ****     return buffer[0];
 2560              		.loc 1 810 0
 2561 0012 054B     		ldr	r3, .L201+4
 2562 0014 1B78     		ldrb	r3, [r3]
 2563 0016 5A1E     		subs	r2, r3, #1
 2564 0018 9341     		sbcs	r3, r3, r2
 2565 001a DBB2     		uxtb	r3, r3
 811:mpu6050.c     **** }
 2566              		.loc 1 811 0
 2567 001c 1800     		movs	r0, r3
 2568 001e BD46     		mov	sp, r7
 2569              		@ sp needed
 2570 0020 80BD     		pop	{r7, pc}
 2571              	.L202:
 2572 0022 C046     		.align	2
 2573              	.L201:
 2574 0024 00000000 		.word	devAddr
 2575 0028 00000000 		.word	buffer
 2576              		.cfi_endproc
 2577              	.LFE58:
 2578              		.size	MPU6050_getSlaveReadWriteTransitionEnabled, .-MPU6050_getSlaveReadWriteTransitionEnabled
 2579              		.section	.text.MPU6050_setSlaveReadWriteTransitionEnabled,"ax",%progbits
 2580              		.align	2
 2581              		.global	MPU6050_setSlaveReadWriteTransitionEnabled
 2582              		.code	16
 2583              		.thumb_func
 2584              		.type	MPU6050_setSlaveReadWriteTransitionEnabled, %function
 2585              	MPU6050_setSlaveReadWriteTransitionEnabled:
 2586              	.LFB59:
 812:mpu6050.c     **** /** Set slave read/write transition enabled value.
 813:mpu6050.c     ****  * @param enabled New slave read/write transition enabled value
 814:mpu6050.c     ****  * @see getSlaveReadWriteTransitionEnabled()
 815:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 816:mpu6050.c     ****  */
 817:mpu6050.c     **** void MPU6050_setSlaveReadWriteTransitionEnabled(bool enabled) {
 2587              		.loc 1 817 0
 2588              		.cfi_startproc
 2589              		@ args = 0, pretend = 0, frame = 8
 2590              		@ frame_needed = 1, uses_anonymous_args = 0
 2591 0000 80B5     		push	{r7, lr}
 2592              		.cfi_def_cfa_offset 8
 2593              		.cfi_offset 7, -8
 2594              		.cfi_offset 14, -4
 2595 0002 82B0     		sub	sp, sp, #8
 2596              		.cfi_def_cfa_offset 16
 2597 0004 00AF     		add	r7, sp, #0
 2598              		.cfi_def_cfa_register 7
 2599 0006 0200     		movs	r2, r0
 2600 0008 FB1D     		adds	r3, r7, #7
 2601 000a 1A70     		strb	r2, [r3]
 818:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, enabled);
 2602              		.loc 1 818 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 61


 2603 000c 054B     		ldr	r3, .L204
 2604 000e 1878     		ldrb	r0, [r3]
 2605 0010 FB1D     		adds	r3, r7, #7
 2606 0012 1B78     		ldrb	r3, [r3]
 2607 0014 0422     		movs	r2, #4
 2608 0016 2421     		movs	r1, #36
 2609 0018 FFF7FEFF 		bl	I2CWriteBit
 819:mpu6050.c     **** }
 2610              		.loc 1 819 0
 2611 001c C046     		nop
 2612 001e BD46     		mov	sp, r7
 2613 0020 02B0     		add	sp, sp, #8
 2614              		@ sp needed
 2615 0022 80BD     		pop	{r7, pc}
 2616              	.L205:
 2617              		.align	2
 2618              	.L204:
 2619 0024 00000000 		.word	devAddr
 2620              		.cfi_endproc
 2621              	.LFE59:
 2622              		.size	MPU6050_setSlaveReadWriteTransitionEnabled, .-MPU6050_setSlaveReadWriteTransitionEnabled
 2623              		.section	.text.MPU6050_getMasterClockSpeed,"ax",%progbits
 2624              		.align	2
 2625              		.global	MPU6050_getMasterClockSpeed
 2626              		.code	16
 2627              		.thumb_func
 2628              		.type	MPU6050_getMasterClockSpeed, %function
 2629              	MPU6050_getMasterClockSpeed:
 2630              	.LFB60:
 820:mpu6050.c     **** /** Get I2C master clock speed.
 821:mpu6050.c     ****  * I2C_MST_CLK is a 4 bit unsigned value which configures a divider on the
 822:mpu6050.c     ****  * MPU-60X0 internal 8MHz clock. It sets the I2C master clock speed according to
 823:mpu6050.c     ****  * the following table:
 824:mpu6050.c     ****  *
 825:mpu6050.c     ****  * <pre>
 826:mpu6050.c     ****  * I2C_MST_CLK | I2C Master Clock Speed | 8MHz Clock Divider
 827:mpu6050.c     ****  * ------------+------------------------+-------------------
 828:mpu6050.c     ****  * 0           | 348kHz                 | 23
 829:mpu6050.c     ****  * 1           | 333kHz                 | 24
 830:mpu6050.c     ****  * 2           | 320kHz                 | 25
 831:mpu6050.c     ****  * 3           | 308kHz                 | 26
 832:mpu6050.c     ****  * 4           | 296kHz                 | 27
 833:mpu6050.c     ****  * 5           | 286kHz                 | 28
 834:mpu6050.c     ****  * 6           | 276kHz                 | 29
 835:mpu6050.c     ****  * 7           | 267kHz                 | 30
 836:mpu6050.c     ****  * 8           | 258kHz                 | 31
 837:mpu6050.c     ****  * 9           | 500kHz                 | 16
 838:mpu6050.c     ****  * 10          | 471kHz                 | 17
 839:mpu6050.c     ****  * 11          | 444kHz                 | 18
 840:mpu6050.c     ****  * 12          | 421kHz                 | 19
 841:mpu6050.c     ****  * 13          | 400kHz                 | 20
 842:mpu6050.c     ****  * 14          | 381kHz                 | 21
 843:mpu6050.c     ****  * 15          | 364kHz                 | 22
 844:mpu6050.c     ****  * </pre>
 845:mpu6050.c     ****  *
 846:mpu6050.c     ****  * @return Current I2C master clock speed
 847:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 62


 848:mpu6050.c     ****  */
 849:mpu6050.c     **** uint8_t MPU6050_getMasterClockSpeed() {
 2631              		.loc 1 849 0
 2632              		.cfi_startproc
 2633              		@ args = 0, pretend = 0, frame = 0
 2634              		@ frame_needed = 1, uses_anonymous_args = 0
 2635 0000 80B5     		push	{r7, lr}
 2636              		.cfi_def_cfa_offset 8
 2637              		.cfi_offset 7, -8
 2638              		.cfi_offset 14, -4
 2639 0002 82B0     		sub	sp, sp, #8
 2640              		.cfi_def_cfa_offset 16
 2641 0004 02AF     		add	r7, sp, #8
 2642              		.cfi_def_cfa 7, 8
 850:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST_
 2643              		.loc 1 850 0
 2644 0006 074B     		ldr	r3, .L208
 2645 0008 1878     		ldrb	r0, [r3]
 2646 000a 074B     		ldr	r3, .L208+4
 2647 000c 0093     		str	r3, [sp]
 2648 000e 0423     		movs	r3, #4
 2649 0010 0322     		movs	r2, #3
 2650 0012 2421     		movs	r1, #36
 2651 0014 FFF7FEFF 		bl	I2CReadBits
 851:mpu6050.c     ****     return buffer[0];
 2652              		.loc 1 851 0
 2653 0018 034B     		ldr	r3, .L208+4
 2654 001a 1B78     		ldrb	r3, [r3]
 852:mpu6050.c     **** }
 2655              		.loc 1 852 0
 2656 001c 1800     		movs	r0, r3
 2657 001e BD46     		mov	sp, r7
 2658              		@ sp needed
 2659 0020 80BD     		pop	{r7, pc}
 2660              	.L209:
 2661 0022 C046     		.align	2
 2662              	.L208:
 2663 0024 00000000 		.word	devAddr
 2664 0028 00000000 		.word	buffer
 2665              		.cfi_endproc
 2666              	.LFE60:
 2667              		.size	MPU6050_getMasterClockSpeed, .-MPU6050_getMasterClockSpeed
 2668              		.section	.text.MPU6050_setMasterClockSpeed,"ax",%progbits
 2669              		.align	2
 2670              		.global	MPU6050_setMasterClockSpeed
 2671              		.code	16
 2672              		.thumb_func
 2673              		.type	MPU6050_setMasterClockSpeed, %function
 2674              	MPU6050_setMasterClockSpeed:
 2675              	.LFB61:
 853:mpu6050.c     **** /** Set I2C master clock speed.
 854:mpu6050.c     ****  * @reparam speed Current I2C master clock speed
 855:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_CTRL
 856:mpu6050.c     ****  */
 857:mpu6050.c     **** void MPU6050_setMasterClockSpeed(uint8_t speed) {
 2676              		.loc 1 857 0
 2677              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 63


 2678              		@ args = 0, pretend = 0, frame = 8
 2679              		@ frame_needed = 1, uses_anonymous_args = 0
 2680 0000 80B5     		push	{r7, lr}
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 7, -8
 2683              		.cfi_offset 14, -4
 2684 0002 84B0     		sub	sp, sp, #16
 2685              		.cfi_def_cfa_offset 24
 2686 0004 02AF     		add	r7, sp, #8
 2687              		.cfi_def_cfa 7, 16
 2688 0006 0200     		movs	r2, r0
 2689 0008 FB1D     		adds	r3, r7, #7
 2690 000a 1A70     		strb	r2, [r3]
 858:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST
 2691              		.loc 1 858 0
 2692 000c 064B     		ldr	r3, .L211
 2693 000e 1878     		ldrb	r0, [r3]
 2694 0010 FB1D     		adds	r3, r7, #7
 2695 0012 1B78     		ldrb	r3, [r3]
 2696 0014 0093     		str	r3, [sp]
 2697 0016 0423     		movs	r3, #4
 2698 0018 0322     		movs	r2, #3
 2699 001a 2421     		movs	r1, #36
 2700 001c FFF7FEFF 		bl	I2CWriteBits
 859:mpu6050.c     **** }
 2701              		.loc 1 859 0
 2702 0020 C046     		nop
 2703 0022 BD46     		mov	sp, r7
 2704 0024 02B0     		add	sp, sp, #8
 2705              		@ sp needed
 2706 0026 80BD     		pop	{r7, pc}
 2707              	.L212:
 2708              		.align	2
 2709              	.L211:
 2710 0028 00000000 		.word	devAddr
 2711              		.cfi_endproc
 2712              	.LFE61:
 2713              		.size	MPU6050_setMasterClockSpeed, .-MPU6050_setMasterClockSpeed
 2714              		.section	.text.MPU6050_getSlaveAddress,"ax",%progbits
 2715              		.align	2
 2716              		.global	MPU6050_getSlaveAddress
 2717              		.code	16
 2718              		.thumb_func
 2719              		.type	MPU6050_getSlaveAddress, %function
 2720              	MPU6050_getSlaveAddress:
 2721              	.LFB62:
 860:mpu6050.c     **** 
 861:mpu6050.c     **** // I2C_SLV* registers (Slave 0-3)
 862:mpu6050.c     **** 
 863:mpu6050.c     **** /** Get the I2C address of the specified slave (0-3).
 864:mpu6050.c     ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
 865:mpu6050.c     ****  * operation, and if it is cleared, then it's a write operation. The remaining
 866:mpu6050.c     ****  * bits (6-0) are the 7-bit device address of the slave device.
 867:mpu6050.c     ****  *
 868:mpu6050.c     ****  * In read mode, the result of the read is placed in the lowest available 
 869:mpu6050.c     ****  * EXT_SENS_DATA register. For further information regarding the allocation of
 870:mpu6050.c     ****  * read results, please refer to the EXT_SENS_DATA register description
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 64


 871:mpu6050.c     ****  * (Registers 73 - 96).
 872:mpu6050.c     ****  *
 873:mpu6050.c     ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 874:mpu6050.c     ****  * characteristics, and so it has its own functions (getSlave4* and setSlave4*).
 875:mpu6050.c     ****  *
 876:mpu6050.c     ****  * I2C data transactions are performed at the Sample Rate, as defined in
 877:mpu6050.c     ****  * Register 25. The user is responsible for ensuring that I2C data transactions
 878:mpu6050.c     ****  * to and from each enabled Slave can be completed within a single period of the
 879:mpu6050.c     ****  * Sample Rate.
 880:mpu6050.c     ****  *
 881:mpu6050.c     ****  * The I2C slave access rate can be reduced relative to the Sample Rate. This
 882:mpu6050.c     ****  * reduced access rate is determined by I2C_MST_DLY (Register 52). Whether a
 883:mpu6050.c     ****  * slave's access rate is reduced relative to the Sample Rate is determined by
 884:mpu6050.c     ****  * I2C_MST_DELAY_CTRL (Register 103).
 885:mpu6050.c     ****  *
 886:mpu6050.c     ****  * The processing order for the slaves is fixed. The sequence followed for
 887:mpu6050.c     ****  * processing the slaves is Slave 0, Slave 1, Slave 2, Slave 3 and Slave 4. If a
 888:mpu6050.c     ****  * particular Slave is disabled it will be skipped.
 889:mpu6050.c     ****  *
 890:mpu6050.c     ****  * Each slave can either be accessed at the sample rate or at a reduced sample
 891:mpu6050.c     ****  * rate. In a case where some slaves are accessed at the Sample Rate and some
 892:mpu6050.c     ****  * slaves are accessed at the reduced rate, the sequence of accessing the slaves
 893:mpu6050.c     ****  * (Slave 0 to Slave 4) is still followed. However, the reduced rate slaves will
 894:mpu6050.c     ****  * be skipped if their access rate dictates that they should not be accessed
 895:mpu6050.c     ****  * during that particular cycle. For further information regarding the reduced
 896:mpu6050.c     ****  * access rate, please refer to Register 52. Whether a slave is accessed at the
 897:mpu6050.c     ****  * Sample Rate or at the reduced rate is determined by the Delay Enable bits in
 898:mpu6050.c     ****  * Register 103.
 899:mpu6050.c     ****  *
 900:mpu6050.c     ****  * @param num Slave number (0-3)
 901:mpu6050.c     ****  * @return Current address for specified slave
 902:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 903:mpu6050.c     ****  */
 904:mpu6050.c     **** uint8_t MPU6050_getSlaveAddress(uint8_t num) {
 2722              		.loc 1 904 0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 8
 2725              		@ frame_needed = 1, uses_anonymous_args = 0
 2726 0000 80B5     		push	{r7, lr}
 2727              		.cfi_def_cfa_offset 8
 2728              		.cfi_offset 7, -8
 2729              		.cfi_offset 14, -4
 2730 0002 82B0     		sub	sp, sp, #8
 2731              		.cfi_def_cfa_offset 16
 2732 0004 00AF     		add	r7, sp, #0
 2733              		.cfi_def_cfa_register 7
 2734 0006 0200     		movs	r2, r0
 2735 0008 FB1D     		adds	r3, r7, #7
 2736 000a 1A70     		strb	r2, [r3]
 905:mpu6050.c     ****     if (num > 3) return 0;
 2737              		.loc 1 905 0
 2738 000c FB1D     		adds	r3, r7, #7
 2739 000e 1B78     		ldrb	r3, [r3]
 2740 0010 032B     		cmp	r3, #3
 2741 0012 01D9     		bls	.L214
 2742              		.loc 1 905 0 is_stmt 0 discriminator 1
 2743 0014 0023     		movs	r3, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 65


 2744 0016 0FE0     		b	.L215
 2745              	.L214:
 906:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, buffer);
 2746              		.loc 1 906 0 is_stmt 1
 2747 0018 094B     		ldr	r3, .L216
 2748 001a 1878     		ldrb	r0, [r3]
 2749 001c FB1D     		adds	r3, r7, #7
 2750 001e 1B78     		ldrb	r3, [r3]
 2751 0020 1A1C     		adds	r2, r3, #0
 2752 0022 9218     		adds	r2, r2, r2
 2753 0024 D318     		adds	r3, r2, r3
 2754 0026 DBB2     		uxtb	r3, r3
 2755 0028 2533     		adds	r3, r3, #37
 2756 002a DBB2     		uxtb	r3, r3
 2757 002c 054A     		ldr	r2, .L216+4
 2758 002e 1900     		movs	r1, r3
 2759 0030 FFF7FEFF 		bl	I2CReadByte
 907:mpu6050.c     ****     return buffer[0];
 2760              		.loc 1 907 0
 2761 0034 034B     		ldr	r3, .L216+4
 2762 0036 1B78     		ldrb	r3, [r3]
 2763              	.L215:
 908:mpu6050.c     **** }
 2764              		.loc 1 908 0
 2765 0038 1800     		movs	r0, r3
 2766 003a BD46     		mov	sp, r7
 2767 003c 02B0     		add	sp, sp, #8
 2768              		@ sp needed
 2769 003e 80BD     		pop	{r7, pc}
 2770              	.L217:
 2771              		.align	2
 2772              	.L216:
 2773 0040 00000000 		.word	devAddr
 2774 0044 00000000 		.word	buffer
 2775              		.cfi_endproc
 2776              	.LFE62:
 2777              		.size	MPU6050_getSlaveAddress, .-MPU6050_getSlaveAddress
 2778              		.section	.text.MPU6050_setSlaveAddress,"ax",%progbits
 2779              		.align	2
 2780              		.global	MPU6050_setSlaveAddress
 2781              		.code	16
 2782              		.thumb_func
 2783              		.type	MPU6050_setSlaveAddress, %function
 2784              	MPU6050_setSlaveAddress:
 2785              	.LFB63:
 909:mpu6050.c     **** /** Set the I2C address of the specified slave (0-3).
 910:mpu6050.c     ****  * @param num Slave number (0-3)
 911:mpu6050.c     ****  * @param address New address for specified slave
 912:mpu6050.c     ****  * @see getSlaveAddress()
 913:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 914:mpu6050.c     ****  */
 915:mpu6050.c     **** void MPU6050_setSlaveAddress(uint8_t num, uint8_t address) {
 2786              		.loc 1 915 0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 8
 2789              		@ frame_needed = 1, uses_anonymous_args = 0
 2790 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 66


 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 7, -8
 2793              		.cfi_offset 14, -4
 2794 0002 82B0     		sub	sp, sp, #8
 2795              		.cfi_def_cfa_offset 16
 2796 0004 00AF     		add	r7, sp, #0
 2797              		.cfi_def_cfa_register 7
 2798 0006 0200     		movs	r2, r0
 2799 0008 FB1D     		adds	r3, r7, #7
 2800 000a 1A70     		strb	r2, [r3]
 2801 000c BB1D     		adds	r3, r7, #6
 2802 000e 0A1C     		adds	r2, r1, #0
 2803 0010 1A70     		strb	r2, [r3]
 916:mpu6050.c     ****     if (num > 3) return;
 2804              		.loc 1 916 0
 2805 0012 FB1D     		adds	r3, r7, #7
 2806 0014 1B78     		ldrb	r3, [r3]
 2807 0016 032B     		cmp	r3, #3
 2808 0018 0FD8     		bhi	.L221
 917:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 2809              		.loc 1 917 0
 2810 001a 0A4B     		ldr	r3, .L222
 2811 001c 1878     		ldrb	r0, [r3]
 2812 001e FB1D     		adds	r3, r7, #7
 2813 0020 1B78     		ldrb	r3, [r3]
 2814 0022 1A1C     		adds	r2, r3, #0
 2815 0024 9218     		adds	r2, r2, r2
 2816 0026 D318     		adds	r3, r2, r3
 2817 0028 DBB2     		uxtb	r3, r3
 2818 002a 2533     		adds	r3, r3, #37
 2819 002c D9B2     		uxtb	r1, r3
 2820 002e BB1D     		adds	r3, r7, #6
 2821 0030 1B78     		ldrb	r3, [r3]
 2822 0032 1A00     		movs	r2, r3
 2823 0034 FFF7FEFF 		bl	I2CWriteByte
 2824 0038 00E0     		b	.L218
 2825              	.L221:
 916:mpu6050.c     ****     if (num > 3) return;
 2826              		.loc 1 916 0
 2827 003a C046     		nop
 2828              	.L218:
 918:mpu6050.c     **** }
 2829              		.loc 1 918 0
 2830 003c BD46     		mov	sp, r7
 2831 003e 02B0     		add	sp, sp, #8
 2832              		@ sp needed
 2833 0040 80BD     		pop	{r7, pc}
 2834              	.L223:
 2835 0042 C046     		.align	2
 2836              	.L222:
 2837 0044 00000000 		.word	devAddr
 2838              		.cfi_endproc
 2839              	.LFE63:
 2840              		.size	MPU6050_setSlaveAddress, .-MPU6050_setSlaveAddress
 2841              		.section	.text.MPU6050_getSlaveRegister,"ax",%progbits
 2842              		.align	2
 2843              		.global	MPU6050_getSlaveRegister
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 67


 2844              		.code	16
 2845              		.thumb_func
 2846              		.type	MPU6050_getSlaveRegister, %function
 2847              	MPU6050_getSlaveRegister:
 2848              	.LFB64:
 919:mpu6050.c     **** /** Get the active internal register for the specified slave (0-3).
 920:mpu6050.c     ****  * Read/write operations for this slave will be done to whatever internal
 921:mpu6050.c     ****  * register address is stored in this MPU register.
 922:mpu6050.c     ****  *
 923:mpu6050.c     ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 924:mpu6050.c     ****  * characteristics, and so it has its own functions.
 925:mpu6050.c     ****  *
 926:mpu6050.c     ****  * @param num Slave number (0-3)
 927:mpu6050.c     ****  * @return Current active register for specified slave
 928:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_REG
 929:mpu6050.c     ****  */
 930:mpu6050.c     **** uint8_t MPU6050_getSlaveRegister(uint8_t num) {
 2849              		.loc 1 930 0
 2850              		.cfi_startproc
 2851              		@ args = 0, pretend = 0, frame = 8
 2852              		@ frame_needed = 1, uses_anonymous_args = 0
 2853 0000 80B5     		push	{r7, lr}
 2854              		.cfi_def_cfa_offset 8
 2855              		.cfi_offset 7, -8
 2856              		.cfi_offset 14, -4
 2857 0002 82B0     		sub	sp, sp, #8
 2858              		.cfi_def_cfa_offset 16
 2859 0004 00AF     		add	r7, sp, #0
 2860              		.cfi_def_cfa_register 7
 2861 0006 0200     		movs	r2, r0
 2862 0008 FB1D     		adds	r3, r7, #7
 2863 000a 1A70     		strb	r2, [r3]
 931:mpu6050.c     ****     if (num > 3) return 0;
 2864              		.loc 1 931 0
 2865 000c FB1D     		adds	r3, r7, #7
 2866 000e 1B78     		ldrb	r3, [r3]
 2867 0010 032B     		cmp	r3, #3
 2868 0012 01D9     		bls	.L225
 2869              		.loc 1 931 0 is_stmt 0 discriminator 1
 2870 0014 0023     		movs	r3, #0
 2871 0016 0FE0     		b	.L226
 2872              	.L225:
 932:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, buffer);
 2873              		.loc 1 932 0 is_stmt 1
 2874 0018 094B     		ldr	r3, .L227
 2875 001a 1878     		ldrb	r0, [r3]
 2876 001c FB1D     		adds	r3, r7, #7
 2877 001e 1B78     		ldrb	r3, [r3]
 2878 0020 1A1C     		adds	r2, r3, #0
 2879 0022 9218     		adds	r2, r2, r2
 2880 0024 D318     		adds	r3, r2, r3
 2881 0026 DBB2     		uxtb	r3, r3
 2882 0028 2633     		adds	r3, r3, #38
 2883 002a DBB2     		uxtb	r3, r3
 2884 002c 054A     		ldr	r2, .L227+4
 2885 002e 1900     		movs	r1, r3
 2886 0030 FFF7FEFF 		bl	I2CReadByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 68


 933:mpu6050.c     ****     return buffer[0];
 2887              		.loc 1 933 0
 2888 0034 034B     		ldr	r3, .L227+4
 2889 0036 1B78     		ldrb	r3, [r3]
 2890              	.L226:
 934:mpu6050.c     **** }
 2891              		.loc 1 934 0
 2892 0038 1800     		movs	r0, r3
 2893 003a BD46     		mov	sp, r7
 2894 003c 02B0     		add	sp, sp, #8
 2895              		@ sp needed
 2896 003e 80BD     		pop	{r7, pc}
 2897              	.L228:
 2898              		.align	2
 2899              	.L227:
 2900 0040 00000000 		.word	devAddr
 2901 0044 00000000 		.word	buffer
 2902              		.cfi_endproc
 2903              	.LFE64:
 2904              		.size	MPU6050_getSlaveRegister, .-MPU6050_getSlaveRegister
 2905              		.section	.text.MPU6050_setSlaveRegister,"ax",%progbits
 2906              		.align	2
 2907              		.global	MPU6050_setSlaveRegister
 2908              		.code	16
 2909              		.thumb_func
 2910              		.type	MPU6050_setSlaveRegister, %function
 2911              	MPU6050_setSlaveRegister:
 2912              	.LFB65:
 935:mpu6050.c     **** /** Set the active internal register for the specified slave (0-3).
 936:mpu6050.c     ****  * @param num Slave number (0-3)
 937:mpu6050.c     ****  * @param reg New active register for specified slave
 938:mpu6050.c     ****  * @see getSlaveRegister()
 939:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_REG
 940:mpu6050.c     ****  */
 941:mpu6050.c     **** void MPU6050_setSlaveRegister(uint8_t num, uint8_t reg) {
 2913              		.loc 1 941 0
 2914              		.cfi_startproc
 2915              		@ args = 0, pretend = 0, frame = 8
 2916              		@ frame_needed = 1, uses_anonymous_args = 0
 2917 0000 80B5     		push	{r7, lr}
 2918              		.cfi_def_cfa_offset 8
 2919              		.cfi_offset 7, -8
 2920              		.cfi_offset 14, -4
 2921 0002 82B0     		sub	sp, sp, #8
 2922              		.cfi_def_cfa_offset 16
 2923 0004 00AF     		add	r7, sp, #0
 2924              		.cfi_def_cfa_register 7
 2925 0006 0200     		movs	r2, r0
 2926 0008 FB1D     		adds	r3, r7, #7
 2927 000a 1A70     		strb	r2, [r3]
 2928 000c BB1D     		adds	r3, r7, #6
 2929 000e 0A1C     		adds	r2, r1, #0
 2930 0010 1A70     		strb	r2, [r3]
 942:mpu6050.c     ****     if (num > 3) return;
 2931              		.loc 1 942 0
 2932 0012 FB1D     		adds	r3, r7, #7
 2933 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 69


 2934 0016 032B     		cmp	r3, #3
 2935 0018 0FD8     		bhi	.L232
 943:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, reg);
 2936              		.loc 1 943 0
 2937 001a 0A4B     		ldr	r3, .L233
 2938 001c 1878     		ldrb	r0, [r3]
 2939 001e FB1D     		adds	r3, r7, #7
 2940 0020 1B78     		ldrb	r3, [r3]
 2941 0022 1A1C     		adds	r2, r3, #0
 2942 0024 9218     		adds	r2, r2, r2
 2943 0026 D318     		adds	r3, r2, r3
 2944 0028 DBB2     		uxtb	r3, r3
 2945 002a 2633     		adds	r3, r3, #38
 2946 002c D9B2     		uxtb	r1, r3
 2947 002e BB1D     		adds	r3, r7, #6
 2948 0030 1B78     		ldrb	r3, [r3]
 2949 0032 1A00     		movs	r2, r3
 2950 0034 FFF7FEFF 		bl	I2CWriteByte
 2951 0038 00E0     		b	.L229
 2952              	.L232:
 942:mpu6050.c     ****     if (num > 3) return;
 2953              		.loc 1 942 0
 2954 003a C046     		nop
 2955              	.L229:
 944:mpu6050.c     **** }
 2956              		.loc 1 944 0
 2957 003c BD46     		mov	sp, r7
 2958 003e 02B0     		add	sp, sp, #8
 2959              		@ sp needed
 2960 0040 80BD     		pop	{r7, pc}
 2961              	.L234:
 2962 0042 C046     		.align	2
 2963              	.L233:
 2964 0044 00000000 		.word	devAddr
 2965              		.cfi_endproc
 2966              	.LFE65:
 2967              		.size	MPU6050_setSlaveRegister, .-MPU6050_setSlaveRegister
 2968              		.section	.text.MPU6050_getSlaveEnabled,"ax",%progbits
 2969              		.align	2
 2970              		.global	MPU6050_getSlaveEnabled
 2971              		.code	16
 2972              		.thumb_func
 2973              		.type	MPU6050_getSlaveEnabled, %function
 2974              	MPU6050_getSlaveEnabled:
 2975              	.LFB66:
 945:mpu6050.c     **** /** Get the enabled value for the specified slave (0-3).
 946:mpu6050.c     ****  * When set to 1, this bit enables Slave 0 for data transfer operations. When
 947:mpu6050.c     ****  * cleared to 0, this bit disables Slave 0 from data transfer operations.
 948:mpu6050.c     ****  * @param num Slave number (0-3)
 949:mpu6050.c     ****  * @return Current enabled value for specified slave
 950:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 951:mpu6050.c     ****  */
 952:mpu6050.c     **** bool MPU6050_getSlaveEnabled(uint8_t num) {
 2976              		.loc 1 952 0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 8
 2979              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 70


 2980 0000 80B5     		push	{r7, lr}
 2981              		.cfi_def_cfa_offset 8
 2982              		.cfi_offset 7, -8
 2983              		.cfi_offset 14, -4
 2984 0002 82B0     		sub	sp, sp, #8
 2985              		.cfi_def_cfa_offset 16
 2986 0004 00AF     		add	r7, sp, #0
 2987              		.cfi_def_cfa_register 7
 2988 0006 0200     		movs	r2, r0
 2989 0008 FB1D     		adds	r3, r7, #7
 2990 000a 1A70     		strb	r2, [r3]
 953:mpu6050.c     ****     if (num > 3) return 0;
 2991              		.loc 1 953 0
 2992 000c FB1D     		adds	r3, r7, #7
 2993 000e 1B78     		ldrb	r3, [r3]
 2994 0010 032B     		cmp	r3, #3
 2995 0012 01D9     		bls	.L236
 2996              		.loc 1 953 0 is_stmt 0 discriminator 1
 2997 0014 0023     		movs	r3, #0
 2998 0016 12E0     		b	.L237
 2999              	.L236:
 954:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, buffer);
 3000              		.loc 1 954 0 is_stmt 1
 3001 0018 0B4B     		ldr	r3, .L238
 3002 001a 1878     		ldrb	r0, [r3]
 3003 001c FB1D     		adds	r3, r7, #7
 3004 001e 1B78     		ldrb	r3, [r3]
 3005 0020 1A1C     		adds	r2, r3, #0
 3006 0022 9218     		adds	r2, r2, r2
 3007 0024 D318     		adds	r3, r2, r3
 3008 0026 DBB2     		uxtb	r3, r3
 3009 0028 2733     		adds	r3, r3, #39
 3010 002a D9B2     		uxtb	r1, r3
 3011 002c 074B     		ldr	r3, .L238+4
 3012 002e 0722     		movs	r2, #7
 3013 0030 FFF7FEFF 		bl	I2CReadBit
 955:mpu6050.c     ****     return buffer[0];
 3014              		.loc 1 955 0
 3015 0034 054B     		ldr	r3, .L238+4
 3016 0036 1B78     		ldrb	r3, [r3]
 3017 0038 5A1E     		subs	r2, r3, #1
 3018 003a 9341     		sbcs	r3, r3, r2
 3019 003c DBB2     		uxtb	r3, r3
 3020              	.L237:
 956:mpu6050.c     **** }
 3021              		.loc 1 956 0
 3022 003e 1800     		movs	r0, r3
 3023 0040 BD46     		mov	sp, r7
 3024 0042 02B0     		add	sp, sp, #8
 3025              		@ sp needed
 3026 0044 80BD     		pop	{r7, pc}
 3027              	.L239:
 3028 0046 C046     		.align	2
 3029              	.L238:
 3030 0048 00000000 		.word	devAddr
 3031 004c 00000000 		.word	buffer
 3032              		.cfi_endproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 71


 3033              	.LFE66:
 3034              		.size	MPU6050_getSlaveEnabled, .-MPU6050_getSlaveEnabled
 3035              		.section	.text.MPU6050_setSlaveEnabled,"ax",%progbits
 3036              		.align	2
 3037              		.global	MPU6050_setSlaveEnabled
 3038              		.code	16
 3039              		.thumb_func
 3040              		.type	MPU6050_setSlaveEnabled, %function
 3041              	MPU6050_setSlaveEnabled:
 3042              	.LFB67:
 957:mpu6050.c     **** /** Set the enabled value for the specified slave (0-3).
 958:mpu6050.c     ****  * @param num Slave number (0-3)
 959:mpu6050.c     ****  * @param enabled New enabled value for specified slave
 960:mpu6050.c     ****  * @see getSlaveEnabled()
 961:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 962:mpu6050.c     ****  */
 963:mpu6050.c     **** void MPU6050_setSlaveEnabled(uint8_t num, bool enabled) {
 3043              		.loc 1 963 0
 3044              		.cfi_startproc
 3045              		@ args = 0, pretend = 0, frame = 8
 3046              		@ frame_needed = 1, uses_anonymous_args = 0
 3047 0000 80B5     		push	{r7, lr}
 3048              		.cfi_def_cfa_offset 8
 3049              		.cfi_offset 7, -8
 3050              		.cfi_offset 14, -4
 3051 0002 82B0     		sub	sp, sp, #8
 3052              		.cfi_def_cfa_offset 16
 3053 0004 00AF     		add	r7, sp, #0
 3054              		.cfi_def_cfa_register 7
 3055 0006 0200     		movs	r2, r0
 3056 0008 FB1D     		adds	r3, r7, #7
 3057 000a 1A70     		strb	r2, [r3]
 3058 000c BB1D     		adds	r3, r7, #6
 3059 000e 0A1C     		adds	r2, r1, #0
 3060 0010 1A70     		strb	r2, [r3]
 964:mpu6050.c     ****     if (num > 3) return;
 3061              		.loc 1 964 0
 3062 0012 FB1D     		adds	r3, r7, #7
 3063 0014 1B78     		ldrb	r3, [r3]
 3064 0016 032B     		cmp	r3, #3
 3065 0018 0FD8     		bhi	.L243
 965:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, enabled);
 3066              		.loc 1 965 0
 3067 001a 0A4B     		ldr	r3, .L244
 3068 001c 1878     		ldrb	r0, [r3]
 3069 001e FB1D     		adds	r3, r7, #7
 3070 0020 1B78     		ldrb	r3, [r3]
 3071 0022 1A1C     		adds	r2, r3, #0
 3072 0024 9218     		adds	r2, r2, r2
 3073 0026 D318     		adds	r3, r2, r3
 3074 0028 DBB2     		uxtb	r3, r3
 3075 002a 2733     		adds	r3, r3, #39
 3076 002c D9B2     		uxtb	r1, r3
 3077 002e BB1D     		adds	r3, r7, #6
 3078 0030 1B78     		ldrb	r3, [r3]
 3079 0032 0722     		movs	r2, #7
 3080 0034 FFF7FEFF 		bl	I2CWriteBit
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 72


 3081 0038 00E0     		b	.L240
 3082              	.L243:
 964:mpu6050.c     ****     if (num > 3) return;
 3083              		.loc 1 964 0
 3084 003a C046     		nop
 3085              	.L240:
 966:mpu6050.c     **** }
 3086              		.loc 1 966 0
 3087 003c BD46     		mov	sp, r7
 3088 003e 02B0     		add	sp, sp, #8
 3089              		@ sp needed
 3090 0040 80BD     		pop	{r7, pc}
 3091              	.L245:
 3092 0042 C046     		.align	2
 3093              	.L244:
 3094 0044 00000000 		.word	devAddr
 3095              		.cfi_endproc
 3096              	.LFE67:
 3097              		.size	MPU6050_setSlaveEnabled, .-MPU6050_setSlaveEnabled
 3098              		.section	.text.MPU6050_getSlaveWordByteSwap,"ax",%progbits
 3099              		.align	2
 3100              		.global	MPU6050_getSlaveWordByteSwap
 3101              		.code	16
 3102              		.thumb_func
 3103              		.type	MPU6050_getSlaveWordByteSwap, %function
 3104              	MPU6050_getSlaveWordByteSwap:
 3105              	.LFB68:
 967:mpu6050.c     **** /** Get word pair byte-swapping enabled for the specified slave (0-3).
 968:mpu6050.c     ****  * When set to 1, this bit enables byte swapping. When byte swapping is enabled,
 969:mpu6050.c     ****  * the high and low bytes of a word pair are swapped. Please refer to
 970:mpu6050.c     ****  * I2C_SLV0_GRP for the pairing convention of the word pairs. When cleared to 0,
 971:mpu6050.c     ****  * bytes transferred to and from Slave 0 will be written to EXT_SENS_DATA
 972:mpu6050.c     ****  * registers in the order they were transferred.
 973:mpu6050.c     ****  *
 974:mpu6050.c     ****  * @param num Slave number (0-3)
 975:mpu6050.c     ****  * @return Current word pair byte-swapping enabled value for specified slave
 976:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 977:mpu6050.c     ****  */
 978:mpu6050.c     **** bool MPU6050_getSlaveWordByteSwap(uint8_t num) {
 3106              		.loc 1 978 0
 3107              		.cfi_startproc
 3108              		@ args = 0, pretend = 0, frame = 8
 3109              		@ frame_needed = 1, uses_anonymous_args = 0
 3110 0000 80B5     		push	{r7, lr}
 3111              		.cfi_def_cfa_offset 8
 3112              		.cfi_offset 7, -8
 3113              		.cfi_offset 14, -4
 3114 0002 82B0     		sub	sp, sp, #8
 3115              		.cfi_def_cfa_offset 16
 3116 0004 00AF     		add	r7, sp, #0
 3117              		.cfi_def_cfa_register 7
 3118 0006 0200     		movs	r2, r0
 3119 0008 FB1D     		adds	r3, r7, #7
 3120 000a 1A70     		strb	r2, [r3]
 979:mpu6050.c     ****     if (num > 3) return 0;
 3121              		.loc 1 979 0
 3122 000c FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 73


 3123 000e 1B78     		ldrb	r3, [r3]
 3124 0010 032B     		cmp	r3, #3
 3125 0012 01D9     		bls	.L247
 3126              		.loc 1 979 0 is_stmt 0 discriminator 1
 3127 0014 0023     		movs	r3, #0
 3128 0016 12E0     		b	.L248
 3129              	.L247:
 980:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, buffer);
 3130              		.loc 1 980 0 is_stmt 1
 3131 0018 0B4B     		ldr	r3, .L249
 3132 001a 1878     		ldrb	r0, [r3]
 3133 001c FB1D     		adds	r3, r7, #7
 3134 001e 1B78     		ldrb	r3, [r3]
 3135 0020 1A1C     		adds	r2, r3, #0
 3136 0022 9218     		adds	r2, r2, r2
 3137 0024 D318     		adds	r3, r2, r3
 3138 0026 DBB2     		uxtb	r3, r3
 3139 0028 2733     		adds	r3, r3, #39
 3140 002a D9B2     		uxtb	r1, r3
 3141 002c 074B     		ldr	r3, .L249+4
 3142 002e 0622     		movs	r2, #6
 3143 0030 FFF7FEFF 		bl	I2CReadBit
 981:mpu6050.c     ****     return buffer[0];
 3144              		.loc 1 981 0
 3145 0034 054B     		ldr	r3, .L249+4
 3146 0036 1B78     		ldrb	r3, [r3]
 3147 0038 5A1E     		subs	r2, r3, #1
 3148 003a 9341     		sbcs	r3, r3, r2
 3149 003c DBB2     		uxtb	r3, r3
 3150              	.L248:
 982:mpu6050.c     **** }
 3151              		.loc 1 982 0
 3152 003e 1800     		movs	r0, r3
 3153 0040 BD46     		mov	sp, r7
 3154 0042 02B0     		add	sp, sp, #8
 3155              		@ sp needed
 3156 0044 80BD     		pop	{r7, pc}
 3157              	.L250:
 3158 0046 C046     		.align	2
 3159              	.L249:
 3160 0048 00000000 		.word	devAddr
 3161 004c 00000000 		.word	buffer
 3162              		.cfi_endproc
 3163              	.LFE68:
 3164              		.size	MPU6050_getSlaveWordByteSwap, .-MPU6050_getSlaveWordByteSwap
 3165              		.section	.text.MPU6050_setSlaveWordByteSwap,"ax",%progbits
 3166              		.align	2
 3167              		.global	MPU6050_setSlaveWordByteSwap
 3168              		.code	16
 3169              		.thumb_func
 3170              		.type	MPU6050_setSlaveWordByteSwap, %function
 3171              	MPU6050_setSlaveWordByteSwap:
 3172              	.LFB69:
 983:mpu6050.c     **** /** Set word pair byte-swapping enabled for the specified slave (0-3).
 984:mpu6050.c     ****  * @param num Slave number (0-3)
 985:mpu6050.c     ****  * @param enabled New word pair byte-swapping enabled value for specified slave
 986:mpu6050.c     ****  * @see getSlaveWordByteSwap()
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 74


 987:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 988:mpu6050.c     ****  */
 989:mpu6050.c     **** void MPU6050_setSlaveWordByteSwap(uint8_t num, bool enabled) {
 3173              		.loc 1 989 0
 3174              		.cfi_startproc
 3175              		@ args = 0, pretend = 0, frame = 8
 3176              		@ frame_needed = 1, uses_anonymous_args = 0
 3177 0000 80B5     		push	{r7, lr}
 3178              		.cfi_def_cfa_offset 8
 3179              		.cfi_offset 7, -8
 3180              		.cfi_offset 14, -4
 3181 0002 82B0     		sub	sp, sp, #8
 3182              		.cfi_def_cfa_offset 16
 3183 0004 00AF     		add	r7, sp, #0
 3184              		.cfi_def_cfa_register 7
 3185 0006 0200     		movs	r2, r0
 3186 0008 FB1D     		adds	r3, r7, #7
 3187 000a 1A70     		strb	r2, [r3]
 3188 000c BB1D     		adds	r3, r7, #6
 3189 000e 0A1C     		adds	r2, r1, #0
 3190 0010 1A70     		strb	r2, [r3]
 990:mpu6050.c     ****     if (num > 3) return;
 3191              		.loc 1 990 0
 3192 0012 FB1D     		adds	r3, r7, #7
 3193 0014 1B78     		ldrb	r3, [r3]
 3194 0016 032B     		cmp	r3, #3
 3195 0018 0FD8     		bhi	.L254
 991:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, enabled
 3196              		.loc 1 991 0
 3197 001a 0A4B     		ldr	r3, .L255
 3198 001c 1878     		ldrb	r0, [r3]
 3199 001e FB1D     		adds	r3, r7, #7
 3200 0020 1B78     		ldrb	r3, [r3]
 3201 0022 1A1C     		adds	r2, r3, #0
 3202 0024 9218     		adds	r2, r2, r2
 3203 0026 D318     		adds	r3, r2, r3
 3204 0028 DBB2     		uxtb	r3, r3
 3205 002a 2733     		adds	r3, r3, #39
 3206 002c D9B2     		uxtb	r1, r3
 3207 002e BB1D     		adds	r3, r7, #6
 3208 0030 1B78     		ldrb	r3, [r3]
 3209 0032 0622     		movs	r2, #6
 3210 0034 FFF7FEFF 		bl	I2CWriteBit
 3211 0038 00E0     		b	.L251
 3212              	.L254:
 990:mpu6050.c     ****     if (num > 3) return;
 3213              		.loc 1 990 0
 3214 003a C046     		nop
 3215              	.L251:
 992:mpu6050.c     **** }
 3216              		.loc 1 992 0
 3217 003c BD46     		mov	sp, r7
 3218 003e 02B0     		add	sp, sp, #8
 3219              		@ sp needed
 3220 0040 80BD     		pop	{r7, pc}
 3221              	.L256:
 3222 0042 C046     		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 75


 3223              	.L255:
 3224 0044 00000000 		.word	devAddr
 3225              		.cfi_endproc
 3226              	.LFE69:
 3227              		.size	MPU6050_setSlaveWordByteSwap, .-MPU6050_setSlaveWordByteSwap
 3228              		.section	.text.MPU6050_getSlaveWriteMode,"ax",%progbits
 3229              		.align	2
 3230              		.global	MPU6050_getSlaveWriteMode
 3231              		.code	16
 3232              		.thumb_func
 3233              		.type	MPU6050_getSlaveWriteMode, %function
 3234              	MPU6050_getSlaveWriteMode:
 3235              	.LFB70:
 993:mpu6050.c     **** /** Get write mode for the specified slave (0-3).
 994:mpu6050.c     ****  * When set to 1, the transaction will read or write data only. When cleared to
 995:mpu6050.c     ****  * 0, the transaction will write a register address prior to reading or writing
 996:mpu6050.c     ****  * data. This should equal 0 when specifying the register address within the
 997:mpu6050.c     ****  * Slave device to/from which the ensuing data transaction will take place.
 998:mpu6050.c     ****  *
 999:mpu6050.c     ****  * @param num Slave number (0-3)
1000:mpu6050.c     ****  * @return Current write mode for specified slave (0 = register address + data, 1 = data only)
1001:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1002:mpu6050.c     ****  */
1003:mpu6050.c     **** bool MPU6050_getSlaveWriteMode(uint8_t num) {
 3236              		.loc 1 1003 0
 3237              		.cfi_startproc
 3238              		@ args = 0, pretend = 0, frame = 8
 3239              		@ frame_needed = 1, uses_anonymous_args = 0
 3240 0000 80B5     		push	{r7, lr}
 3241              		.cfi_def_cfa_offset 8
 3242              		.cfi_offset 7, -8
 3243              		.cfi_offset 14, -4
 3244 0002 82B0     		sub	sp, sp, #8
 3245              		.cfi_def_cfa_offset 16
 3246 0004 00AF     		add	r7, sp, #0
 3247              		.cfi_def_cfa_register 7
 3248 0006 0200     		movs	r2, r0
 3249 0008 FB1D     		adds	r3, r7, #7
 3250 000a 1A70     		strb	r2, [r3]
1004:mpu6050.c     ****     if (num > 3) return 0;
 3251              		.loc 1 1004 0
 3252 000c FB1D     		adds	r3, r7, #7
 3253 000e 1B78     		ldrb	r3, [r3]
 3254 0010 032B     		cmp	r3, #3
 3255 0012 01D9     		bls	.L258
 3256              		.loc 1 1004 0 is_stmt 0 discriminator 1
 3257 0014 0023     		movs	r3, #0
 3258 0016 12E0     		b	.L259
 3259              	.L258:
1005:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, buffer);
 3260              		.loc 1 1005 0 is_stmt 1
 3261 0018 0B4B     		ldr	r3, .L260
 3262 001a 1878     		ldrb	r0, [r3]
 3263 001c FB1D     		adds	r3, r7, #7
 3264 001e 1B78     		ldrb	r3, [r3]
 3265 0020 1A1C     		adds	r2, r3, #0
 3266 0022 9218     		adds	r2, r2, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 76


 3267 0024 D318     		adds	r3, r2, r3
 3268 0026 DBB2     		uxtb	r3, r3
 3269 0028 2733     		adds	r3, r3, #39
 3270 002a D9B2     		uxtb	r1, r3
 3271 002c 074B     		ldr	r3, .L260+4
 3272 002e 0522     		movs	r2, #5
 3273 0030 FFF7FEFF 		bl	I2CReadBit
1006:mpu6050.c     ****     return buffer[0];
 3274              		.loc 1 1006 0
 3275 0034 054B     		ldr	r3, .L260+4
 3276 0036 1B78     		ldrb	r3, [r3]
 3277 0038 5A1E     		subs	r2, r3, #1
 3278 003a 9341     		sbcs	r3, r3, r2
 3279 003c DBB2     		uxtb	r3, r3
 3280              	.L259:
1007:mpu6050.c     **** }
 3281              		.loc 1 1007 0
 3282 003e 1800     		movs	r0, r3
 3283 0040 BD46     		mov	sp, r7
 3284 0042 02B0     		add	sp, sp, #8
 3285              		@ sp needed
 3286 0044 80BD     		pop	{r7, pc}
 3287              	.L261:
 3288 0046 C046     		.align	2
 3289              	.L260:
 3290 0048 00000000 		.word	devAddr
 3291 004c 00000000 		.word	buffer
 3292              		.cfi_endproc
 3293              	.LFE70:
 3294              		.size	MPU6050_getSlaveWriteMode, .-MPU6050_getSlaveWriteMode
 3295              		.section	.text.MPU6050_setSlaveWriteMode,"ax",%progbits
 3296              		.align	2
 3297              		.global	MPU6050_setSlaveWriteMode
 3298              		.code	16
 3299              		.thumb_func
 3300              		.type	MPU6050_setSlaveWriteMode, %function
 3301              	MPU6050_setSlaveWriteMode:
 3302              	.LFB71:
1008:mpu6050.c     **** /** Set write mode for the specified slave (0-3).
1009:mpu6050.c     ****  * @param num Slave number (0-3)
1010:mpu6050.c     ****  * @param mode New write mode for specified slave (0 = register address + data, 1 = data only)
1011:mpu6050.c     ****  * @see getSlaveWriteMode()
1012:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1013:mpu6050.c     ****  */
1014:mpu6050.c     **** void MPU6050_setSlaveWriteMode(uint8_t num, bool mode) {
 3303              		.loc 1 1014 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 8
 3306              		@ frame_needed = 1, uses_anonymous_args = 0
 3307 0000 80B5     		push	{r7, lr}
 3308              		.cfi_def_cfa_offset 8
 3309              		.cfi_offset 7, -8
 3310              		.cfi_offset 14, -4
 3311 0002 82B0     		sub	sp, sp, #8
 3312              		.cfi_def_cfa_offset 16
 3313 0004 00AF     		add	r7, sp, #0
 3314              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 77


 3315 0006 0200     		movs	r2, r0
 3316 0008 FB1D     		adds	r3, r7, #7
 3317 000a 1A70     		strb	r2, [r3]
 3318 000c BB1D     		adds	r3, r7, #6
 3319 000e 0A1C     		adds	r2, r1, #0
 3320 0010 1A70     		strb	r2, [r3]
1015:mpu6050.c     ****     if (num > 3) return;
 3321              		.loc 1 1015 0
 3322 0012 FB1D     		adds	r3, r7, #7
 3323 0014 1B78     		ldrb	r3, [r3]
 3324 0016 032B     		cmp	r3, #3
 3325 0018 0FD8     		bhi	.L265
1016:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, mode);
 3326              		.loc 1 1016 0
 3327 001a 0A4B     		ldr	r3, .L266
 3328 001c 1878     		ldrb	r0, [r3]
 3329 001e FB1D     		adds	r3, r7, #7
 3330 0020 1B78     		ldrb	r3, [r3]
 3331 0022 1A1C     		adds	r2, r3, #0
 3332 0024 9218     		adds	r2, r2, r2
 3333 0026 D318     		adds	r3, r2, r3
 3334 0028 DBB2     		uxtb	r3, r3
 3335 002a 2733     		adds	r3, r3, #39
 3336 002c D9B2     		uxtb	r1, r3
 3337 002e BB1D     		adds	r3, r7, #6
 3338 0030 1B78     		ldrb	r3, [r3]
 3339 0032 0522     		movs	r2, #5
 3340 0034 FFF7FEFF 		bl	I2CWriteBit
 3341 0038 00E0     		b	.L262
 3342              	.L265:
1015:mpu6050.c     ****     if (num > 3) return;
 3343              		.loc 1 1015 0
 3344 003a C046     		nop
 3345              	.L262:
1017:mpu6050.c     **** }
 3346              		.loc 1 1017 0
 3347 003c BD46     		mov	sp, r7
 3348 003e 02B0     		add	sp, sp, #8
 3349              		@ sp needed
 3350 0040 80BD     		pop	{r7, pc}
 3351              	.L267:
 3352 0042 C046     		.align	2
 3353              	.L266:
 3354 0044 00000000 		.word	devAddr
 3355              		.cfi_endproc
 3356              	.LFE71:
 3357              		.size	MPU6050_setSlaveWriteMode, .-MPU6050_setSlaveWriteMode
 3358              		.section	.text.MPU6050_getSlaveWordGroupOffset,"ax",%progbits
 3359              		.align	2
 3360              		.global	MPU6050_getSlaveWordGroupOffset
 3361              		.code	16
 3362              		.thumb_func
 3363              		.type	MPU6050_getSlaveWordGroupOffset, %function
 3364              	MPU6050_getSlaveWordGroupOffset:
 3365              	.LFB72:
1018:mpu6050.c     **** /** Get word pair grouping order offset for the specified slave (0-3).
1019:mpu6050.c     ****  * This sets specifies the grouping order of word pairs received from registers.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 78


1020:mpu6050.c     ****  * When cleared to 0, bytes from register addresses 0 and 1, 2 and 3, etc (even,
1021:mpu6050.c     ****  * then odd register addresses) are paired to form a word. When set to 1, bytes
1022:mpu6050.c     ****  * from register addresses are paired 1 and 2, 3 and 4, etc. (odd, then even
1023:mpu6050.c     ****  * register addresses) are paired to form a word.
1024:mpu6050.c     ****  *
1025:mpu6050.c     ****  * @param num Slave number (0-3)
1026:mpu6050.c     ****  * @return Current word pair grouping order offset for specified slave
1027:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1028:mpu6050.c     ****  */
1029:mpu6050.c     **** bool MPU6050_getSlaveWordGroupOffset(uint8_t num) {
 3366              		.loc 1 1029 0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 8
 3369              		@ frame_needed = 1, uses_anonymous_args = 0
 3370 0000 80B5     		push	{r7, lr}
 3371              		.cfi_def_cfa_offset 8
 3372              		.cfi_offset 7, -8
 3373              		.cfi_offset 14, -4
 3374 0002 82B0     		sub	sp, sp, #8
 3375              		.cfi_def_cfa_offset 16
 3376 0004 00AF     		add	r7, sp, #0
 3377              		.cfi_def_cfa_register 7
 3378 0006 0200     		movs	r2, r0
 3379 0008 FB1D     		adds	r3, r7, #7
 3380 000a 1A70     		strb	r2, [r3]
1030:mpu6050.c     ****     if (num > 3) return 0;
 3381              		.loc 1 1030 0
 3382 000c FB1D     		adds	r3, r7, #7
 3383 000e 1B78     		ldrb	r3, [r3]
 3384 0010 032B     		cmp	r3, #3
 3385 0012 01D9     		bls	.L269
 3386              		.loc 1 1030 0 is_stmt 0 discriminator 1
 3387 0014 0023     		movs	r3, #0
 3388 0016 12E0     		b	.L270
 3389              	.L269:
1031:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, buffer);
 3390              		.loc 1 1031 0 is_stmt 1
 3391 0018 0B4B     		ldr	r3, .L271
 3392 001a 1878     		ldrb	r0, [r3]
 3393 001c FB1D     		adds	r3, r7, #7
 3394 001e 1B78     		ldrb	r3, [r3]
 3395 0020 1A1C     		adds	r2, r3, #0
 3396 0022 9218     		adds	r2, r2, r2
 3397 0024 D318     		adds	r3, r2, r3
 3398 0026 DBB2     		uxtb	r3, r3
 3399 0028 2733     		adds	r3, r3, #39
 3400 002a D9B2     		uxtb	r1, r3
 3401 002c 074B     		ldr	r3, .L271+4
 3402 002e 0422     		movs	r2, #4
 3403 0030 FFF7FEFF 		bl	I2CReadBit
1032:mpu6050.c     ****     return buffer[0];
 3404              		.loc 1 1032 0
 3405 0034 054B     		ldr	r3, .L271+4
 3406 0036 1B78     		ldrb	r3, [r3]
 3407 0038 5A1E     		subs	r2, r3, #1
 3408 003a 9341     		sbcs	r3, r3, r2
 3409 003c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 79


 3410              	.L270:
1033:mpu6050.c     **** }
 3411              		.loc 1 1033 0
 3412 003e 1800     		movs	r0, r3
 3413 0040 BD46     		mov	sp, r7
 3414 0042 02B0     		add	sp, sp, #8
 3415              		@ sp needed
 3416 0044 80BD     		pop	{r7, pc}
 3417              	.L272:
 3418 0046 C046     		.align	2
 3419              	.L271:
 3420 0048 00000000 		.word	devAddr
 3421 004c 00000000 		.word	buffer
 3422              		.cfi_endproc
 3423              	.LFE72:
 3424              		.size	MPU6050_getSlaveWordGroupOffset, .-MPU6050_getSlaveWordGroupOffset
 3425              		.section	.text.MPU6050_setSlaveWordGroupOffset,"ax",%progbits
 3426              		.align	2
 3427              		.global	MPU6050_setSlaveWordGroupOffset
 3428              		.code	16
 3429              		.thumb_func
 3430              		.type	MPU6050_setSlaveWordGroupOffset, %function
 3431              	MPU6050_setSlaveWordGroupOffset:
 3432              	.LFB73:
1034:mpu6050.c     **** /** Set word pair grouping order offset for the specified slave (0-3).
1035:mpu6050.c     ****  * @param num Slave number (0-3)
1036:mpu6050.c     ****  * @param enabled New word pair grouping order offset for specified slave
1037:mpu6050.c     ****  * @see getSlaveWordGroupOffset()
1038:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1039:mpu6050.c     ****  */
1040:mpu6050.c     **** void MPU6050_setSlaveWordGroupOffset(uint8_t num, bool enabled) {
 3433              		.loc 1 1040 0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 8
 3436              		@ frame_needed = 1, uses_anonymous_args = 0
 3437 0000 80B5     		push	{r7, lr}
 3438              		.cfi_def_cfa_offset 8
 3439              		.cfi_offset 7, -8
 3440              		.cfi_offset 14, -4
 3441 0002 82B0     		sub	sp, sp, #8
 3442              		.cfi_def_cfa_offset 16
 3443 0004 00AF     		add	r7, sp, #0
 3444              		.cfi_def_cfa_register 7
 3445 0006 0200     		movs	r2, r0
 3446 0008 FB1D     		adds	r3, r7, #7
 3447 000a 1A70     		strb	r2, [r3]
 3448 000c BB1D     		adds	r3, r7, #6
 3449 000e 0A1C     		adds	r2, r1, #0
 3450 0010 1A70     		strb	r2, [r3]
1041:mpu6050.c     ****     if (num > 3) return;
 3451              		.loc 1 1041 0
 3452 0012 FB1D     		adds	r3, r7, #7
 3453 0014 1B78     		ldrb	r3, [r3]
 3454 0016 032B     		cmp	r3, #3
 3455 0018 0FD8     		bhi	.L276
1042:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, enabled);
 3456              		.loc 1 1042 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 80


 3457 001a 0A4B     		ldr	r3, .L277
 3458 001c 1878     		ldrb	r0, [r3]
 3459 001e FB1D     		adds	r3, r7, #7
 3460 0020 1B78     		ldrb	r3, [r3]
 3461 0022 1A1C     		adds	r2, r3, #0
 3462 0024 9218     		adds	r2, r2, r2
 3463 0026 D318     		adds	r3, r2, r3
 3464 0028 DBB2     		uxtb	r3, r3
 3465 002a 2733     		adds	r3, r3, #39
 3466 002c D9B2     		uxtb	r1, r3
 3467 002e BB1D     		adds	r3, r7, #6
 3468 0030 1B78     		ldrb	r3, [r3]
 3469 0032 0422     		movs	r2, #4
 3470 0034 FFF7FEFF 		bl	I2CWriteBit
 3471 0038 00E0     		b	.L273
 3472              	.L276:
1041:mpu6050.c     ****     if (num > 3) return;
 3473              		.loc 1 1041 0
 3474 003a C046     		nop
 3475              	.L273:
1043:mpu6050.c     **** }
 3476              		.loc 1 1043 0
 3477 003c BD46     		mov	sp, r7
 3478 003e 02B0     		add	sp, sp, #8
 3479              		@ sp needed
 3480 0040 80BD     		pop	{r7, pc}
 3481              	.L278:
 3482 0042 C046     		.align	2
 3483              	.L277:
 3484 0044 00000000 		.word	devAddr
 3485              		.cfi_endproc
 3486              	.LFE73:
 3487              		.size	MPU6050_setSlaveWordGroupOffset, .-MPU6050_setSlaveWordGroupOffset
 3488              		.section	.text.MPU6050_getSlaveDataLength,"ax",%progbits
 3489              		.align	2
 3490              		.global	MPU6050_getSlaveDataLength
 3491              		.code	16
 3492              		.thumb_func
 3493              		.type	MPU6050_getSlaveDataLength, %function
 3494              	MPU6050_getSlaveDataLength:
 3495              	.LFB74:
1044:mpu6050.c     **** /** Get number of bytes to read for the specified slave (0-3).
1045:mpu6050.c     ****  * Specifies the number of bytes transferred to and from Slave 0. Clearing this
1046:mpu6050.c     ****  * bit to 0 is equivalent to disabling the register by writing 0 to I2C_SLV0_EN.
1047:mpu6050.c     ****  * @param num Slave number (0-3)
1048:mpu6050.c     ****  * @return Number of bytes to read for specified slave
1049:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1050:mpu6050.c     ****  */
1051:mpu6050.c     **** uint8_t MPU6050_getSlaveDataLength(uint8_t num) {
 3496              		.loc 1 1051 0
 3497              		.cfi_startproc
 3498              		@ args = 0, pretend = 0, frame = 8
 3499              		@ frame_needed = 1, uses_anonymous_args = 0
 3500 0000 80B5     		push	{r7, lr}
 3501              		.cfi_def_cfa_offset 8
 3502              		.cfi_offset 7, -8
 3503              		.cfi_offset 14, -4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 81


 3504 0002 84B0     		sub	sp, sp, #16
 3505              		.cfi_def_cfa_offset 24
 3506 0004 02AF     		add	r7, sp, #8
 3507              		.cfi_def_cfa 7, 16
 3508 0006 0200     		movs	r2, r0
 3509 0008 FB1D     		adds	r3, r7, #7
 3510 000a 1A70     		strb	r2, [r3]
1052:mpu6050.c     ****     if (num > 3) return 0;
 3511              		.loc 1 1052 0
 3512 000c FB1D     		adds	r3, r7, #7
 3513 000e 1B78     		ldrb	r3, [r3]
 3514 0010 032B     		cmp	r3, #3
 3515 0012 01D9     		bls	.L280
 3516              		.loc 1 1052 0 is_stmt 0 discriminator 1
 3517 0014 0023     		movs	r3, #0
 3518 0016 11E0     		b	.L281
 3519              	.L280:
1053:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU6050
 3520              		.loc 1 1053 0 is_stmt 1
 3521 0018 0A4B     		ldr	r3, .L282
 3522 001a 1878     		ldrb	r0, [r3]
 3523 001c FB1D     		adds	r3, r7, #7
 3524 001e 1B78     		ldrb	r3, [r3]
 3525 0020 1A1C     		adds	r2, r3, #0
 3526 0022 9218     		adds	r2, r2, r2
 3527 0024 D318     		adds	r3, r2, r3
 3528 0026 DBB2     		uxtb	r3, r3
 3529 0028 2733     		adds	r3, r3, #39
 3530 002a D9B2     		uxtb	r1, r3
 3531 002c 064B     		ldr	r3, .L282+4
 3532 002e 0093     		str	r3, [sp]
 3533 0030 0423     		movs	r3, #4
 3534 0032 0322     		movs	r2, #3
 3535 0034 FFF7FEFF 		bl	I2CReadBits
1054:mpu6050.c     ****     return buffer[0];
 3536              		.loc 1 1054 0
 3537 0038 034B     		ldr	r3, .L282+4
 3538 003a 1B78     		ldrb	r3, [r3]
 3539              	.L281:
1055:mpu6050.c     **** }
 3540              		.loc 1 1055 0
 3541 003c 1800     		movs	r0, r3
 3542 003e BD46     		mov	sp, r7
 3543 0040 02B0     		add	sp, sp, #8
 3544              		@ sp needed
 3545 0042 80BD     		pop	{r7, pc}
 3546              	.L283:
 3547              		.align	2
 3548              	.L282:
 3549 0044 00000000 		.word	devAddr
 3550 0048 00000000 		.word	buffer
 3551              		.cfi_endproc
 3552              	.LFE74:
 3553              		.size	MPU6050_getSlaveDataLength, .-MPU6050_getSlaveDataLength
 3554              		.section	.text.MPU6050_setSlaveDataLength,"ax",%progbits
 3555              		.align	2
 3556              		.global	MPU6050_setSlaveDataLength
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 82


 3557              		.code	16
 3558              		.thumb_func
 3559              		.type	MPU6050_setSlaveDataLength, %function
 3560              	MPU6050_setSlaveDataLength:
 3561              	.LFB75:
1056:mpu6050.c     **** /** Set number of bytes to read for the specified slave (0-3).
1057:mpu6050.c     ****  * @param num Slave number (0-3)
1058:mpu6050.c     ****  * @param length Number of bytes to read for specified slave
1059:mpu6050.c     ****  * @see getSlaveDataLength()
1060:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1061:mpu6050.c     ****  */
1062:mpu6050.c     **** void MPU6050_setSlaveDataLength(uint8_t num, uint8_t length) {
 3562              		.loc 1 1062 0
 3563              		.cfi_startproc
 3564              		@ args = 0, pretend = 0, frame = 8
 3565              		@ frame_needed = 1, uses_anonymous_args = 0
 3566 0000 80B5     		push	{r7, lr}
 3567              		.cfi_def_cfa_offset 8
 3568              		.cfi_offset 7, -8
 3569              		.cfi_offset 14, -4
 3570 0002 84B0     		sub	sp, sp, #16
 3571              		.cfi_def_cfa_offset 24
 3572 0004 02AF     		add	r7, sp, #8
 3573              		.cfi_def_cfa 7, 16
 3574 0006 0200     		movs	r2, r0
 3575 0008 FB1D     		adds	r3, r7, #7
 3576 000a 1A70     		strb	r2, [r3]
 3577 000c BB1D     		adds	r3, r7, #6
 3578 000e 0A1C     		adds	r2, r1, #0
 3579 0010 1A70     		strb	r2, [r3]
1063:mpu6050.c     ****     if (num > 3) return;
 3580              		.loc 1 1063 0
 3581 0012 FB1D     		adds	r3, r7, #7
 3582 0014 1B78     		ldrb	r3, [r3]
 3583 0016 032B     		cmp	r3, #3
 3584 0018 11D8     		bhi	.L287
1064:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU605
 3585              		.loc 1 1064 0
 3586 001a 0B4B     		ldr	r3, .L288
 3587 001c 1878     		ldrb	r0, [r3]
 3588 001e FB1D     		adds	r3, r7, #7
 3589 0020 1B78     		ldrb	r3, [r3]
 3590 0022 1A1C     		adds	r2, r3, #0
 3591 0024 9218     		adds	r2, r2, r2
 3592 0026 D318     		adds	r3, r2, r3
 3593 0028 DBB2     		uxtb	r3, r3
 3594 002a 2733     		adds	r3, r3, #39
 3595 002c D9B2     		uxtb	r1, r3
 3596 002e BB1D     		adds	r3, r7, #6
 3597 0030 1B78     		ldrb	r3, [r3]
 3598 0032 0093     		str	r3, [sp]
 3599 0034 0423     		movs	r3, #4
 3600 0036 0322     		movs	r2, #3
 3601 0038 FFF7FEFF 		bl	I2CWriteBits
 3602 003c 00E0     		b	.L284
 3603              	.L287:
1063:mpu6050.c     ****     if (num > 3) return;
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 83


 3604              		.loc 1 1063 0
 3605 003e C046     		nop
 3606              	.L284:
1065:mpu6050.c     **** }
 3607              		.loc 1 1065 0
 3608 0040 BD46     		mov	sp, r7
 3609 0042 02B0     		add	sp, sp, #8
 3610              		@ sp needed
 3611 0044 80BD     		pop	{r7, pc}
 3612              	.L289:
 3613 0046 C046     		.align	2
 3614              	.L288:
 3615 0048 00000000 		.word	devAddr
 3616              		.cfi_endproc
 3617              	.LFE75:
 3618              		.size	MPU6050_setSlaveDataLength, .-MPU6050_setSlaveDataLength
 3619              		.section	.text.MPU6050_getSlave4Address,"ax",%progbits
 3620              		.align	2
 3621              		.global	MPU6050_getSlave4Address
 3622              		.code	16
 3623              		.thumb_func
 3624              		.type	MPU6050_getSlave4Address, %function
 3625              	MPU6050_getSlave4Address:
 3626              	.LFB76:
1066:mpu6050.c     **** 
1067:mpu6050.c     **** // I2C_SLV* registers (Slave 4)
1068:mpu6050.c     **** 
1069:mpu6050.c     **** /** Get the I2C address of Slave 4.
1070:mpu6050.c     ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
1071:mpu6050.c     ****  * operation, and if it is cleared, then it's a write operation. The remaining
1072:mpu6050.c     ****  * bits (6-0) are the 7-bit device address of the slave device.
1073:mpu6050.c     ****  *
1074:mpu6050.c     ****  * @return Current address for Slave 4
1075:mpu6050.c     ****  * @see getSlaveAddress()
1076:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1077:mpu6050.c     ****  */
1078:mpu6050.c     **** uint8_t MPU6050_getSlave4Address() {
 3627              		.loc 1 1078 0
 3628              		.cfi_startproc
 3629              		@ args = 0, pretend = 0, frame = 0
 3630              		@ frame_needed = 1, uses_anonymous_args = 0
 3631 0000 80B5     		push	{r7, lr}
 3632              		.cfi_def_cfa_offset 8
 3633              		.cfi_offset 7, -8
 3634              		.cfi_offset 14, -4
 3635 0002 00AF     		add	r7, sp, #0
 3636              		.cfi_def_cfa_register 7
1079:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, buffer);
 3637              		.loc 1 1079 0
 3638 0004 054B     		ldr	r3, .L292
 3639 0006 1B78     		ldrb	r3, [r3]
 3640 0008 054A     		ldr	r2, .L292+4
 3641 000a 3121     		movs	r1, #49
 3642 000c 1800     		movs	r0, r3
 3643 000e FFF7FEFF 		bl	I2CReadByte
1080:mpu6050.c     ****     return buffer[0];
 3644              		.loc 1 1080 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 84


 3645 0012 034B     		ldr	r3, .L292+4
 3646 0014 1B78     		ldrb	r3, [r3]
1081:mpu6050.c     **** }
 3647              		.loc 1 1081 0
 3648 0016 1800     		movs	r0, r3
 3649 0018 BD46     		mov	sp, r7
 3650              		@ sp needed
 3651 001a 80BD     		pop	{r7, pc}
 3652              	.L293:
 3653              		.align	2
 3654              	.L292:
 3655 001c 00000000 		.word	devAddr
 3656 0020 00000000 		.word	buffer
 3657              		.cfi_endproc
 3658              	.LFE76:
 3659              		.size	MPU6050_getSlave4Address, .-MPU6050_getSlave4Address
 3660              		.section	.text.MPU6050_setSlave4Address,"ax",%progbits
 3661              		.align	2
 3662              		.global	MPU6050_setSlave4Address
 3663              		.code	16
 3664              		.thumb_func
 3665              		.type	MPU6050_setSlave4Address, %function
 3666              	MPU6050_setSlave4Address:
 3667              	.LFB77:
1082:mpu6050.c     **** /** Set the I2C address of Slave 4.
1083:mpu6050.c     ****  * @param address New address for Slave 4
1084:mpu6050.c     ****  * @see getSlave4Address()
1085:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1086:mpu6050.c     ****  */
1087:mpu6050.c     **** void MPU6050_setSlave4Address(uint8_t address) {
 3668              		.loc 1 1087 0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 8
 3671              		@ frame_needed = 1, uses_anonymous_args = 0
 3672 0000 80B5     		push	{r7, lr}
 3673              		.cfi_def_cfa_offset 8
 3674              		.cfi_offset 7, -8
 3675              		.cfi_offset 14, -4
 3676 0002 82B0     		sub	sp, sp, #8
 3677              		.cfi_def_cfa_offset 16
 3678 0004 00AF     		add	r7, sp, #0
 3679              		.cfi_def_cfa_register 7
 3680 0006 0200     		movs	r2, r0
 3681 0008 FB1D     		adds	r3, r7, #7
 3682 000a 1A70     		strb	r2, [r3]
1088:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, address);
 3683              		.loc 1 1088 0
 3684 000c 054B     		ldr	r3, .L295
 3685 000e 1878     		ldrb	r0, [r3]
 3686 0010 FB1D     		adds	r3, r7, #7
 3687 0012 1B78     		ldrb	r3, [r3]
 3688 0014 1A00     		movs	r2, r3
 3689 0016 3121     		movs	r1, #49
 3690 0018 FFF7FEFF 		bl	I2CWriteByte
1089:mpu6050.c     **** }
 3691              		.loc 1 1089 0
 3692 001c C046     		nop
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 85


 3693 001e BD46     		mov	sp, r7
 3694 0020 02B0     		add	sp, sp, #8
 3695              		@ sp needed
 3696 0022 80BD     		pop	{r7, pc}
 3697              	.L296:
 3698              		.align	2
 3699              	.L295:
 3700 0024 00000000 		.word	devAddr
 3701              		.cfi_endproc
 3702              	.LFE77:
 3703              		.size	MPU6050_setSlave4Address, .-MPU6050_setSlave4Address
 3704              		.section	.text.MPU6050_getSlave4Register,"ax",%progbits
 3705              		.align	2
 3706              		.global	MPU6050_getSlave4Register
 3707              		.code	16
 3708              		.thumb_func
 3709              		.type	MPU6050_getSlave4Register, %function
 3710              	MPU6050_getSlave4Register:
 3711              	.LFB78:
1090:mpu6050.c     **** /** Get the active internal register for the Slave 4.
1091:mpu6050.c     ****  * Read/write operations for this slave will be done to whatever internal
1092:mpu6050.c     ****  * register address is stored in this MPU register.
1093:mpu6050.c     ****  *
1094:mpu6050.c     ****  * @return Current active register for Slave 4
1095:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_REG
1096:mpu6050.c     ****  */
1097:mpu6050.c     **** uint8_t MPU6050_getSlave4Register() {
 3712              		.loc 1 1097 0
 3713              		.cfi_startproc
 3714              		@ args = 0, pretend = 0, frame = 0
 3715              		@ frame_needed = 1, uses_anonymous_args = 0
 3716 0000 80B5     		push	{r7, lr}
 3717              		.cfi_def_cfa_offset 8
 3718              		.cfi_offset 7, -8
 3719              		.cfi_offset 14, -4
 3720 0002 00AF     		add	r7, sp, #0
 3721              		.cfi_def_cfa_register 7
1098:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_REG, buffer);
 3722              		.loc 1 1098 0
 3723 0004 054B     		ldr	r3, .L299
 3724 0006 1B78     		ldrb	r3, [r3]
 3725 0008 054A     		ldr	r2, .L299+4
 3726 000a 3221     		movs	r1, #50
 3727 000c 1800     		movs	r0, r3
 3728 000e FFF7FEFF 		bl	I2CReadByte
1099:mpu6050.c     ****     return buffer[0];
 3729              		.loc 1 1099 0
 3730 0012 034B     		ldr	r3, .L299+4
 3731 0014 1B78     		ldrb	r3, [r3]
1100:mpu6050.c     **** }
 3732              		.loc 1 1100 0
 3733 0016 1800     		movs	r0, r3
 3734 0018 BD46     		mov	sp, r7
 3735              		@ sp needed
 3736 001a 80BD     		pop	{r7, pc}
 3737              	.L300:
 3738              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 86


 3739              	.L299:
 3740 001c 00000000 		.word	devAddr
 3741 0020 00000000 		.word	buffer
 3742              		.cfi_endproc
 3743              	.LFE78:
 3744              		.size	MPU6050_getSlave4Register, .-MPU6050_getSlave4Register
 3745              		.section	.text.MPU6050_setSlave4Register,"ax",%progbits
 3746              		.align	2
 3747              		.global	MPU6050_setSlave4Register
 3748              		.code	16
 3749              		.thumb_func
 3750              		.type	MPU6050_setSlave4Register, %function
 3751              	MPU6050_setSlave4Register:
 3752              	.LFB79:
1101:mpu6050.c     **** /** Set the active internal register for Slave 4.
1102:mpu6050.c     ****  * @param reg New active register for Slave 4
1103:mpu6050.c     ****  * @see getSlave4Register()
1104:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_REG
1105:mpu6050.c     ****  */
1106:mpu6050.c     **** void MPU6050_setSlave4Register(uint8_t reg) {
 3753              		.loc 1 1106 0
 3754              		.cfi_startproc
 3755              		@ args = 0, pretend = 0, frame = 8
 3756              		@ frame_needed = 1, uses_anonymous_args = 0
 3757 0000 80B5     		push	{r7, lr}
 3758              		.cfi_def_cfa_offset 8
 3759              		.cfi_offset 7, -8
 3760              		.cfi_offset 14, -4
 3761 0002 82B0     		sub	sp, sp, #8
 3762              		.cfi_def_cfa_offset 16
 3763 0004 00AF     		add	r7, sp, #0
 3764              		.cfi_def_cfa_register 7
 3765 0006 0200     		movs	r2, r0
 3766 0008 FB1D     		adds	r3, r7, #7
 3767 000a 1A70     		strb	r2, [r3]
1107:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_REG, reg);
 3768              		.loc 1 1107 0
 3769 000c 054B     		ldr	r3, .L302
 3770 000e 1878     		ldrb	r0, [r3]
 3771 0010 FB1D     		adds	r3, r7, #7
 3772 0012 1B78     		ldrb	r3, [r3]
 3773 0014 1A00     		movs	r2, r3
 3774 0016 3221     		movs	r1, #50
 3775 0018 FFF7FEFF 		bl	I2CWriteByte
1108:mpu6050.c     **** }
 3776              		.loc 1 1108 0
 3777 001c C046     		nop
 3778 001e BD46     		mov	sp, r7
 3779 0020 02B0     		add	sp, sp, #8
 3780              		@ sp needed
 3781 0022 80BD     		pop	{r7, pc}
 3782              	.L303:
 3783              		.align	2
 3784              	.L302:
 3785 0024 00000000 		.word	devAddr
 3786              		.cfi_endproc
 3787              	.LFE79:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 87


 3788              		.size	MPU6050_setSlave4Register, .-MPU6050_setSlave4Register
 3789              		.section	.text.MPU6050_setSlave4OutputByte,"ax",%progbits
 3790              		.align	2
 3791              		.global	MPU6050_setSlave4OutputByte
 3792              		.code	16
 3793              		.thumb_func
 3794              		.type	MPU6050_setSlave4OutputByte, %function
 3795              	MPU6050_setSlave4OutputByte:
 3796              	.LFB80:
1109:mpu6050.c     **** /** Set new byte to write to Slave 4.
1110:mpu6050.c     ****  * This register stores the data to be written into the Slave 4. If I2C_SLV4_RW
1111:mpu6050.c     ****  * is set 1 (set to read), this register has no effect.
1112:mpu6050.c     ****  * @param data New byte to write to Slave 4
1113:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_DO
1114:mpu6050.c     ****  */
1115:mpu6050.c     **** void MPU6050_setSlave4OutputByte(uint8_t data) {
 3797              		.loc 1 1115 0
 3798              		.cfi_startproc
 3799              		@ args = 0, pretend = 0, frame = 8
 3800              		@ frame_needed = 1, uses_anonymous_args = 0
 3801 0000 80B5     		push	{r7, lr}
 3802              		.cfi_def_cfa_offset 8
 3803              		.cfi_offset 7, -8
 3804              		.cfi_offset 14, -4
 3805 0002 82B0     		sub	sp, sp, #8
 3806              		.cfi_def_cfa_offset 16
 3807 0004 00AF     		add	r7, sp, #0
 3808              		.cfi_def_cfa_register 7
 3809 0006 0200     		movs	r2, r0
 3810 0008 FB1D     		adds	r3, r7, #7
 3811 000a 1A70     		strb	r2, [r3]
1116:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_DO, data);
 3812              		.loc 1 1116 0
 3813 000c 054B     		ldr	r3, .L305
 3814 000e 1878     		ldrb	r0, [r3]
 3815 0010 FB1D     		adds	r3, r7, #7
 3816 0012 1B78     		ldrb	r3, [r3]
 3817 0014 1A00     		movs	r2, r3
 3818 0016 3321     		movs	r1, #51
 3819 0018 FFF7FEFF 		bl	I2CWriteByte
1117:mpu6050.c     **** }
 3820              		.loc 1 1117 0
 3821 001c C046     		nop
 3822 001e BD46     		mov	sp, r7
 3823 0020 02B0     		add	sp, sp, #8
 3824              		@ sp needed
 3825 0022 80BD     		pop	{r7, pc}
 3826              	.L306:
 3827              		.align	2
 3828              	.L305:
 3829 0024 00000000 		.word	devAddr
 3830              		.cfi_endproc
 3831              	.LFE80:
 3832              		.size	MPU6050_setSlave4OutputByte, .-MPU6050_setSlave4OutputByte
 3833              		.section	.text.MPU6050_getSlave4Enabled,"ax",%progbits
 3834              		.align	2
 3835              		.global	MPU6050_getSlave4Enabled
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 88


 3836              		.code	16
 3837              		.thumb_func
 3838              		.type	MPU6050_getSlave4Enabled, %function
 3839              	MPU6050_getSlave4Enabled:
 3840              	.LFB81:
1118:mpu6050.c     **** /** Get the enabled value for the Slave 4.
1119:mpu6050.c     ****  * When set to 1, this bit enables Slave 4 for data transfer operations. When
1120:mpu6050.c     ****  * cleared to 0, this bit disables Slave 4 from data transfer operations.
1121:mpu6050.c     ****  * @return Current enabled value for Slave 4
1122:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1123:mpu6050.c     ****  */
1124:mpu6050.c     **** bool MPU6050_getSlave4Enabled() {
 3841              		.loc 1 1124 0
 3842              		.cfi_startproc
 3843              		@ args = 0, pretend = 0, frame = 0
 3844              		@ frame_needed = 1, uses_anonymous_args = 0
 3845 0000 80B5     		push	{r7, lr}
 3846              		.cfi_def_cfa_offset 8
 3847              		.cfi_offset 7, -8
 3848              		.cfi_offset 14, -4
 3849 0002 00AF     		add	r7, sp, #0
 3850              		.cfi_def_cfa_register 7
1125:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, buffer);
 3851              		.loc 1 1125 0
 3852 0004 074B     		ldr	r3, .L309
 3853 0006 1878     		ldrb	r0, [r3]
 3854 0008 074B     		ldr	r3, .L309+4
 3855 000a 0722     		movs	r2, #7
 3856 000c 3421     		movs	r1, #52
 3857 000e FFF7FEFF 		bl	I2CReadBit
1126:mpu6050.c     ****     return buffer[0];
 3858              		.loc 1 1126 0
 3859 0012 054B     		ldr	r3, .L309+4
 3860 0014 1B78     		ldrb	r3, [r3]
 3861 0016 5A1E     		subs	r2, r3, #1
 3862 0018 9341     		sbcs	r3, r3, r2
 3863 001a DBB2     		uxtb	r3, r3
1127:mpu6050.c     **** }
 3864              		.loc 1 1127 0
 3865 001c 1800     		movs	r0, r3
 3866 001e BD46     		mov	sp, r7
 3867              		@ sp needed
 3868 0020 80BD     		pop	{r7, pc}
 3869              	.L310:
 3870 0022 C046     		.align	2
 3871              	.L309:
 3872 0024 00000000 		.word	devAddr
 3873 0028 00000000 		.word	buffer
 3874              		.cfi_endproc
 3875              	.LFE81:
 3876              		.size	MPU6050_getSlave4Enabled, .-MPU6050_getSlave4Enabled
 3877              		.section	.text.MPU6050_setSlave4Enabled,"ax",%progbits
 3878              		.align	2
 3879              		.global	MPU6050_setSlave4Enabled
 3880              		.code	16
 3881              		.thumb_func
 3882              		.type	MPU6050_setSlave4Enabled, %function
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 89


 3883              	MPU6050_setSlave4Enabled:
 3884              	.LFB82:
1128:mpu6050.c     **** /** Set the enabled value for Slave 4.
1129:mpu6050.c     ****  * @param enabled New enabled value for Slave 4
1130:mpu6050.c     ****  * @see getSlave4Enabled()
1131:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1132:mpu6050.c     ****  */
1133:mpu6050.c     **** void MPU6050_setSlave4Enabled(bool enabled) {
 3885              		.loc 1 1133 0
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 8
 3888              		@ frame_needed = 1, uses_anonymous_args = 0
 3889 0000 80B5     		push	{r7, lr}
 3890              		.cfi_def_cfa_offset 8
 3891              		.cfi_offset 7, -8
 3892              		.cfi_offset 14, -4
 3893 0002 82B0     		sub	sp, sp, #8
 3894              		.cfi_def_cfa_offset 16
 3895 0004 00AF     		add	r7, sp, #0
 3896              		.cfi_def_cfa_register 7
 3897 0006 0200     		movs	r2, r0
 3898 0008 FB1D     		adds	r3, r7, #7
 3899 000a 1A70     		strb	r2, [r3]
1134:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, enabled);
 3900              		.loc 1 1134 0
 3901 000c 054B     		ldr	r3, .L312
 3902 000e 1878     		ldrb	r0, [r3]
 3903 0010 FB1D     		adds	r3, r7, #7
 3904 0012 1B78     		ldrb	r3, [r3]
 3905 0014 0722     		movs	r2, #7
 3906 0016 3421     		movs	r1, #52
 3907 0018 FFF7FEFF 		bl	I2CWriteBit
1135:mpu6050.c     **** }
 3908              		.loc 1 1135 0
 3909 001c C046     		nop
 3910 001e BD46     		mov	sp, r7
 3911 0020 02B0     		add	sp, sp, #8
 3912              		@ sp needed
 3913 0022 80BD     		pop	{r7, pc}
 3914              	.L313:
 3915              		.align	2
 3916              	.L312:
 3917 0024 00000000 		.word	devAddr
 3918              		.cfi_endproc
 3919              	.LFE82:
 3920              		.size	MPU6050_setSlave4Enabled, .-MPU6050_setSlave4Enabled
 3921              		.section	.text.MPU6050_getSlave4InterruptEnabled,"ax",%progbits
 3922              		.align	2
 3923              		.global	MPU6050_getSlave4InterruptEnabled
 3924              		.code	16
 3925              		.thumb_func
 3926              		.type	MPU6050_getSlave4InterruptEnabled, %function
 3927              	MPU6050_getSlave4InterruptEnabled:
 3928              	.LFB83:
1136:mpu6050.c     **** /** Get the enabled value for Slave 4 transaction interrupts.
1137:mpu6050.c     ****  * When set to 1, this bit enables the generation of an interrupt signal upon
1138:mpu6050.c     ****  * completion of a Slave 4 transaction. When cleared to 0, this bit disables the
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 90


1139:mpu6050.c     ****  * generation of an interrupt signal upon completion of a Slave 4 transaction.
1140:mpu6050.c     ****  * The interrupt status can be observed in Register 54.
1141:mpu6050.c     ****  *
1142:mpu6050.c     ****  * @return Current enabled value for Slave 4 transaction interrupts.
1143:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1144:mpu6050.c     ****  */
1145:mpu6050.c     **** bool MPU6050_getSlave4InterruptEnabled() {
 3929              		.loc 1 1145 0
 3930              		.cfi_startproc
 3931              		@ args = 0, pretend = 0, frame = 0
 3932              		@ frame_needed = 1, uses_anonymous_args = 0
 3933 0000 80B5     		push	{r7, lr}
 3934              		.cfi_def_cfa_offset 8
 3935              		.cfi_offset 7, -8
 3936              		.cfi_offset 14, -4
 3937 0002 00AF     		add	r7, sp, #0
 3938              		.cfi_def_cfa_register 7
1146:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, buffer);
 3939              		.loc 1 1146 0
 3940 0004 074B     		ldr	r3, .L316
 3941 0006 1878     		ldrb	r0, [r3]
 3942 0008 074B     		ldr	r3, .L316+4
 3943 000a 0622     		movs	r2, #6
 3944 000c 3421     		movs	r1, #52
 3945 000e FFF7FEFF 		bl	I2CReadBit
1147:mpu6050.c     ****     return buffer[0];
 3946              		.loc 1 1147 0
 3947 0012 054B     		ldr	r3, .L316+4
 3948 0014 1B78     		ldrb	r3, [r3]
 3949 0016 5A1E     		subs	r2, r3, #1
 3950 0018 9341     		sbcs	r3, r3, r2
 3951 001a DBB2     		uxtb	r3, r3
1148:mpu6050.c     **** }
 3952              		.loc 1 1148 0
 3953 001c 1800     		movs	r0, r3
 3954 001e BD46     		mov	sp, r7
 3955              		@ sp needed
 3956 0020 80BD     		pop	{r7, pc}
 3957              	.L317:
 3958 0022 C046     		.align	2
 3959              	.L316:
 3960 0024 00000000 		.word	devAddr
 3961 0028 00000000 		.word	buffer
 3962              		.cfi_endproc
 3963              	.LFE83:
 3964              		.size	MPU6050_getSlave4InterruptEnabled, .-MPU6050_getSlave4InterruptEnabled
 3965              		.section	.text.MPU6050_setSlave4InterruptEnabled,"ax",%progbits
 3966              		.align	2
 3967              		.global	MPU6050_setSlave4InterruptEnabled
 3968              		.code	16
 3969              		.thumb_func
 3970              		.type	MPU6050_setSlave4InterruptEnabled, %function
 3971              	MPU6050_setSlave4InterruptEnabled:
 3972              	.LFB84:
1149:mpu6050.c     **** /** Set the enabled value for Slave 4 transaction interrupts.
1150:mpu6050.c     ****  * @param enabled New enabled value for Slave 4 transaction interrupts.
1151:mpu6050.c     ****  * @see getSlave4InterruptEnabled()
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 91


1152:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1153:mpu6050.c     ****  */
1154:mpu6050.c     **** void MPU6050_setSlave4InterruptEnabled(bool enabled) {
 3973              		.loc 1 1154 0
 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 8
 3976              		@ frame_needed = 1, uses_anonymous_args = 0
 3977 0000 80B5     		push	{r7, lr}
 3978              		.cfi_def_cfa_offset 8
 3979              		.cfi_offset 7, -8
 3980              		.cfi_offset 14, -4
 3981 0002 82B0     		sub	sp, sp, #8
 3982              		.cfi_def_cfa_offset 16
 3983 0004 00AF     		add	r7, sp, #0
 3984              		.cfi_def_cfa_register 7
 3985 0006 0200     		movs	r2, r0
 3986 0008 FB1D     		adds	r3, r7, #7
 3987 000a 1A70     		strb	r2, [r3]
1155:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, enabled);
 3988              		.loc 1 1155 0
 3989 000c 054B     		ldr	r3, .L319
 3990 000e 1878     		ldrb	r0, [r3]
 3991 0010 FB1D     		adds	r3, r7, #7
 3992 0012 1B78     		ldrb	r3, [r3]
 3993 0014 0622     		movs	r2, #6
 3994 0016 3421     		movs	r1, #52
 3995 0018 FFF7FEFF 		bl	I2CWriteBit
1156:mpu6050.c     **** }
 3996              		.loc 1 1156 0
 3997 001c C046     		nop
 3998 001e BD46     		mov	sp, r7
 3999 0020 02B0     		add	sp, sp, #8
 4000              		@ sp needed
 4001 0022 80BD     		pop	{r7, pc}
 4002              	.L320:
 4003              		.align	2
 4004              	.L319:
 4005 0024 00000000 		.word	devAddr
 4006              		.cfi_endproc
 4007              	.LFE84:
 4008              		.size	MPU6050_setSlave4InterruptEnabled, .-MPU6050_setSlave4InterruptEnabled
 4009              		.section	.text.MPU6050_getSlave4WriteMode,"ax",%progbits
 4010              		.align	2
 4011              		.global	MPU6050_getSlave4WriteMode
 4012              		.code	16
 4013              		.thumb_func
 4014              		.type	MPU6050_getSlave4WriteMode, %function
 4015              	MPU6050_getSlave4WriteMode:
 4016              	.LFB85:
1157:mpu6050.c     **** /** Get write mode for Slave 4.
1158:mpu6050.c     ****  * When set to 1, the transaction will read or write data only. When cleared to
1159:mpu6050.c     ****  * 0, the transaction will write a register address prior to reading or writing
1160:mpu6050.c     ****  * data. This should equal 0 when specifying the register address within the
1161:mpu6050.c     ****  * Slave device to/from which the ensuing data transaction will take place.
1162:mpu6050.c     ****  *
1163:mpu6050.c     ****  * @return Current write mode for Slave 4 (0 = register address + data, 1 = data only)
1164:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 92


1165:mpu6050.c     ****  */
1166:mpu6050.c     **** bool MPU6050_getSlave4WriteMode() {
 4017              		.loc 1 1166 0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 1, uses_anonymous_args = 0
 4021 0000 80B5     		push	{r7, lr}
 4022              		.cfi_def_cfa_offset 8
 4023              		.cfi_offset 7, -8
 4024              		.cfi_offset 14, -4
 4025 0002 00AF     		add	r7, sp, #0
 4026              		.cfi_def_cfa_register 7
1167:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, buffer);
 4027              		.loc 1 1167 0
 4028 0004 074B     		ldr	r3, .L323
 4029 0006 1878     		ldrb	r0, [r3]
 4030 0008 074B     		ldr	r3, .L323+4
 4031 000a 0522     		movs	r2, #5
 4032 000c 3421     		movs	r1, #52
 4033 000e FFF7FEFF 		bl	I2CReadBit
1168:mpu6050.c     ****     return buffer[0];
 4034              		.loc 1 1168 0
 4035 0012 054B     		ldr	r3, .L323+4
 4036 0014 1B78     		ldrb	r3, [r3]
 4037 0016 5A1E     		subs	r2, r3, #1
 4038 0018 9341     		sbcs	r3, r3, r2
 4039 001a DBB2     		uxtb	r3, r3
1169:mpu6050.c     **** }
 4040              		.loc 1 1169 0
 4041 001c 1800     		movs	r0, r3
 4042 001e BD46     		mov	sp, r7
 4043              		@ sp needed
 4044 0020 80BD     		pop	{r7, pc}
 4045              	.L324:
 4046 0022 C046     		.align	2
 4047              	.L323:
 4048 0024 00000000 		.word	devAddr
 4049 0028 00000000 		.word	buffer
 4050              		.cfi_endproc
 4051              	.LFE85:
 4052              		.size	MPU6050_getSlave4WriteMode, .-MPU6050_getSlave4WriteMode
 4053              		.section	.text.MPU6050_setSlave4WriteMode,"ax",%progbits
 4054              		.align	2
 4055              		.global	MPU6050_setSlave4WriteMode
 4056              		.code	16
 4057              		.thumb_func
 4058              		.type	MPU6050_setSlave4WriteMode, %function
 4059              	MPU6050_setSlave4WriteMode:
 4060              	.LFB86:
1170:mpu6050.c     **** /** Set write mode for the Slave 4.
1171:mpu6050.c     ****  * @param mode New write mode for Slave 4 (0 = register address + data, 1 = data only)
1172:mpu6050.c     ****  * @see getSlave4WriteMode()
1173:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1174:mpu6050.c     ****  */
1175:mpu6050.c     **** void MPU6050_setSlave4WriteMode(bool mode) {
 4061              		.loc 1 1175 0
 4062              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 93


 4063              		@ args = 0, pretend = 0, frame = 8
 4064              		@ frame_needed = 1, uses_anonymous_args = 0
 4065 0000 80B5     		push	{r7, lr}
 4066              		.cfi_def_cfa_offset 8
 4067              		.cfi_offset 7, -8
 4068              		.cfi_offset 14, -4
 4069 0002 82B0     		sub	sp, sp, #8
 4070              		.cfi_def_cfa_offset 16
 4071 0004 00AF     		add	r7, sp, #0
 4072              		.cfi_def_cfa_register 7
 4073 0006 0200     		movs	r2, r0
 4074 0008 FB1D     		adds	r3, r7, #7
 4075 000a 1A70     		strb	r2, [r3]
1176:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, mode);
 4076              		.loc 1 1176 0
 4077 000c 054B     		ldr	r3, .L326
 4078 000e 1878     		ldrb	r0, [r3]
 4079 0010 FB1D     		adds	r3, r7, #7
 4080 0012 1B78     		ldrb	r3, [r3]
 4081 0014 0522     		movs	r2, #5
 4082 0016 3421     		movs	r1, #52
 4083 0018 FFF7FEFF 		bl	I2CWriteBit
1177:mpu6050.c     **** }
 4084              		.loc 1 1177 0
 4085 001c C046     		nop
 4086 001e BD46     		mov	sp, r7
 4087 0020 02B0     		add	sp, sp, #8
 4088              		@ sp needed
 4089 0022 80BD     		pop	{r7, pc}
 4090              	.L327:
 4091              		.align	2
 4092              	.L326:
 4093 0024 00000000 		.word	devAddr
 4094              		.cfi_endproc
 4095              	.LFE86:
 4096              		.size	MPU6050_setSlave4WriteMode, .-MPU6050_setSlave4WriteMode
 4097              		.section	.text.MPU6050_getSlave4MasterDelay,"ax",%progbits
 4098              		.align	2
 4099              		.global	MPU6050_getSlave4MasterDelay
 4100              		.code	16
 4101              		.thumb_func
 4102              		.type	MPU6050_getSlave4MasterDelay, %function
 4103              	MPU6050_getSlave4MasterDelay:
 4104              	.LFB87:
1178:mpu6050.c     **** /** Get Slave 4 master delay value.
1179:mpu6050.c     ****  * This configures the reduced access rate of I2C slaves relative to the Sample
1180:mpu6050.c     ****  * Rate. When a slave's access rate is decreased relative to the Sample Rate,
1181:mpu6050.c     ****  * the slave is accessed every:
1182:mpu6050.c     ****  *
1183:mpu6050.c     ****  *     1 / (1 + I2C_MST_DLY) samples
1184:mpu6050.c     ****  *
1185:mpu6050.c     ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register 25) and
1186:mpu6050.c     ****  * DLPF_CFG (register 26). Whether a slave's access rate is reduced relative to
1187:mpu6050.c     ****  * the Sample Rate is determined by I2C_MST_DELAY_CTRL (register 103). For
1188:mpu6050.c     ****  * further information regarding the Sample Rate, please refer to register 25.
1189:mpu6050.c     ****  *
1190:mpu6050.c     ****  * @return Current Slave 4 master delay value
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 94


1191:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1192:mpu6050.c     ****  */
1193:mpu6050.c     **** uint8_t MPU6050_getSlave4MasterDelay() {
 4105              		.loc 1 1193 0
 4106              		.cfi_startproc
 4107              		@ args = 0, pretend = 0, frame = 0
 4108              		@ frame_needed = 1, uses_anonymous_args = 0
 4109 0000 80B5     		push	{r7, lr}
 4110              		.cfi_def_cfa_offset 8
 4111              		.cfi_offset 7, -8
 4112              		.cfi_offset 14, -4
 4113 0002 82B0     		sub	sp, sp, #8
 4114              		.cfi_def_cfa_offset 16
 4115 0004 02AF     		add	r7, sp, #8
 4116              		.cfi_def_cfa 7, 8
1194:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I2
 4117              		.loc 1 1194 0
 4118 0006 074B     		ldr	r3, .L330
 4119 0008 1878     		ldrb	r0, [r3]
 4120 000a 074B     		ldr	r3, .L330+4
 4121 000c 0093     		str	r3, [sp]
 4122 000e 0523     		movs	r3, #5
 4123 0010 0422     		movs	r2, #4
 4124 0012 3421     		movs	r1, #52
 4125 0014 FFF7FEFF 		bl	I2CReadBits
1195:mpu6050.c     ****     return buffer[0];
 4126              		.loc 1 1195 0
 4127 0018 034B     		ldr	r3, .L330+4
 4128 001a 1B78     		ldrb	r3, [r3]
1196:mpu6050.c     **** }
 4129              		.loc 1 1196 0
 4130 001c 1800     		movs	r0, r3
 4131 001e BD46     		mov	sp, r7
 4132              		@ sp needed
 4133 0020 80BD     		pop	{r7, pc}
 4134              	.L331:
 4135 0022 C046     		.align	2
 4136              	.L330:
 4137 0024 00000000 		.word	devAddr
 4138 0028 00000000 		.word	buffer
 4139              		.cfi_endproc
 4140              	.LFE87:
 4141              		.size	MPU6050_getSlave4MasterDelay, .-MPU6050_getSlave4MasterDelay
 4142              		.section	.text.MPU6050_setSlave4MasterDelay,"ax",%progbits
 4143              		.align	2
 4144              		.global	MPU6050_setSlave4MasterDelay
 4145              		.code	16
 4146              		.thumb_func
 4147              		.type	MPU6050_setSlave4MasterDelay, %function
 4148              	MPU6050_setSlave4MasterDelay:
 4149              	.LFB88:
1197:mpu6050.c     **** /** Set Slave 4 master delay value.
1198:mpu6050.c     ****  * @param delay New Slave 4 master delay value
1199:mpu6050.c     ****  * @see getSlave4MasterDelay()
1200:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1201:mpu6050.c     ****  */
1202:mpu6050.c     **** void MPU6050_setSlave4MasterDelay(uint8_t delay) {
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 95


 4150              		.loc 1 1202 0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 8
 4153              		@ frame_needed = 1, uses_anonymous_args = 0
 4154 0000 80B5     		push	{r7, lr}
 4155              		.cfi_def_cfa_offset 8
 4156              		.cfi_offset 7, -8
 4157              		.cfi_offset 14, -4
 4158 0002 84B0     		sub	sp, sp, #16
 4159              		.cfi_def_cfa_offset 24
 4160 0004 02AF     		add	r7, sp, #8
 4161              		.cfi_def_cfa 7, 16
 4162 0006 0200     		movs	r2, r0
 4163 0008 FB1D     		adds	r3, r7, #7
 4164 000a 1A70     		strb	r2, [r3]
1203:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I
 4165              		.loc 1 1203 0
 4166 000c 064B     		ldr	r3, .L333
 4167 000e 1878     		ldrb	r0, [r3]
 4168 0010 FB1D     		adds	r3, r7, #7
 4169 0012 1B78     		ldrb	r3, [r3]
 4170 0014 0093     		str	r3, [sp]
 4171 0016 0523     		movs	r3, #5
 4172 0018 0422     		movs	r2, #4
 4173 001a 3421     		movs	r1, #52
 4174 001c FFF7FEFF 		bl	I2CWriteBits
1204:mpu6050.c     **** }
 4175              		.loc 1 1204 0
 4176 0020 C046     		nop
 4177 0022 BD46     		mov	sp, r7
 4178 0024 02B0     		add	sp, sp, #8
 4179              		@ sp needed
 4180 0026 80BD     		pop	{r7, pc}
 4181              	.L334:
 4182              		.align	2
 4183              	.L333:
 4184 0028 00000000 		.word	devAddr
 4185              		.cfi_endproc
 4186              	.LFE88:
 4187              		.size	MPU6050_setSlave4MasterDelay, .-MPU6050_setSlave4MasterDelay
 4188              		.section	.text.MPU6050_getSlate4InputByte,"ax",%progbits
 4189              		.align	2
 4190              		.global	MPU6050_getSlate4InputByte
 4191              		.code	16
 4192              		.thumb_func
 4193              		.type	MPU6050_getSlate4InputByte, %function
 4194              	MPU6050_getSlate4InputByte:
 4195              	.LFB89:
1205:mpu6050.c     **** /** Get last available byte read from Slave 4.
1206:mpu6050.c     ****  * This register stores the data read from Slave 4. This field is populated
1207:mpu6050.c     ****  * after a read transaction.
1208:mpu6050.c     ****  * @return Last available byte read from to Slave 4
1209:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV4_DI
1210:mpu6050.c     ****  */
1211:mpu6050.c     **** uint8_t MPU6050_getSlate4InputByte() {
 4196              		.loc 1 1211 0
 4197              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 96


 4198              		@ args = 0, pretend = 0, frame = 0
 4199              		@ frame_needed = 1, uses_anonymous_args = 0
 4200 0000 80B5     		push	{r7, lr}
 4201              		.cfi_def_cfa_offset 8
 4202              		.cfi_offset 7, -8
 4203              		.cfi_offset 14, -4
 4204 0002 00AF     		add	r7, sp, #0
 4205              		.cfi_def_cfa_register 7
1212:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_DI, buffer);
 4206              		.loc 1 1212 0
 4207 0004 054B     		ldr	r3, .L337
 4208 0006 1B78     		ldrb	r3, [r3]
 4209 0008 054A     		ldr	r2, .L337+4
 4210 000a 3521     		movs	r1, #53
 4211 000c 1800     		movs	r0, r3
 4212 000e FFF7FEFF 		bl	I2CReadByte
1213:mpu6050.c     ****     return buffer[0];
 4213              		.loc 1 1213 0
 4214 0012 034B     		ldr	r3, .L337+4
 4215 0014 1B78     		ldrb	r3, [r3]
1214:mpu6050.c     **** }
 4216              		.loc 1 1214 0
 4217 0016 1800     		movs	r0, r3
 4218 0018 BD46     		mov	sp, r7
 4219              		@ sp needed
 4220 001a 80BD     		pop	{r7, pc}
 4221              	.L338:
 4222              		.align	2
 4223              	.L337:
 4224 001c 00000000 		.word	devAddr
 4225 0020 00000000 		.word	buffer
 4226              		.cfi_endproc
 4227              	.LFE89:
 4228              		.size	MPU6050_getSlate4InputByte, .-MPU6050_getSlate4InputByte
 4229              		.section	.text.MPU6050_getPassthroughStatus,"ax",%progbits
 4230              		.align	2
 4231              		.global	MPU6050_getPassthroughStatus
 4232              		.code	16
 4233              		.thumb_func
 4234              		.type	MPU6050_getPassthroughStatus, %function
 4235              	MPU6050_getPassthroughStatus:
 4236              	.LFB90:
1215:mpu6050.c     **** 
1216:mpu6050.c     **** // I2C_MST_STATUS register
1217:mpu6050.c     **** 
1218:mpu6050.c     **** /** Get FSYNC interrupt status.
1219:mpu6050.c     ****  * This bit reflects the status of the FSYNC interrupt from an external device
1220:mpu6050.c     ****  * into the MPU-60X0. This is used as a way to pass an external interrupt
1221:mpu6050.c     ****  * through the MPU-60X0 to the host application processor. When set to 1, this
1222:mpu6050.c     ****  * bit will cause an interrupt if FSYNC_INT_EN is asserted in INT_PIN_CFG
1223:mpu6050.c     ****  * (Register 55).
1224:mpu6050.c     ****  * @return FSYNC interrupt status
1225:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1226:mpu6050.c     ****  */
1227:mpu6050.c     **** bool MPU6050_getPassthroughStatus() {
 4237              		.loc 1 1227 0
 4238              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 97


 4239              		@ args = 0, pretend = 0, frame = 0
 4240              		@ frame_needed = 1, uses_anonymous_args = 0
 4241 0000 80B5     		push	{r7, lr}
 4242              		.cfi_def_cfa_offset 8
 4243              		.cfi_offset 7, -8
 4244              		.cfi_offset 14, -4
 4245 0002 00AF     		add	r7, sp, #0
 4246              		.cfi_def_cfa_register 7
1228:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_PASS_THROUGH_BIT, buffer);
 4247              		.loc 1 1228 0
 4248 0004 074B     		ldr	r3, .L341
 4249 0006 1878     		ldrb	r0, [r3]
 4250 0008 074B     		ldr	r3, .L341+4
 4251 000a 0722     		movs	r2, #7
 4252 000c 3621     		movs	r1, #54
 4253 000e FFF7FEFF 		bl	I2CReadBit
1229:mpu6050.c     ****     return buffer[0];
 4254              		.loc 1 1229 0
 4255 0012 054B     		ldr	r3, .L341+4
 4256 0014 1B78     		ldrb	r3, [r3]
 4257 0016 5A1E     		subs	r2, r3, #1
 4258 0018 9341     		sbcs	r3, r3, r2
 4259 001a DBB2     		uxtb	r3, r3
1230:mpu6050.c     **** }
 4260              		.loc 1 1230 0
 4261 001c 1800     		movs	r0, r3
 4262 001e BD46     		mov	sp, r7
 4263              		@ sp needed
 4264 0020 80BD     		pop	{r7, pc}
 4265              	.L342:
 4266 0022 C046     		.align	2
 4267              	.L341:
 4268 0024 00000000 		.word	devAddr
 4269 0028 00000000 		.word	buffer
 4270              		.cfi_endproc
 4271              	.LFE90:
 4272              		.size	MPU6050_getPassthroughStatus, .-MPU6050_getPassthroughStatus
 4273              		.section	.text.MPU6050_getSlave4IsDone,"ax",%progbits
 4274              		.align	2
 4275              		.global	MPU6050_getSlave4IsDone
 4276              		.code	16
 4277              		.thumb_func
 4278              		.type	MPU6050_getSlave4IsDone, %function
 4279              	MPU6050_getSlave4IsDone:
 4280              	.LFB91:
1231:mpu6050.c     **** /** Get Slave 4 transaction done status.
1232:mpu6050.c     ****  * Automatically sets to 1 when a Slave 4 transaction has completed. This
1233:mpu6050.c     ****  * triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register
1234:mpu6050.c     ****  * (Register 56) is asserted and if the SLV_4_DONE_INT bit is asserted in the
1235:mpu6050.c     ****  * I2C_SLV4_CTRL register (Register 52).
1236:mpu6050.c     ****  * @return Slave 4 transaction done status
1237:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1238:mpu6050.c     ****  */
1239:mpu6050.c     **** bool MPU6050_getSlave4IsDone() {
 4281              		.loc 1 1239 0
 4282              		.cfi_startproc
 4283              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 98


 4284              		@ frame_needed = 1, uses_anonymous_args = 0
 4285 0000 80B5     		push	{r7, lr}
 4286              		.cfi_def_cfa_offset 8
 4287              		.cfi_offset 7, -8
 4288              		.cfi_offset 14, -4
 4289 0002 00AF     		add	r7, sp, #0
 4290              		.cfi_def_cfa_register 7
1240:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_DONE_BIT, buffer);
 4291              		.loc 1 1240 0
 4292 0004 074B     		ldr	r3, .L345
 4293 0006 1878     		ldrb	r0, [r3]
 4294 0008 074B     		ldr	r3, .L345+4
 4295 000a 0622     		movs	r2, #6
 4296 000c 3621     		movs	r1, #54
 4297 000e FFF7FEFF 		bl	I2CReadBit
1241:mpu6050.c     ****     return buffer[0];
 4298              		.loc 1 1241 0
 4299 0012 054B     		ldr	r3, .L345+4
 4300 0014 1B78     		ldrb	r3, [r3]
 4301 0016 5A1E     		subs	r2, r3, #1
 4302 0018 9341     		sbcs	r3, r3, r2
 4303 001a DBB2     		uxtb	r3, r3
1242:mpu6050.c     **** }
 4304              		.loc 1 1242 0
 4305 001c 1800     		movs	r0, r3
 4306 001e BD46     		mov	sp, r7
 4307              		@ sp needed
 4308 0020 80BD     		pop	{r7, pc}
 4309              	.L346:
 4310 0022 C046     		.align	2
 4311              	.L345:
 4312 0024 00000000 		.word	devAddr
 4313 0028 00000000 		.word	buffer
 4314              		.cfi_endproc
 4315              	.LFE91:
 4316              		.size	MPU6050_getSlave4IsDone, .-MPU6050_getSlave4IsDone
 4317              		.section	.text.MPU6050_getLostArbitration,"ax",%progbits
 4318              		.align	2
 4319              		.global	MPU6050_getLostArbitration
 4320              		.code	16
 4321              		.thumb_func
 4322              		.type	MPU6050_getLostArbitration, %function
 4323              	MPU6050_getLostArbitration:
 4324              	.LFB92:
1243:mpu6050.c     **** /** Get master arbitration lost status.
1244:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master has lost arbitration of
1245:mpu6050.c     ****  * the auxiliary I2C bus (an error condition). This triggers an interrupt if the
1246:mpu6050.c     ****  * I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted.
1247:mpu6050.c     ****  * @return Master arbitration lost status
1248:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1249:mpu6050.c     ****  */
1250:mpu6050.c     **** bool MPU6050_getLostArbitration() {
 4325              		.loc 1 1250 0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 0
 4328              		@ frame_needed = 1, uses_anonymous_args = 0
 4329 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 99


 4330              		.cfi_def_cfa_offset 8
 4331              		.cfi_offset 7, -8
 4332              		.cfi_offset 14, -4
 4333 0002 00AF     		add	r7, sp, #0
 4334              		.cfi_def_cfa_register 7
1251:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_LOST_ARB_BIT, buffer);
 4335              		.loc 1 1251 0
 4336 0004 074B     		ldr	r3, .L349
 4337 0006 1878     		ldrb	r0, [r3]
 4338 0008 074B     		ldr	r3, .L349+4
 4339 000a 0522     		movs	r2, #5
 4340 000c 3621     		movs	r1, #54
 4341 000e FFF7FEFF 		bl	I2CReadBit
1252:mpu6050.c     ****     return buffer[0];
 4342              		.loc 1 1252 0
 4343 0012 054B     		ldr	r3, .L349+4
 4344 0014 1B78     		ldrb	r3, [r3]
 4345 0016 5A1E     		subs	r2, r3, #1
 4346 0018 9341     		sbcs	r3, r3, r2
 4347 001a DBB2     		uxtb	r3, r3
1253:mpu6050.c     **** }
 4348              		.loc 1 1253 0
 4349 001c 1800     		movs	r0, r3
 4350 001e BD46     		mov	sp, r7
 4351              		@ sp needed
 4352 0020 80BD     		pop	{r7, pc}
 4353              	.L350:
 4354 0022 C046     		.align	2
 4355              	.L349:
 4356 0024 00000000 		.word	devAddr
 4357 0028 00000000 		.word	buffer
 4358              		.cfi_endproc
 4359              	.LFE92:
 4360              		.size	MPU6050_getLostArbitration, .-MPU6050_getLostArbitration
 4361              		.section	.text.MPU6050_getSlave4Nack,"ax",%progbits
 4362              		.align	2
 4363              		.global	MPU6050_getSlave4Nack
 4364              		.code	16
 4365              		.thumb_func
 4366              		.type	MPU6050_getSlave4Nack, %function
 4367              	MPU6050_getSlave4Nack:
 4368              	.LFB93:
1254:mpu6050.c     **** /** Get Slave 4 NACK status.
1255:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1256:mpu6050.c     ****  * transaction with Slave 4. This triggers an interrupt if the I2C_MST_INT_EN
1257:mpu6050.c     ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1258:mpu6050.c     ****  * @return Slave 4 NACK interrupt status
1259:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1260:mpu6050.c     ****  */
1261:mpu6050.c     **** bool MPU6050_getSlave4Nack() {
 4369              		.loc 1 1261 0
 4370              		.cfi_startproc
 4371              		@ args = 0, pretend = 0, frame = 0
 4372              		@ frame_needed = 1, uses_anonymous_args = 0
 4373 0000 80B5     		push	{r7, lr}
 4374              		.cfi_def_cfa_offset 8
 4375              		.cfi_offset 7, -8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 100


 4376              		.cfi_offset 14, -4
 4377 0002 00AF     		add	r7, sp, #0
 4378              		.cfi_def_cfa_register 7
1262:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_NACK_BIT, buffer);
 4379              		.loc 1 1262 0
 4380 0004 074B     		ldr	r3, .L353
 4381 0006 1878     		ldrb	r0, [r3]
 4382 0008 074B     		ldr	r3, .L353+4
 4383 000a 0422     		movs	r2, #4
 4384 000c 3621     		movs	r1, #54
 4385 000e FFF7FEFF 		bl	I2CReadBit
1263:mpu6050.c     ****     return buffer[0];
 4386              		.loc 1 1263 0
 4387 0012 054B     		ldr	r3, .L353+4
 4388 0014 1B78     		ldrb	r3, [r3]
 4389 0016 5A1E     		subs	r2, r3, #1
 4390 0018 9341     		sbcs	r3, r3, r2
 4391 001a DBB2     		uxtb	r3, r3
1264:mpu6050.c     **** }
 4392              		.loc 1 1264 0
 4393 001c 1800     		movs	r0, r3
 4394 001e BD46     		mov	sp, r7
 4395              		@ sp needed
 4396 0020 80BD     		pop	{r7, pc}
 4397              	.L354:
 4398 0022 C046     		.align	2
 4399              	.L353:
 4400 0024 00000000 		.word	devAddr
 4401 0028 00000000 		.word	buffer
 4402              		.cfi_endproc
 4403              	.LFE93:
 4404              		.size	MPU6050_getSlave4Nack, .-MPU6050_getSlave4Nack
 4405              		.section	.text.MPU6050_getSlave3Nack,"ax",%progbits
 4406              		.align	2
 4407              		.global	MPU6050_getSlave3Nack
 4408              		.code	16
 4409              		.thumb_func
 4410              		.type	MPU6050_getSlave3Nack, %function
 4411              	MPU6050_getSlave3Nack:
 4412              	.LFB94:
1265:mpu6050.c     **** /** Get Slave 3 NACK status.
1266:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1267:mpu6050.c     ****  * transaction with Slave 3. This triggers an interrupt if the I2C_MST_INT_EN
1268:mpu6050.c     ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1269:mpu6050.c     ****  * @return Slave 3 NACK interrupt status
1270:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1271:mpu6050.c     ****  */
1272:mpu6050.c     **** bool MPU6050_getSlave3Nack() {
 4413              		.loc 1 1272 0
 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 0
 4416              		@ frame_needed = 1, uses_anonymous_args = 0
 4417 0000 80B5     		push	{r7, lr}
 4418              		.cfi_def_cfa_offset 8
 4419              		.cfi_offset 7, -8
 4420              		.cfi_offset 14, -4
 4421 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 101


 4422              		.cfi_def_cfa_register 7
1273:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV3_NACK_BIT, buffer);
 4423              		.loc 1 1273 0
 4424 0004 074B     		ldr	r3, .L357
 4425 0006 1878     		ldrb	r0, [r3]
 4426 0008 074B     		ldr	r3, .L357+4
 4427 000a 0322     		movs	r2, #3
 4428 000c 3621     		movs	r1, #54
 4429 000e FFF7FEFF 		bl	I2CReadBit
1274:mpu6050.c     ****     return buffer[0];
 4430              		.loc 1 1274 0
 4431 0012 054B     		ldr	r3, .L357+4
 4432 0014 1B78     		ldrb	r3, [r3]
 4433 0016 5A1E     		subs	r2, r3, #1
 4434 0018 9341     		sbcs	r3, r3, r2
 4435 001a DBB2     		uxtb	r3, r3
1275:mpu6050.c     **** }
 4436              		.loc 1 1275 0
 4437 001c 1800     		movs	r0, r3
 4438 001e BD46     		mov	sp, r7
 4439              		@ sp needed
 4440 0020 80BD     		pop	{r7, pc}
 4441              	.L358:
 4442 0022 C046     		.align	2
 4443              	.L357:
 4444 0024 00000000 		.word	devAddr
 4445 0028 00000000 		.word	buffer
 4446              		.cfi_endproc
 4447              	.LFE94:
 4448              		.size	MPU6050_getSlave3Nack, .-MPU6050_getSlave3Nack
 4449              		.section	.text.MPU6050_getSlave2Nack,"ax",%progbits
 4450              		.align	2
 4451              		.global	MPU6050_getSlave2Nack
 4452              		.code	16
 4453              		.thumb_func
 4454              		.type	MPU6050_getSlave2Nack, %function
 4455              	MPU6050_getSlave2Nack:
 4456              	.LFB95:
1276:mpu6050.c     **** /** Get Slave 2 NACK status.
1277:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1278:mpu6050.c     ****  * transaction with Slave 2. This triggers an interrupt if the I2C_MST_INT_EN
1279:mpu6050.c     ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1280:mpu6050.c     ****  * @return Slave 2 NACK interrupt status
1281:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1282:mpu6050.c     ****  */
1283:mpu6050.c     **** bool MPU6050_getSlave2Nack() {
 4457              		.loc 1 1283 0
 4458              		.cfi_startproc
 4459              		@ args = 0, pretend = 0, frame = 0
 4460              		@ frame_needed = 1, uses_anonymous_args = 0
 4461 0000 80B5     		push	{r7, lr}
 4462              		.cfi_def_cfa_offset 8
 4463              		.cfi_offset 7, -8
 4464              		.cfi_offset 14, -4
 4465 0002 00AF     		add	r7, sp, #0
 4466              		.cfi_def_cfa_register 7
1284:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV2_NACK_BIT, buffer);
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 102


 4467              		.loc 1 1284 0
 4468 0004 074B     		ldr	r3, .L361
 4469 0006 1878     		ldrb	r0, [r3]
 4470 0008 074B     		ldr	r3, .L361+4
 4471 000a 0222     		movs	r2, #2
 4472 000c 3621     		movs	r1, #54
 4473 000e FFF7FEFF 		bl	I2CReadBit
1285:mpu6050.c     ****     return buffer[0];
 4474              		.loc 1 1285 0
 4475 0012 054B     		ldr	r3, .L361+4
 4476 0014 1B78     		ldrb	r3, [r3]
 4477 0016 5A1E     		subs	r2, r3, #1
 4478 0018 9341     		sbcs	r3, r3, r2
 4479 001a DBB2     		uxtb	r3, r3
1286:mpu6050.c     **** }
 4480              		.loc 1 1286 0
 4481 001c 1800     		movs	r0, r3
 4482 001e BD46     		mov	sp, r7
 4483              		@ sp needed
 4484 0020 80BD     		pop	{r7, pc}
 4485              	.L362:
 4486 0022 C046     		.align	2
 4487              	.L361:
 4488 0024 00000000 		.word	devAddr
 4489 0028 00000000 		.word	buffer
 4490              		.cfi_endproc
 4491              	.LFE95:
 4492              		.size	MPU6050_getSlave2Nack, .-MPU6050_getSlave2Nack
 4493              		.section	.text.MPU6050_getSlave1Nack,"ax",%progbits
 4494              		.align	2
 4495              		.global	MPU6050_getSlave1Nack
 4496              		.code	16
 4497              		.thumb_func
 4498              		.type	MPU6050_getSlave1Nack, %function
 4499              	MPU6050_getSlave1Nack:
 4500              	.LFB96:
1287:mpu6050.c     **** /** Get Slave 1 NACK status.
1288:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1289:mpu6050.c     ****  * transaction with Slave 1. This triggers an interrupt if the I2C_MST_INT_EN
1290:mpu6050.c     ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1291:mpu6050.c     ****  * @return Slave 1 NACK interrupt status
1292:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1293:mpu6050.c     ****  */
1294:mpu6050.c     **** bool MPU6050_getSlave1Nack() {
 4501              		.loc 1 1294 0
 4502              		.cfi_startproc
 4503              		@ args = 0, pretend = 0, frame = 0
 4504              		@ frame_needed = 1, uses_anonymous_args = 0
 4505 0000 80B5     		push	{r7, lr}
 4506              		.cfi_def_cfa_offset 8
 4507              		.cfi_offset 7, -8
 4508              		.cfi_offset 14, -4
 4509 0002 00AF     		add	r7, sp, #0
 4510              		.cfi_def_cfa_register 7
1295:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV1_NACK_BIT, buffer);
 4511              		.loc 1 1295 0
 4512 0004 074B     		ldr	r3, .L365
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 103


 4513 0006 1878     		ldrb	r0, [r3]
 4514 0008 074B     		ldr	r3, .L365+4
 4515 000a 0122     		movs	r2, #1
 4516 000c 3621     		movs	r1, #54
 4517 000e FFF7FEFF 		bl	I2CReadBit
1296:mpu6050.c     ****     return buffer[0];
 4518              		.loc 1 1296 0
 4519 0012 054B     		ldr	r3, .L365+4
 4520 0014 1B78     		ldrb	r3, [r3]
 4521 0016 5A1E     		subs	r2, r3, #1
 4522 0018 9341     		sbcs	r3, r3, r2
 4523 001a DBB2     		uxtb	r3, r3
1297:mpu6050.c     **** }
 4524              		.loc 1 1297 0
 4525 001c 1800     		movs	r0, r3
 4526 001e BD46     		mov	sp, r7
 4527              		@ sp needed
 4528 0020 80BD     		pop	{r7, pc}
 4529              	.L366:
 4530 0022 C046     		.align	2
 4531              	.L365:
 4532 0024 00000000 		.word	devAddr
 4533 0028 00000000 		.word	buffer
 4534              		.cfi_endproc
 4535              	.LFE96:
 4536              		.size	MPU6050_getSlave1Nack, .-MPU6050_getSlave1Nack
 4537              		.section	.text.MPU6050_getSlave0Nack,"ax",%progbits
 4538              		.align	2
 4539              		.global	MPU6050_getSlave0Nack
 4540              		.code	16
 4541              		.thumb_func
 4542              		.type	MPU6050_getSlave0Nack, %function
 4543              	MPU6050_getSlave0Nack:
 4544              	.LFB97:
1298:mpu6050.c     **** /** Get Slave 0 NACK status.
1299:mpu6050.c     ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1300:mpu6050.c     ****  * transaction with Slave 0. This triggers an interrupt if the I2C_MST_INT_EN
1301:mpu6050.c     ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1302:mpu6050.c     ****  * @return Slave 0 NACK interrupt status
1303:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_STATUS
1304:mpu6050.c     ****  */
1305:mpu6050.c     **** bool MPU6050_getSlave0Nack() {
 4545              		.loc 1 1305 0
 4546              		.cfi_startproc
 4547              		@ args = 0, pretend = 0, frame = 0
 4548              		@ frame_needed = 1, uses_anonymous_args = 0
 4549 0000 80B5     		push	{r7, lr}
 4550              		.cfi_def_cfa_offset 8
 4551              		.cfi_offset 7, -8
 4552              		.cfi_offset 14, -4
 4553 0002 00AF     		add	r7, sp, #0
 4554              		.cfi_def_cfa_register 7
1306:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV0_NACK_BIT, buffer);
 4555              		.loc 1 1306 0
 4556 0004 074B     		ldr	r3, .L369
 4557 0006 1878     		ldrb	r0, [r3]
 4558 0008 074B     		ldr	r3, .L369+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 104


 4559 000a 0022     		movs	r2, #0
 4560 000c 3621     		movs	r1, #54
 4561 000e FFF7FEFF 		bl	I2CReadBit
1307:mpu6050.c     ****     return buffer[0];
 4562              		.loc 1 1307 0
 4563 0012 054B     		ldr	r3, .L369+4
 4564 0014 1B78     		ldrb	r3, [r3]
 4565 0016 5A1E     		subs	r2, r3, #1
 4566 0018 9341     		sbcs	r3, r3, r2
 4567 001a DBB2     		uxtb	r3, r3
1308:mpu6050.c     **** }
 4568              		.loc 1 1308 0
 4569 001c 1800     		movs	r0, r3
 4570 001e BD46     		mov	sp, r7
 4571              		@ sp needed
 4572 0020 80BD     		pop	{r7, pc}
 4573              	.L370:
 4574 0022 C046     		.align	2
 4575              	.L369:
 4576 0024 00000000 		.word	devAddr
 4577 0028 00000000 		.word	buffer
 4578              		.cfi_endproc
 4579              	.LFE97:
 4580              		.size	MPU6050_getSlave0Nack, .-MPU6050_getSlave0Nack
 4581              		.section	.text.MPU6050_getInterruptMode,"ax",%progbits
 4582              		.align	2
 4583              		.global	MPU6050_getInterruptMode
 4584              		.code	16
 4585              		.thumb_func
 4586              		.type	MPU6050_getInterruptMode, %function
 4587              	MPU6050_getInterruptMode:
 4588              	.LFB98:
1309:mpu6050.c     **** 
1310:mpu6050.c     **** // INT_PIN_CFG register
1311:mpu6050.c     **** 
1312:mpu6050.c     **** /** Get interrupt logic level mode.
1313:mpu6050.c     ****  * Will be set 0 for active-high, 1 for active-low.
1314:mpu6050.c     ****  * @return Current interrupt mode (0=active-high, 1=active-low)
1315:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1316:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
1317:mpu6050.c     ****  */
1318:mpu6050.c     **** bool MPU6050_getInterruptMode() {
 4589              		.loc 1 1318 0
 4590              		.cfi_startproc
 4591              		@ args = 0, pretend = 0, frame = 0
 4592              		@ frame_needed = 1, uses_anonymous_args = 0
 4593 0000 80B5     		push	{r7, lr}
 4594              		.cfi_def_cfa_offset 8
 4595              		.cfi_offset 7, -8
 4596              		.cfi_offset 14, -4
 4597 0002 00AF     		add	r7, sp, #0
 4598              		.cfi_def_cfa_register 7
1319:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, buffer);
 4599              		.loc 1 1319 0
 4600 0004 074B     		ldr	r3, .L373
 4601 0006 1878     		ldrb	r0, [r3]
 4602 0008 074B     		ldr	r3, .L373+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 105


 4603 000a 0722     		movs	r2, #7
 4604 000c 3721     		movs	r1, #55
 4605 000e FFF7FEFF 		bl	I2CReadBit
1320:mpu6050.c     ****     return buffer[0];
 4606              		.loc 1 1320 0
 4607 0012 054B     		ldr	r3, .L373+4
 4608 0014 1B78     		ldrb	r3, [r3]
 4609 0016 5A1E     		subs	r2, r3, #1
 4610 0018 9341     		sbcs	r3, r3, r2
 4611 001a DBB2     		uxtb	r3, r3
1321:mpu6050.c     **** }
 4612              		.loc 1 1321 0
 4613 001c 1800     		movs	r0, r3
 4614 001e BD46     		mov	sp, r7
 4615              		@ sp needed
 4616 0020 80BD     		pop	{r7, pc}
 4617              	.L374:
 4618 0022 C046     		.align	2
 4619              	.L373:
 4620 0024 00000000 		.word	devAddr
 4621 0028 00000000 		.word	buffer
 4622              		.cfi_endproc
 4623              	.LFE98:
 4624              		.size	MPU6050_getInterruptMode, .-MPU6050_getInterruptMode
 4625              		.section	.text.MPU6050_setInterruptMode,"ax",%progbits
 4626              		.align	2
 4627              		.global	MPU6050_setInterruptMode
 4628              		.code	16
 4629              		.thumb_func
 4630              		.type	MPU6050_setInterruptMode, %function
 4631              	MPU6050_setInterruptMode:
 4632              	.LFB99:
1322:mpu6050.c     **** /** Set interrupt logic level mode.
1323:mpu6050.c     ****  * @param mode New interrupt mode (0=active-high, 1=active-low)
1324:mpu6050.c     ****  * @see getInterruptMode()
1325:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1326:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
1327:mpu6050.c     ****  */
1328:mpu6050.c     **** void MPU6050_setInterruptMode(bool mode) {
 4633              		.loc 1 1328 0
 4634              		.cfi_startproc
 4635              		@ args = 0, pretend = 0, frame = 8
 4636              		@ frame_needed = 1, uses_anonymous_args = 0
 4637 0000 80B5     		push	{r7, lr}
 4638              		.cfi_def_cfa_offset 8
 4639              		.cfi_offset 7, -8
 4640              		.cfi_offset 14, -4
 4641 0002 82B0     		sub	sp, sp, #8
 4642              		.cfi_def_cfa_offset 16
 4643 0004 00AF     		add	r7, sp, #0
 4644              		.cfi_def_cfa_register 7
 4645 0006 0200     		movs	r2, r0
 4646 0008 FB1D     		adds	r3, r7, #7
 4647 000a 1A70     		strb	r2, [r3]
1329:mpu6050.c     ****    I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);
 4648              		.loc 1 1329 0
 4649 000c 054B     		ldr	r3, .L376
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 106


 4650 000e 1878     		ldrb	r0, [r3]
 4651 0010 FB1D     		adds	r3, r7, #7
 4652 0012 1B78     		ldrb	r3, [r3]
 4653 0014 0722     		movs	r2, #7
 4654 0016 3721     		movs	r1, #55
 4655 0018 FFF7FEFF 		bl	I2CWriteBit
1330:mpu6050.c     **** }
 4656              		.loc 1 1330 0
 4657 001c C046     		nop
 4658 001e BD46     		mov	sp, r7
 4659 0020 02B0     		add	sp, sp, #8
 4660              		@ sp needed
 4661 0022 80BD     		pop	{r7, pc}
 4662              	.L377:
 4663              		.align	2
 4664              	.L376:
 4665 0024 00000000 		.word	devAddr
 4666              		.cfi_endproc
 4667              	.LFE99:
 4668              		.size	MPU6050_setInterruptMode, .-MPU6050_setInterruptMode
 4669              		.section	.text.MPU6050_getInterruptDrive,"ax",%progbits
 4670              		.align	2
 4671              		.global	MPU6050_getInterruptDrive
 4672              		.code	16
 4673              		.thumb_func
 4674              		.type	MPU6050_getInterruptDrive, %function
 4675              	MPU6050_getInterruptDrive:
 4676              	.LFB100:
1331:mpu6050.c     **** /** Get interrupt drive mode.
1332:mpu6050.c     ****  * Will be set 0 for push-pull, 1 for open-drain.
1333:mpu6050.c     ****  * @return Current interrupt drive mode (0=push-pull, 1=open-drain)
1334:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1335:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1336:mpu6050.c     ****  */
1337:mpu6050.c     **** bool MPU6050_getInterruptDrive() {
 4677              		.loc 1 1337 0
 4678              		.cfi_startproc
 4679              		@ args = 0, pretend = 0, frame = 0
 4680              		@ frame_needed = 1, uses_anonymous_args = 0
 4681 0000 80B5     		push	{r7, lr}
 4682              		.cfi_def_cfa_offset 8
 4683              		.cfi_offset 7, -8
 4684              		.cfi_offset 14, -4
 4685 0002 00AF     		add	r7, sp, #0
 4686              		.cfi_def_cfa_register 7
1338:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, buffer);
 4687              		.loc 1 1338 0
 4688 0004 074B     		ldr	r3, .L380
 4689 0006 1878     		ldrb	r0, [r3]
 4690 0008 074B     		ldr	r3, .L380+4
 4691 000a 0622     		movs	r2, #6
 4692 000c 3721     		movs	r1, #55
 4693 000e FFF7FEFF 		bl	I2CReadBit
1339:mpu6050.c     ****     return buffer[0];
 4694              		.loc 1 1339 0
 4695 0012 054B     		ldr	r3, .L380+4
 4696 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 107


 4697 0016 5A1E     		subs	r2, r3, #1
 4698 0018 9341     		sbcs	r3, r3, r2
 4699 001a DBB2     		uxtb	r3, r3
1340:mpu6050.c     **** }
 4700              		.loc 1 1340 0
 4701 001c 1800     		movs	r0, r3
 4702 001e BD46     		mov	sp, r7
 4703              		@ sp needed
 4704 0020 80BD     		pop	{r7, pc}
 4705              	.L381:
 4706 0022 C046     		.align	2
 4707              	.L380:
 4708 0024 00000000 		.word	devAddr
 4709 0028 00000000 		.word	buffer
 4710              		.cfi_endproc
 4711              	.LFE100:
 4712              		.size	MPU6050_getInterruptDrive, .-MPU6050_getInterruptDrive
 4713              		.section	.text.MPU6050_setInterruptDrive,"ax",%progbits
 4714              		.align	2
 4715              		.global	MPU6050_setInterruptDrive
 4716              		.code	16
 4717              		.thumb_func
 4718              		.type	MPU6050_setInterruptDrive, %function
 4719              	MPU6050_setInterruptDrive:
 4720              	.LFB101:
1341:mpu6050.c     **** /** Set interrupt drive mode.
1342:mpu6050.c     ****  * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)
1343:mpu6050.c     ****  * @see getInterruptDrive()
1344:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1345:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1346:mpu6050.c     ****  */
1347:mpu6050.c     **** void MPU6050_setInterruptDrive(bool drive) {
 4721              		.loc 1 1347 0
 4722              		.cfi_startproc
 4723              		@ args = 0, pretend = 0, frame = 8
 4724              		@ frame_needed = 1, uses_anonymous_args = 0
 4725 0000 80B5     		push	{r7, lr}
 4726              		.cfi_def_cfa_offset 8
 4727              		.cfi_offset 7, -8
 4728              		.cfi_offset 14, -4
 4729 0002 82B0     		sub	sp, sp, #8
 4730              		.cfi_def_cfa_offset 16
 4731 0004 00AF     		add	r7, sp, #0
 4732              		.cfi_def_cfa_register 7
 4733 0006 0200     		movs	r2, r0
 4734 0008 FB1D     		adds	r3, r7, #7
 4735 000a 1A70     		strb	r2, [r3]
1348:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);
 4736              		.loc 1 1348 0
 4737 000c 054B     		ldr	r3, .L383
 4738 000e 1878     		ldrb	r0, [r3]
 4739 0010 FB1D     		adds	r3, r7, #7
 4740 0012 1B78     		ldrb	r3, [r3]
 4741 0014 0622     		movs	r2, #6
 4742 0016 3721     		movs	r1, #55
 4743 0018 FFF7FEFF 		bl	I2CWriteBit
1349:mpu6050.c     **** }
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 108


 4744              		.loc 1 1349 0
 4745 001c C046     		nop
 4746 001e BD46     		mov	sp, r7
 4747 0020 02B0     		add	sp, sp, #8
 4748              		@ sp needed
 4749 0022 80BD     		pop	{r7, pc}
 4750              	.L384:
 4751              		.align	2
 4752              	.L383:
 4753 0024 00000000 		.word	devAddr
 4754              		.cfi_endproc
 4755              	.LFE101:
 4756              		.size	MPU6050_setInterruptDrive, .-MPU6050_setInterruptDrive
 4757              		.section	.text.MPU6050_getInterruptLatch,"ax",%progbits
 4758              		.align	2
 4759              		.global	MPU6050_getInterruptLatch
 4760              		.code	16
 4761              		.thumb_func
 4762              		.type	MPU6050_getInterruptLatch, %function
 4763              	MPU6050_getInterruptLatch:
 4764              	.LFB102:
1350:mpu6050.c     **** /** Get interrupt latch mode.
1351:mpu6050.c     ****  * Will be set 0 for 50us-pulse, 1 for latch-until-int-cleared.
1352:mpu6050.c     ****  * @return Current latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1353:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1354:mpu6050.c     ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1355:mpu6050.c     ****  */
1356:mpu6050.c     **** bool MPU6050_getInterruptLatch() {
 4765              		.loc 1 1356 0
 4766              		.cfi_startproc
 4767              		@ args = 0, pretend = 0, frame = 0
 4768              		@ frame_needed = 1, uses_anonymous_args = 0
 4769 0000 80B5     		push	{r7, lr}
 4770              		.cfi_def_cfa_offset 8
 4771              		.cfi_offset 7, -8
 4772              		.cfi_offset 14, -4
 4773 0002 00AF     		add	r7, sp, #0
 4774              		.cfi_def_cfa_register 7
1357:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, buffer);
 4775              		.loc 1 1357 0
 4776 0004 074B     		ldr	r3, .L387
 4777 0006 1878     		ldrb	r0, [r3]
 4778 0008 074B     		ldr	r3, .L387+4
 4779 000a 0522     		movs	r2, #5
 4780 000c 3721     		movs	r1, #55
 4781 000e FFF7FEFF 		bl	I2CReadBit
1358:mpu6050.c     ****     return buffer[0];
 4782              		.loc 1 1358 0
 4783 0012 054B     		ldr	r3, .L387+4
 4784 0014 1B78     		ldrb	r3, [r3]
 4785 0016 5A1E     		subs	r2, r3, #1
 4786 0018 9341     		sbcs	r3, r3, r2
 4787 001a DBB2     		uxtb	r3, r3
1359:mpu6050.c     **** }
 4788              		.loc 1 1359 0
 4789 001c 1800     		movs	r0, r3
 4790 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 109


 4791              		@ sp needed
 4792 0020 80BD     		pop	{r7, pc}
 4793              	.L388:
 4794 0022 C046     		.align	2
 4795              	.L387:
 4796 0024 00000000 		.word	devAddr
 4797 0028 00000000 		.word	buffer
 4798              		.cfi_endproc
 4799              	.LFE102:
 4800              		.size	MPU6050_getInterruptLatch, .-MPU6050_getInterruptLatch
 4801              		.section	.text.MPU6050_setInterruptLatch,"ax",%progbits
 4802              		.align	2
 4803              		.global	MPU6050_setInterruptLatch
 4804              		.code	16
 4805              		.thumb_func
 4806              		.type	MPU6050_setInterruptLatch, %function
 4807              	MPU6050_setInterruptLatch:
 4808              	.LFB103:
1360:mpu6050.c     **** /** Set interrupt latch mode.
1361:mpu6050.c     ****  * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1362:mpu6050.c     ****  * @see getInterruptLatch()
1363:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1364:mpu6050.c     ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1365:mpu6050.c     ****  */
1366:mpu6050.c     **** void MPU6050_setInterruptLatch(bool latch) {
 4809              		.loc 1 1366 0
 4810              		.cfi_startproc
 4811              		@ args = 0, pretend = 0, frame = 8
 4812              		@ frame_needed = 1, uses_anonymous_args = 0
 4813 0000 80B5     		push	{r7, lr}
 4814              		.cfi_def_cfa_offset 8
 4815              		.cfi_offset 7, -8
 4816              		.cfi_offset 14, -4
 4817 0002 82B0     		sub	sp, sp, #8
 4818              		.cfi_def_cfa_offset 16
 4819 0004 00AF     		add	r7, sp, #0
 4820              		.cfi_def_cfa_register 7
 4821 0006 0200     		movs	r2, r0
 4822 0008 FB1D     		adds	r3, r7, #7
 4823 000a 1A70     		strb	r2, [r3]
1367:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);
 4824              		.loc 1 1367 0
 4825 000c 054B     		ldr	r3, .L390
 4826 000e 1878     		ldrb	r0, [r3]
 4827 0010 FB1D     		adds	r3, r7, #7
 4828 0012 1B78     		ldrb	r3, [r3]
 4829 0014 0522     		movs	r2, #5
 4830 0016 3721     		movs	r1, #55
 4831 0018 FFF7FEFF 		bl	I2CWriteBit
1368:mpu6050.c     **** }
 4832              		.loc 1 1368 0
 4833 001c C046     		nop
 4834 001e BD46     		mov	sp, r7
 4835 0020 02B0     		add	sp, sp, #8
 4836              		@ sp needed
 4837 0022 80BD     		pop	{r7, pc}
 4838              	.L391:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 110


 4839              		.align	2
 4840              	.L390:
 4841 0024 00000000 		.word	devAddr
 4842              		.cfi_endproc
 4843              	.LFE103:
 4844              		.size	MPU6050_setInterruptLatch, .-MPU6050_setInterruptLatch
 4845              		.section	.text.MPU6050_getInterruptLatchClear,"ax",%progbits
 4846              		.align	2
 4847              		.global	MPU6050_getInterruptLatchClear
 4848              		.code	16
 4849              		.thumb_func
 4850              		.type	MPU6050_getInterruptLatchClear, %function
 4851              	MPU6050_getInterruptLatchClear:
 4852              	.LFB104:
1369:mpu6050.c     **** /** Get interrupt latch clear mode.
1370:mpu6050.c     ****  * Will be set 0 for status-read-only, 1 for any-register-read.
1371:mpu6050.c     ****  * @return Current latch clear mode (0=status-read-only, 1=any-register-read)
1372:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1373:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1374:mpu6050.c     ****  */
1375:mpu6050.c     **** bool MPU6050_getInterruptLatchClear() {
 4853              		.loc 1 1375 0
 4854              		.cfi_startproc
 4855              		@ args = 0, pretend = 0, frame = 0
 4856              		@ frame_needed = 1, uses_anonymous_args = 0
 4857 0000 80B5     		push	{r7, lr}
 4858              		.cfi_def_cfa_offset 8
 4859              		.cfi_offset 7, -8
 4860              		.cfi_offset 14, -4
 4861 0002 00AF     		add	r7, sp, #0
 4862              		.cfi_def_cfa_register 7
1376:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, buffer);
 4863              		.loc 1 1376 0
 4864 0004 074B     		ldr	r3, .L394
 4865 0006 1878     		ldrb	r0, [r3]
 4866 0008 074B     		ldr	r3, .L394+4
 4867 000a 0422     		movs	r2, #4
 4868 000c 3721     		movs	r1, #55
 4869 000e FFF7FEFF 		bl	I2CReadBit
1377:mpu6050.c     ****     return buffer[0];
 4870              		.loc 1 1377 0
 4871 0012 054B     		ldr	r3, .L394+4
 4872 0014 1B78     		ldrb	r3, [r3]
 4873 0016 5A1E     		subs	r2, r3, #1
 4874 0018 9341     		sbcs	r3, r3, r2
 4875 001a DBB2     		uxtb	r3, r3
1378:mpu6050.c     **** }
 4876              		.loc 1 1378 0
 4877 001c 1800     		movs	r0, r3
 4878 001e BD46     		mov	sp, r7
 4879              		@ sp needed
 4880 0020 80BD     		pop	{r7, pc}
 4881              	.L395:
 4882 0022 C046     		.align	2
 4883              	.L394:
 4884 0024 00000000 		.word	devAddr
 4885 0028 00000000 		.word	buffer
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 111


 4886              		.cfi_endproc
 4887              	.LFE104:
 4888              		.size	MPU6050_getInterruptLatchClear, .-MPU6050_getInterruptLatchClear
 4889              		.section	.text.MPU6050_setInterruptLatchClear,"ax",%progbits
 4890              		.align	2
 4891              		.global	MPU6050_setInterruptLatchClear
 4892              		.code	16
 4893              		.thumb_func
 4894              		.type	MPU6050_setInterruptLatchClear, %function
 4895              	MPU6050_setInterruptLatchClear:
 4896              	.LFB105:
1379:mpu6050.c     **** /** Set interrupt latch clear mode.
1380:mpu6050.c     ****  * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)
1381:mpu6050.c     ****  * @see getInterruptLatchClear()
1382:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1383:mpu6050.c     ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1384:mpu6050.c     ****  */
1385:mpu6050.c     **** void MPU6050_setInterruptLatchClear(bool clear) {
 4897              		.loc 1 1385 0
 4898              		.cfi_startproc
 4899              		@ args = 0, pretend = 0, frame = 8
 4900              		@ frame_needed = 1, uses_anonymous_args = 0
 4901 0000 80B5     		push	{r7, lr}
 4902              		.cfi_def_cfa_offset 8
 4903              		.cfi_offset 7, -8
 4904              		.cfi_offset 14, -4
 4905 0002 82B0     		sub	sp, sp, #8
 4906              		.cfi_def_cfa_offset 16
 4907 0004 00AF     		add	r7, sp, #0
 4908              		.cfi_def_cfa_register 7
 4909 0006 0200     		movs	r2, r0
 4910 0008 FB1D     		adds	r3, r7, #7
 4911 000a 1A70     		strb	r2, [r3]
1386:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);
 4912              		.loc 1 1386 0
 4913 000c 054B     		ldr	r3, .L397
 4914 000e 1878     		ldrb	r0, [r3]
 4915 0010 FB1D     		adds	r3, r7, #7
 4916 0012 1B78     		ldrb	r3, [r3]
 4917 0014 0422     		movs	r2, #4
 4918 0016 3721     		movs	r1, #55
 4919 0018 FFF7FEFF 		bl	I2CWriteBit
1387:mpu6050.c     **** }
 4920              		.loc 1 1387 0
 4921 001c C046     		nop
 4922 001e BD46     		mov	sp, r7
 4923 0020 02B0     		add	sp, sp, #8
 4924              		@ sp needed
 4925 0022 80BD     		pop	{r7, pc}
 4926              	.L398:
 4927              		.align	2
 4928              	.L397:
 4929 0024 00000000 		.word	devAddr
 4930              		.cfi_endproc
 4931              	.LFE105:
 4932              		.size	MPU6050_setInterruptLatchClear, .-MPU6050_setInterruptLatchClear
 4933              		.section	.text.MPU6050_getFSyncInterruptLevel,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 112


 4934              		.align	2
 4935              		.global	MPU6050_getFSyncInterruptLevel
 4936              		.code	16
 4937              		.thumb_func
 4938              		.type	MPU6050_getFSyncInterruptLevel, %function
 4939              	MPU6050_getFSyncInterruptLevel:
 4940              	.LFB106:
1388:mpu6050.c     **** /** Get FSYNC interrupt logic level mode.
1389:mpu6050.c     ****  * @return Current FSYNC interrupt mode (0=active-high, 1=active-low)
1390:mpu6050.c     ****  * @see getFSyncInterruptMode()
1391:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1392:mpu6050.c     ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1393:mpu6050.c     ****  */
1394:mpu6050.c     **** bool MPU6050_getFSyncInterruptLevel() {
 4941              		.loc 1 1394 0
 4942              		.cfi_startproc
 4943              		@ args = 0, pretend = 0, frame = 0
 4944              		@ frame_needed = 1, uses_anonymous_args = 0
 4945 0000 80B5     		push	{r7, lr}
 4946              		.cfi_def_cfa_offset 8
 4947              		.cfi_offset 7, -8
 4948              		.cfi_offset 14, -4
 4949 0002 00AF     		add	r7, sp, #0
 4950              		.cfi_def_cfa_register 7
1395:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, buffer);
 4951              		.loc 1 1395 0
 4952 0004 074B     		ldr	r3, .L401
 4953 0006 1878     		ldrb	r0, [r3]
 4954 0008 074B     		ldr	r3, .L401+4
 4955 000a 0322     		movs	r2, #3
 4956 000c 3721     		movs	r1, #55
 4957 000e FFF7FEFF 		bl	I2CReadBit
1396:mpu6050.c     ****     return buffer[0];
 4958              		.loc 1 1396 0
 4959 0012 054B     		ldr	r3, .L401+4
 4960 0014 1B78     		ldrb	r3, [r3]
 4961 0016 5A1E     		subs	r2, r3, #1
 4962 0018 9341     		sbcs	r3, r3, r2
 4963 001a DBB2     		uxtb	r3, r3
1397:mpu6050.c     **** }
 4964              		.loc 1 1397 0
 4965 001c 1800     		movs	r0, r3
 4966 001e BD46     		mov	sp, r7
 4967              		@ sp needed
 4968 0020 80BD     		pop	{r7, pc}
 4969              	.L402:
 4970 0022 C046     		.align	2
 4971              	.L401:
 4972 0024 00000000 		.word	devAddr
 4973 0028 00000000 		.word	buffer
 4974              		.cfi_endproc
 4975              	.LFE106:
 4976              		.size	MPU6050_getFSyncInterruptLevel, .-MPU6050_getFSyncInterruptLevel
 4977              		.section	.text.MPU6050_setFSyncInterruptLevel,"ax",%progbits
 4978              		.align	2
 4979              		.global	MPU6050_setFSyncInterruptLevel
 4980              		.code	16
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 113


 4981              		.thumb_func
 4982              		.type	MPU6050_setFSyncInterruptLevel, %function
 4983              	MPU6050_setFSyncInterruptLevel:
 4984              	.LFB107:
1398:mpu6050.c     **** /** Set FSYNC interrupt logic level mode.
1399:mpu6050.c     ****  * @param mode New FSYNC interrupt mode (0=active-high, 1=active-low)
1400:mpu6050.c     ****  * @see getFSyncInterruptMode()
1401:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1402:mpu6050.c     ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1403:mpu6050.c     ****  */
1404:mpu6050.c     **** void MPU6050_setFSyncInterruptLevel(bool level) {
 4985              		.loc 1 1404 0
 4986              		.cfi_startproc
 4987              		@ args = 0, pretend = 0, frame = 8
 4988              		@ frame_needed = 1, uses_anonymous_args = 0
 4989 0000 80B5     		push	{r7, lr}
 4990              		.cfi_def_cfa_offset 8
 4991              		.cfi_offset 7, -8
 4992              		.cfi_offset 14, -4
 4993 0002 82B0     		sub	sp, sp, #8
 4994              		.cfi_def_cfa_offset 16
 4995 0004 00AF     		add	r7, sp, #0
 4996              		.cfi_def_cfa_register 7
 4997 0006 0200     		movs	r2, r0
 4998 0008 FB1D     		adds	r3, r7, #7
 4999 000a 1A70     		strb	r2, [r3]
1405:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, level);
 5000              		.loc 1 1405 0
 5001 000c 054B     		ldr	r3, .L404
 5002 000e 1878     		ldrb	r0, [r3]
 5003 0010 FB1D     		adds	r3, r7, #7
 5004 0012 1B78     		ldrb	r3, [r3]
 5005 0014 0322     		movs	r2, #3
 5006 0016 3721     		movs	r1, #55
 5007 0018 FFF7FEFF 		bl	I2CWriteBit
1406:mpu6050.c     **** }
 5008              		.loc 1 1406 0
 5009 001c C046     		nop
 5010 001e BD46     		mov	sp, r7
 5011 0020 02B0     		add	sp, sp, #8
 5012              		@ sp needed
 5013 0022 80BD     		pop	{r7, pc}
 5014              	.L405:
 5015              		.align	2
 5016              	.L404:
 5017 0024 00000000 		.word	devAddr
 5018              		.cfi_endproc
 5019              	.LFE107:
 5020              		.size	MPU6050_setFSyncInterruptLevel, .-MPU6050_setFSyncInterruptLevel
 5021              		.section	.text.MPU6050_getFSyncInterruptEnabled,"ax",%progbits
 5022              		.align	2
 5023              		.global	MPU6050_getFSyncInterruptEnabled
 5024              		.code	16
 5025              		.thumb_func
 5026              		.type	MPU6050_getFSyncInterruptEnabled, %function
 5027              	MPU6050_getFSyncInterruptEnabled:
 5028              	.LFB108:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 114


1407:mpu6050.c     **** /** Get FSYNC pin interrupt enabled setting.
1408:mpu6050.c     ****  * Will be set 0 for disabled, 1 for enabled.
1409:mpu6050.c     ****  * @return Current interrupt enabled setting
1410:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1411:mpu6050.c     ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1412:mpu6050.c     ****  */
1413:mpu6050.c     **** bool MPU6050_getFSyncInterruptEnabled() {
 5029              		.loc 1 1413 0
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 0
 5032              		@ frame_needed = 1, uses_anonymous_args = 0
 5033 0000 80B5     		push	{r7, lr}
 5034              		.cfi_def_cfa_offset 8
 5035              		.cfi_offset 7, -8
 5036              		.cfi_offset 14, -4
 5037 0002 00AF     		add	r7, sp, #0
 5038              		.cfi_def_cfa_register 7
1414:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, buffer);
 5039              		.loc 1 1414 0
 5040 0004 074B     		ldr	r3, .L408
 5041 0006 1878     		ldrb	r0, [r3]
 5042 0008 074B     		ldr	r3, .L408+4
 5043 000a 0222     		movs	r2, #2
 5044 000c 3721     		movs	r1, #55
 5045 000e FFF7FEFF 		bl	I2CReadBit
1415:mpu6050.c     ****     return buffer[0];
 5046              		.loc 1 1415 0
 5047 0012 054B     		ldr	r3, .L408+4
 5048 0014 1B78     		ldrb	r3, [r3]
 5049 0016 5A1E     		subs	r2, r3, #1
 5050 0018 9341     		sbcs	r3, r3, r2
 5051 001a DBB2     		uxtb	r3, r3
1416:mpu6050.c     **** }
 5052              		.loc 1 1416 0
 5053 001c 1800     		movs	r0, r3
 5054 001e BD46     		mov	sp, r7
 5055              		@ sp needed
 5056 0020 80BD     		pop	{r7, pc}
 5057              	.L409:
 5058 0022 C046     		.align	2
 5059              	.L408:
 5060 0024 00000000 		.word	devAddr
 5061 0028 00000000 		.word	buffer
 5062              		.cfi_endproc
 5063              	.LFE108:
 5064              		.size	MPU6050_getFSyncInterruptEnabled, .-MPU6050_getFSyncInterruptEnabled
 5065              		.section	.text.MPU6050_setFSyncInterruptEnabled,"ax",%progbits
 5066              		.align	2
 5067              		.global	MPU6050_setFSyncInterruptEnabled
 5068              		.code	16
 5069              		.thumb_func
 5070              		.type	MPU6050_setFSyncInterruptEnabled, %function
 5071              	MPU6050_setFSyncInterruptEnabled:
 5072              	.LFB109:
1417:mpu6050.c     **** /** Set FSYNC pin interrupt enabled setting.
1418:mpu6050.c     ****  * @param enabled New FSYNC pin interrupt enabled setting
1419:mpu6050.c     ****  * @see getFSyncInterruptEnabled()
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 115


1420:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1421:mpu6050.c     ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1422:mpu6050.c     ****  */
1423:mpu6050.c     **** void MPU6050_setFSyncInterruptEnabled(bool enabled) {
 5073              		.loc 1 1423 0
 5074              		.cfi_startproc
 5075              		@ args = 0, pretend = 0, frame = 8
 5076              		@ frame_needed = 1, uses_anonymous_args = 0
 5077 0000 80B5     		push	{r7, lr}
 5078              		.cfi_def_cfa_offset 8
 5079              		.cfi_offset 7, -8
 5080              		.cfi_offset 14, -4
 5081 0002 82B0     		sub	sp, sp, #8
 5082              		.cfi_def_cfa_offset 16
 5083 0004 00AF     		add	r7, sp, #0
 5084              		.cfi_def_cfa_register 7
 5085 0006 0200     		movs	r2, r0
 5086 0008 FB1D     		adds	r3, r7, #7
 5087 000a 1A70     		strb	r2, [r3]
1424:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, enabled);
 5088              		.loc 1 1424 0
 5089 000c 054B     		ldr	r3, .L411
 5090 000e 1878     		ldrb	r0, [r3]
 5091 0010 FB1D     		adds	r3, r7, #7
 5092 0012 1B78     		ldrb	r3, [r3]
 5093 0014 0222     		movs	r2, #2
 5094 0016 3721     		movs	r1, #55
 5095 0018 FFF7FEFF 		bl	I2CWriteBit
1425:mpu6050.c     **** }
 5096              		.loc 1 1425 0
 5097 001c C046     		nop
 5098 001e BD46     		mov	sp, r7
 5099 0020 02B0     		add	sp, sp, #8
 5100              		@ sp needed
 5101 0022 80BD     		pop	{r7, pc}
 5102              	.L412:
 5103              		.align	2
 5104              	.L411:
 5105 0024 00000000 		.word	devAddr
 5106              		.cfi_endproc
 5107              	.LFE109:
 5108              		.size	MPU6050_setFSyncInterruptEnabled, .-MPU6050_setFSyncInterruptEnabled
 5109              		.section	.text.MPU6050_getI2CBypassEnabled,"ax",%progbits
 5110              		.align	2
 5111              		.global	MPU6050_getI2CBypassEnabled
 5112              		.code	16
 5113              		.thumb_func
 5114              		.type	MPU6050_getI2CBypassEnabled, %function
 5115              	MPU6050_getI2CBypassEnabled:
 5116              	.LFB110:
1426:mpu6050.c     **** /** Get I2C bypass enabled status.
1427:mpu6050.c     ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1428:mpu6050.c     ****  * 0, the host application processor will be able to directly access the
1429:mpu6050.c     ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
1430:mpu6050.c     ****  * application processor will not be able to directly access the auxiliary I2C
1431:mpu6050.c     ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1432:mpu6050.c     ****  * bit[5]).
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 116


1433:mpu6050.c     ****  * @return Current I2C bypass enabled status
1434:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1435:mpu6050.c     ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1436:mpu6050.c     ****  */
1437:mpu6050.c     **** bool MPU6050_getI2CBypassEnabled() {
 5117              		.loc 1 1437 0
 5118              		.cfi_startproc
 5119              		@ args = 0, pretend = 0, frame = 0
 5120              		@ frame_needed = 1, uses_anonymous_args = 0
 5121 0000 80B5     		push	{r7, lr}
 5122              		.cfi_def_cfa_offset 8
 5123              		.cfi_offset 7, -8
 5124              		.cfi_offset 14, -4
 5125 0002 00AF     		add	r7, sp, #0
 5126              		.cfi_def_cfa_register 7
1438:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, buffer);
 5127              		.loc 1 1438 0
 5128 0004 074B     		ldr	r3, .L415
 5129 0006 1878     		ldrb	r0, [r3]
 5130 0008 074B     		ldr	r3, .L415+4
 5131 000a 0122     		movs	r2, #1
 5132 000c 3721     		movs	r1, #55
 5133 000e FFF7FEFF 		bl	I2CReadBit
1439:mpu6050.c     ****     return buffer[0];
 5134              		.loc 1 1439 0
 5135 0012 054B     		ldr	r3, .L415+4
 5136 0014 1B78     		ldrb	r3, [r3]
 5137 0016 5A1E     		subs	r2, r3, #1
 5138 0018 9341     		sbcs	r3, r3, r2
 5139 001a DBB2     		uxtb	r3, r3
1440:mpu6050.c     **** }
 5140              		.loc 1 1440 0
 5141 001c 1800     		movs	r0, r3
 5142 001e BD46     		mov	sp, r7
 5143              		@ sp needed
 5144 0020 80BD     		pop	{r7, pc}
 5145              	.L416:
 5146 0022 C046     		.align	2
 5147              	.L415:
 5148 0024 00000000 		.word	devAddr
 5149 0028 00000000 		.word	buffer
 5150              		.cfi_endproc
 5151              	.LFE110:
 5152              		.size	MPU6050_getI2CBypassEnabled, .-MPU6050_getI2CBypassEnabled
 5153              		.section	.text.MPU6050_setI2CBypassEnabled,"ax",%progbits
 5154              		.align	2
 5155              		.global	MPU6050_setI2CBypassEnabled
 5156              		.code	16
 5157              		.thumb_func
 5158              		.type	MPU6050_setI2CBypassEnabled, %function
 5159              	MPU6050_setI2CBypassEnabled:
 5160              	.LFB111:
1441:mpu6050.c     **** /** Set I2C bypass enabled status.
1442:mpu6050.c     ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1443:mpu6050.c     ****  * 0, the host application processor will be able to directly access the
1444:mpu6050.c     ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
1445:mpu6050.c     ****  * application processor will not be able to directly access the auxiliary I2C
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 117


1446:mpu6050.c     ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1447:mpu6050.c     ****  * bit[5]).
1448:mpu6050.c     ****  * @param enabled New I2C bypass enabled status
1449:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1450:mpu6050.c     ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1451:mpu6050.c     ****  */
1452:mpu6050.c     **** void MPU6050_setI2CBypassEnabled(bool enabled) {
 5161              		.loc 1 1452 0
 5162              		.cfi_startproc
 5163              		@ args = 0, pretend = 0, frame = 8
 5164              		@ frame_needed = 1, uses_anonymous_args = 0
 5165 0000 80B5     		push	{r7, lr}
 5166              		.cfi_def_cfa_offset 8
 5167              		.cfi_offset 7, -8
 5168              		.cfi_offset 14, -4
 5169 0002 82B0     		sub	sp, sp, #8
 5170              		.cfi_def_cfa_offset 16
 5171 0004 00AF     		add	r7, sp, #0
 5172              		.cfi_def_cfa_register 7
 5173 0006 0200     		movs	r2, r0
 5174 0008 FB1D     		adds	r3, r7, #7
 5175 000a 1A70     		strb	r2, [r3]
1453:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 5176              		.loc 1 1453 0
 5177 000c 054B     		ldr	r3, .L418
 5178 000e 1878     		ldrb	r0, [r3]
 5179 0010 FB1D     		adds	r3, r7, #7
 5180 0012 1B78     		ldrb	r3, [r3]
 5181 0014 0122     		movs	r2, #1
 5182 0016 3721     		movs	r1, #55
 5183 0018 FFF7FEFF 		bl	I2CWriteBit
1454:mpu6050.c     **** }
 5184              		.loc 1 1454 0
 5185 001c C046     		nop
 5186 001e BD46     		mov	sp, r7
 5187 0020 02B0     		add	sp, sp, #8
 5188              		@ sp needed
 5189 0022 80BD     		pop	{r7, pc}
 5190              	.L419:
 5191              		.align	2
 5192              	.L418:
 5193 0024 00000000 		.word	devAddr
 5194              		.cfi_endproc
 5195              	.LFE111:
 5196              		.size	MPU6050_setI2CBypassEnabled, .-MPU6050_setI2CBypassEnabled
 5197              		.section	.text.MPU6050_getClockOutputEnabled,"ax",%progbits
 5198              		.align	2
 5199              		.global	MPU6050_getClockOutputEnabled
 5200              		.code	16
 5201              		.thumb_func
 5202              		.type	MPU6050_getClockOutputEnabled, %function
 5203              	MPU6050_getClockOutputEnabled:
 5204              	.LFB112:
1455:mpu6050.c     **** /** Get reference clock output enabled status.
1456:mpu6050.c     ****  * When this bit is equal to 1, a reference clock output is provided at the
1457:mpu6050.c     ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1458:mpu6050.c     ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 118


1459:mpu6050.c     ****  * Specification document.
1460:mpu6050.c     ****  * @return Current reference clock output enabled status
1461:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1462:mpu6050.c     ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1463:mpu6050.c     ****  */
1464:mpu6050.c     **** bool MPU6050_getClockOutputEnabled() {
 5205              		.loc 1 1464 0
 5206              		.cfi_startproc
 5207              		@ args = 0, pretend = 0, frame = 0
 5208              		@ frame_needed = 1, uses_anonymous_args = 0
 5209 0000 80B5     		push	{r7, lr}
 5210              		.cfi_def_cfa_offset 8
 5211              		.cfi_offset 7, -8
 5212              		.cfi_offset 14, -4
 5213 0002 00AF     		add	r7, sp, #0
 5214              		.cfi_def_cfa_register 7
1465:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, buffer);
 5215              		.loc 1 1465 0
 5216 0004 074B     		ldr	r3, .L422
 5217 0006 1878     		ldrb	r0, [r3]
 5218 0008 074B     		ldr	r3, .L422+4
 5219 000a 0022     		movs	r2, #0
 5220 000c 3721     		movs	r1, #55
 5221 000e FFF7FEFF 		bl	I2CReadBit
1466:mpu6050.c     ****     return buffer[0];
 5222              		.loc 1 1466 0
 5223 0012 054B     		ldr	r3, .L422+4
 5224 0014 1B78     		ldrb	r3, [r3]
 5225 0016 5A1E     		subs	r2, r3, #1
 5226 0018 9341     		sbcs	r3, r3, r2
 5227 001a DBB2     		uxtb	r3, r3
1467:mpu6050.c     **** }
 5228              		.loc 1 1467 0
 5229 001c 1800     		movs	r0, r3
 5230 001e BD46     		mov	sp, r7
 5231              		@ sp needed
 5232 0020 80BD     		pop	{r7, pc}
 5233              	.L423:
 5234 0022 C046     		.align	2
 5235              	.L422:
 5236 0024 00000000 		.word	devAddr
 5237 0028 00000000 		.word	buffer
 5238              		.cfi_endproc
 5239              	.LFE112:
 5240              		.size	MPU6050_getClockOutputEnabled, .-MPU6050_getClockOutputEnabled
 5241              		.section	.text.MPU6050_setClockOutputEnabled,"ax",%progbits
 5242              		.align	2
 5243              		.global	MPU6050_setClockOutputEnabled
 5244              		.code	16
 5245              		.thumb_func
 5246              		.type	MPU6050_setClockOutputEnabled, %function
 5247              	MPU6050_setClockOutputEnabled:
 5248              	.LFB113:
1468:mpu6050.c     **** /** Set reference clock output enabled status.
1469:mpu6050.c     ****  * When this bit is equal to 1, a reference clock output is provided at the
1470:mpu6050.c     ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1471:mpu6050.c     ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 119


1472:mpu6050.c     ****  * Specification document.
1473:mpu6050.c     ****  * @param enabled New reference clock output enabled status
1474:mpu6050.c     ****  * @see MPU6050_RA_INT_PIN_CFG
1475:mpu6050.c     ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1476:mpu6050.c     ****  */
1477:mpu6050.c     **** void MPU6050_setClockOutputEnabled(bool enabled) {
 5249              		.loc 1 1477 0
 5250              		.cfi_startproc
 5251              		@ args = 0, pretend = 0, frame = 8
 5252              		@ frame_needed = 1, uses_anonymous_args = 0
 5253 0000 80B5     		push	{r7, lr}
 5254              		.cfi_def_cfa_offset 8
 5255              		.cfi_offset 7, -8
 5256              		.cfi_offset 14, -4
 5257 0002 82B0     		sub	sp, sp, #8
 5258              		.cfi_def_cfa_offset 16
 5259 0004 00AF     		add	r7, sp, #0
 5260              		.cfi_def_cfa_register 7
 5261 0006 0200     		movs	r2, r0
 5262 0008 FB1D     		adds	r3, r7, #7
 5263 000a 1A70     		strb	r2, [r3]
1478:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, enabled);
 5264              		.loc 1 1478 0
 5265 000c 054B     		ldr	r3, .L425
 5266 000e 1878     		ldrb	r0, [r3]
 5267 0010 FB1D     		adds	r3, r7, #7
 5268 0012 1B78     		ldrb	r3, [r3]
 5269 0014 0022     		movs	r2, #0
 5270 0016 3721     		movs	r1, #55
 5271 0018 FFF7FEFF 		bl	I2CWriteBit
1479:mpu6050.c     **** }
 5272              		.loc 1 1479 0
 5273 001c C046     		nop
 5274 001e BD46     		mov	sp, r7
 5275 0020 02B0     		add	sp, sp, #8
 5276              		@ sp needed
 5277 0022 80BD     		pop	{r7, pc}
 5278              	.L426:
 5279              		.align	2
 5280              	.L425:
 5281 0024 00000000 		.word	devAddr
 5282              		.cfi_endproc
 5283              	.LFE113:
 5284              		.size	MPU6050_setClockOutputEnabled, .-MPU6050_setClockOutputEnabled
 5285              		.section	.text.MPU6050_getIntEnabled,"ax",%progbits
 5286              		.align	2
 5287              		.global	MPU6050_getIntEnabled
 5288              		.code	16
 5289              		.thumb_func
 5290              		.type	MPU6050_getIntEnabled, %function
 5291              	MPU6050_getIntEnabled:
 5292              	.LFB114:
1480:mpu6050.c     **** 
1481:mpu6050.c     **** // INT_ENABLE register
1482:mpu6050.c     **** 
1483:mpu6050.c     **** /** Get full interrupt enabled status.
1484:mpu6050.c     ****  * Full register byte for all interrupts, for quick reading. Each bit will be
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 120


1485:mpu6050.c     ****  * set 0 for disabled, 1 for enabled.
1486:mpu6050.c     ****  * @return Current interrupt enabled status
1487:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1488:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FF_BIT
1489:mpu6050.c     ****  **/
1490:mpu6050.c     **** uint8_t MPU6050_getIntEnabled() {
 5293              		.loc 1 1490 0
 5294              		.cfi_startproc
 5295              		@ args = 0, pretend = 0, frame = 0
 5296              		@ frame_needed = 1, uses_anonymous_args = 0
 5297 0000 80B5     		push	{r7, lr}
 5298              		.cfi_def_cfa_offset 8
 5299              		.cfi_offset 7, -8
 5300              		.cfi_offset 14, -4
 5301 0002 00AF     		add	r7, sp, #0
 5302              		.cfi_def_cfa_register 7
1491:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_INT_ENABLE, buffer);
 5303              		.loc 1 1491 0
 5304 0004 054B     		ldr	r3, .L429
 5305 0006 1B78     		ldrb	r3, [r3]
 5306 0008 054A     		ldr	r2, .L429+4
 5307 000a 3821     		movs	r1, #56
 5308 000c 1800     		movs	r0, r3
 5309 000e FFF7FEFF 		bl	I2CReadByte
1492:mpu6050.c     ****     return buffer[0];
 5310              		.loc 1 1492 0
 5311 0012 034B     		ldr	r3, .L429+4
 5312 0014 1B78     		ldrb	r3, [r3]
1493:mpu6050.c     **** }
 5313              		.loc 1 1493 0
 5314 0016 1800     		movs	r0, r3
 5315 0018 BD46     		mov	sp, r7
 5316              		@ sp needed
 5317 001a 80BD     		pop	{r7, pc}
 5318              	.L430:
 5319              		.align	2
 5320              	.L429:
 5321 001c 00000000 		.word	devAddr
 5322 0020 00000000 		.word	buffer
 5323              		.cfi_endproc
 5324              	.LFE114:
 5325              		.size	MPU6050_getIntEnabled, .-MPU6050_getIntEnabled
 5326              		.section	.text.MPU6050_setIntEnabled,"ax",%progbits
 5327              		.align	2
 5328              		.global	MPU6050_setIntEnabled
 5329              		.code	16
 5330              		.thumb_func
 5331              		.type	MPU6050_setIntEnabled, %function
 5332              	MPU6050_setIntEnabled:
 5333              	.LFB115:
1494:mpu6050.c     **** /** Set full interrupt enabled status.
1495:mpu6050.c     ****  * Full register byte for all interrupts, for quick reading. Each bit should be
1496:mpu6050.c     ****  * set 0 for disabled, 1 for enabled.
1497:mpu6050.c     ****  * @param enabled New interrupt enabled status
1498:mpu6050.c     ****  * @see getIntFreefallEnabled()
1499:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1500:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FF_BIT
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 121


1501:mpu6050.c     ****  **/
1502:mpu6050.c     **** void MPU6050_setIntEnabled(uint8_t enabled) {
 5334              		.loc 1 1502 0
 5335              		.cfi_startproc
 5336              		@ args = 0, pretend = 0, frame = 8
 5337              		@ frame_needed = 1, uses_anonymous_args = 0
 5338 0000 80B5     		push	{r7, lr}
 5339              		.cfi_def_cfa_offset 8
 5340              		.cfi_offset 7, -8
 5341              		.cfi_offset 14, -4
 5342 0002 82B0     		sub	sp, sp, #8
 5343              		.cfi_def_cfa_offset 16
 5344 0004 00AF     		add	r7, sp, #0
 5345              		.cfi_def_cfa_register 7
 5346 0006 0200     		movs	r2, r0
 5347 0008 FB1D     		adds	r3, r7, #7
 5348 000a 1A70     		strb	r2, [r3]
1503:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 5349              		.loc 1 1503 0
 5350 000c 054B     		ldr	r3, .L432
 5351 000e 1878     		ldrb	r0, [r3]
 5352 0010 FB1D     		adds	r3, r7, #7
 5353 0012 1B78     		ldrb	r3, [r3]
 5354 0014 1A00     		movs	r2, r3
 5355 0016 3821     		movs	r1, #56
 5356 0018 FFF7FEFF 		bl	I2CWriteByte
1504:mpu6050.c     **** }
 5357              		.loc 1 1504 0
 5358 001c C046     		nop
 5359 001e BD46     		mov	sp, r7
 5360 0020 02B0     		add	sp, sp, #8
 5361              		@ sp needed
 5362 0022 80BD     		pop	{r7, pc}
 5363              	.L433:
 5364              		.align	2
 5365              	.L432:
 5366 0024 00000000 		.word	devAddr
 5367              		.cfi_endproc
 5368              	.LFE115:
 5369              		.size	MPU6050_setIntEnabled, .-MPU6050_setIntEnabled
 5370              		.section	.text.MPU6050_getIntFreefallEnabled,"ax",%progbits
 5371              		.align	2
 5372              		.global	MPU6050_getIntFreefallEnabled
 5373              		.code	16
 5374              		.thumb_func
 5375              		.type	MPU6050_getIntFreefallEnabled, %function
 5376              	MPU6050_getIntFreefallEnabled:
 5377              	.LFB116:
1505:mpu6050.c     **** /** Get Free Fall interrupt enabled status.
1506:mpu6050.c     ****  * Will be set 0 for disabled, 1 for enabled.
1507:mpu6050.c     ****  * @return Current interrupt enabled status
1508:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1509:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FF_BIT
1510:mpu6050.c     ****  **/
1511:mpu6050.c     **** bool MPU6050_getIntFreefallEnabled() {
 5378              		.loc 1 1511 0
 5379              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 122


 5380              		@ args = 0, pretend = 0, frame = 0
 5381              		@ frame_needed = 1, uses_anonymous_args = 0
 5382 0000 80B5     		push	{r7, lr}
 5383              		.cfi_def_cfa_offset 8
 5384              		.cfi_offset 7, -8
 5385              		.cfi_offset 14, -4
 5386 0002 00AF     		add	r7, sp, #0
 5387              		.cfi_def_cfa_register 7
1512:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, buffer);
 5388              		.loc 1 1512 0
 5389 0004 074B     		ldr	r3, .L436
 5390 0006 1878     		ldrb	r0, [r3]
 5391 0008 074B     		ldr	r3, .L436+4
 5392 000a 0722     		movs	r2, #7
 5393 000c 3821     		movs	r1, #56
 5394 000e FFF7FEFF 		bl	I2CReadBit
1513:mpu6050.c     ****     return buffer[0];
 5395              		.loc 1 1513 0
 5396 0012 054B     		ldr	r3, .L436+4
 5397 0014 1B78     		ldrb	r3, [r3]
 5398 0016 5A1E     		subs	r2, r3, #1
 5399 0018 9341     		sbcs	r3, r3, r2
 5400 001a DBB2     		uxtb	r3, r3
1514:mpu6050.c     **** }
 5401              		.loc 1 1514 0
 5402 001c 1800     		movs	r0, r3
 5403 001e BD46     		mov	sp, r7
 5404              		@ sp needed
 5405 0020 80BD     		pop	{r7, pc}
 5406              	.L437:
 5407 0022 C046     		.align	2
 5408              	.L436:
 5409 0024 00000000 		.word	devAddr
 5410 0028 00000000 		.word	buffer
 5411              		.cfi_endproc
 5412              	.LFE116:
 5413              		.size	MPU6050_getIntFreefallEnabled, .-MPU6050_getIntFreefallEnabled
 5414              		.section	.text.MPU6050_setIntFreefallEnabled,"ax",%progbits
 5415              		.align	2
 5416              		.global	MPU6050_setIntFreefallEnabled
 5417              		.code	16
 5418              		.thumb_func
 5419              		.type	MPU6050_setIntFreefallEnabled, %function
 5420              	MPU6050_setIntFreefallEnabled:
 5421              	.LFB117:
1515:mpu6050.c     **** /** Set Free Fall interrupt enabled status.
1516:mpu6050.c     ****  * @param enabled New interrupt enabled status
1517:mpu6050.c     ****  * @see getIntFreefallEnabled()
1518:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1519:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FF_BIT
1520:mpu6050.c     ****  **/
1521:mpu6050.c     **** void MPU6050_setIntFreefallEnabled(bool enabled) {
 5422              		.loc 1 1521 0
 5423              		.cfi_startproc
 5424              		@ args = 0, pretend = 0, frame = 8
 5425              		@ frame_needed = 1, uses_anonymous_args = 0
 5426 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 123


 5427              		.cfi_def_cfa_offset 8
 5428              		.cfi_offset 7, -8
 5429              		.cfi_offset 14, -4
 5430 0002 82B0     		sub	sp, sp, #8
 5431              		.cfi_def_cfa_offset 16
 5432 0004 00AF     		add	r7, sp, #0
 5433              		.cfi_def_cfa_register 7
 5434 0006 0200     		movs	r2, r0
 5435 0008 FB1D     		adds	r3, r7, #7
 5436 000a 1A70     		strb	r2, [r3]
1522:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, enabled);
 5437              		.loc 1 1522 0
 5438 000c 054B     		ldr	r3, .L439
 5439 000e 1878     		ldrb	r0, [r3]
 5440 0010 FB1D     		adds	r3, r7, #7
 5441 0012 1B78     		ldrb	r3, [r3]
 5442 0014 0722     		movs	r2, #7
 5443 0016 3821     		movs	r1, #56
 5444 0018 FFF7FEFF 		bl	I2CWriteBit
1523:mpu6050.c     **** }
 5445              		.loc 1 1523 0
 5446 001c C046     		nop
 5447 001e BD46     		mov	sp, r7
 5448 0020 02B0     		add	sp, sp, #8
 5449              		@ sp needed
 5450 0022 80BD     		pop	{r7, pc}
 5451              	.L440:
 5452              		.align	2
 5453              	.L439:
 5454 0024 00000000 		.word	devAddr
 5455              		.cfi_endproc
 5456              	.LFE117:
 5457              		.size	MPU6050_setIntFreefallEnabled, .-MPU6050_setIntFreefallEnabled
 5458              		.section	.text.MPU6050_getIntMotionEnabled,"ax",%progbits
 5459              		.align	2
 5460              		.global	MPU6050_getIntMotionEnabled
 5461              		.code	16
 5462              		.thumb_func
 5463              		.type	MPU6050_getIntMotionEnabled, %function
 5464              	MPU6050_getIntMotionEnabled:
 5465              	.LFB118:
1524:mpu6050.c     **** /** Get Motion Detection interrupt enabled status.
1525:mpu6050.c     ****  * Will be set 0 for disabled, 1 for enabled.
1526:mpu6050.c     ****  * @return Current interrupt enabled status
1527:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1528:mpu6050.c     ****  * @see MPU6050_INTERRUPT_MOT_BIT
1529:mpu6050.c     ****  **/
1530:mpu6050.c     **** bool MPU6050_getIntMotionEnabled() {
 5466              		.loc 1 1530 0
 5467              		.cfi_startproc
 5468              		@ args = 0, pretend = 0, frame = 0
 5469              		@ frame_needed = 1, uses_anonymous_args = 0
 5470 0000 80B5     		push	{r7, lr}
 5471              		.cfi_def_cfa_offset 8
 5472              		.cfi_offset 7, -8
 5473              		.cfi_offset 14, -4
 5474 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 124


 5475              		.cfi_def_cfa_register 7
1531:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, buffer);
 5476              		.loc 1 1531 0
 5477 0004 074B     		ldr	r3, .L443
 5478 0006 1878     		ldrb	r0, [r3]
 5479 0008 074B     		ldr	r3, .L443+4
 5480 000a 0622     		movs	r2, #6
 5481 000c 3821     		movs	r1, #56
 5482 000e FFF7FEFF 		bl	I2CReadBit
1532:mpu6050.c     ****     return buffer[0];
 5483              		.loc 1 1532 0
 5484 0012 054B     		ldr	r3, .L443+4
 5485 0014 1B78     		ldrb	r3, [r3]
 5486 0016 5A1E     		subs	r2, r3, #1
 5487 0018 9341     		sbcs	r3, r3, r2
 5488 001a DBB2     		uxtb	r3, r3
1533:mpu6050.c     **** }
 5489              		.loc 1 1533 0
 5490 001c 1800     		movs	r0, r3
 5491 001e BD46     		mov	sp, r7
 5492              		@ sp needed
 5493 0020 80BD     		pop	{r7, pc}
 5494              	.L444:
 5495 0022 C046     		.align	2
 5496              	.L443:
 5497 0024 00000000 		.word	devAddr
 5498 0028 00000000 		.word	buffer
 5499              		.cfi_endproc
 5500              	.LFE118:
 5501              		.size	MPU6050_getIntMotionEnabled, .-MPU6050_getIntMotionEnabled
 5502              		.section	.text.MPU6050_setIntMotionEnabled,"ax",%progbits
 5503              		.align	2
 5504              		.global	MPU6050_setIntMotionEnabled
 5505              		.code	16
 5506              		.thumb_func
 5507              		.type	MPU6050_setIntMotionEnabled, %function
 5508              	MPU6050_setIntMotionEnabled:
 5509              	.LFB119:
1534:mpu6050.c     **** /** Set Motion Detection interrupt enabled status.
1535:mpu6050.c     ****  * @param enabled New interrupt enabled status
1536:mpu6050.c     ****  * @see getIntMotionEnabled()
1537:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1538:mpu6050.c     ****  * @see MPU6050_INTERRUPT_MOT_BIT
1539:mpu6050.c     ****  **/
1540:mpu6050.c     **** void MPU6050_setIntMotionEnabled(bool enabled) {
 5510              		.loc 1 1540 0
 5511              		.cfi_startproc
 5512              		@ args = 0, pretend = 0, frame = 8
 5513              		@ frame_needed = 1, uses_anonymous_args = 0
 5514 0000 80B5     		push	{r7, lr}
 5515              		.cfi_def_cfa_offset 8
 5516              		.cfi_offset 7, -8
 5517              		.cfi_offset 14, -4
 5518 0002 82B0     		sub	sp, sp, #8
 5519              		.cfi_def_cfa_offset 16
 5520 0004 00AF     		add	r7, sp, #0
 5521              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 125


 5522 0006 0200     		movs	r2, r0
 5523 0008 FB1D     		adds	r3, r7, #7
 5524 000a 1A70     		strb	r2, [r3]
1541:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, enabled);
 5525              		.loc 1 1541 0
 5526 000c 054B     		ldr	r3, .L446
 5527 000e 1878     		ldrb	r0, [r3]
 5528 0010 FB1D     		adds	r3, r7, #7
 5529 0012 1B78     		ldrb	r3, [r3]
 5530 0014 0622     		movs	r2, #6
 5531 0016 3821     		movs	r1, #56
 5532 0018 FFF7FEFF 		bl	I2CWriteBit
1542:mpu6050.c     **** }
 5533              		.loc 1 1542 0
 5534 001c C046     		nop
 5535 001e BD46     		mov	sp, r7
 5536 0020 02B0     		add	sp, sp, #8
 5537              		@ sp needed
 5538 0022 80BD     		pop	{r7, pc}
 5539              	.L447:
 5540              		.align	2
 5541              	.L446:
 5542 0024 00000000 		.word	devAddr
 5543              		.cfi_endproc
 5544              	.LFE119:
 5545              		.size	MPU6050_setIntMotionEnabled, .-MPU6050_setIntMotionEnabled
 5546              		.section	.text.MPU6050_getIntZeroMotionEnabled,"ax",%progbits
 5547              		.align	2
 5548              		.global	MPU6050_getIntZeroMotionEnabled
 5549              		.code	16
 5550              		.thumb_func
 5551              		.type	MPU6050_getIntZeroMotionEnabled, %function
 5552              	MPU6050_getIntZeroMotionEnabled:
 5553              	.LFB120:
1543:mpu6050.c     **** /** Get Zero Motion Detection interrupt enabled status.
1544:mpu6050.c     ****  * Will be set 0 for disabled, 1 for enabled.
1545:mpu6050.c     ****  * @return Current interrupt enabled status
1546:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1547:mpu6050.c     ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1548:mpu6050.c     ****  **/
1549:mpu6050.c     **** bool MPU6050_getIntZeroMotionEnabled() {
 5554              		.loc 1 1549 0
 5555              		.cfi_startproc
 5556              		@ args = 0, pretend = 0, frame = 0
 5557              		@ frame_needed = 1, uses_anonymous_args = 0
 5558 0000 80B5     		push	{r7, lr}
 5559              		.cfi_def_cfa_offset 8
 5560              		.cfi_offset 7, -8
 5561              		.cfi_offset 14, -4
 5562 0002 00AF     		add	r7, sp, #0
 5563              		.cfi_def_cfa_register 7
1550:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 5564              		.loc 1 1550 0
 5565 0004 074B     		ldr	r3, .L450
 5566 0006 1878     		ldrb	r0, [r3]
 5567 0008 074B     		ldr	r3, .L450+4
 5568 000a 0522     		movs	r2, #5
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 126


 5569 000c 3821     		movs	r1, #56
 5570 000e FFF7FEFF 		bl	I2CReadBit
1551:mpu6050.c     ****     return buffer[0];
 5571              		.loc 1 1551 0
 5572 0012 054B     		ldr	r3, .L450+4
 5573 0014 1B78     		ldrb	r3, [r3]
 5574 0016 5A1E     		subs	r2, r3, #1
 5575 0018 9341     		sbcs	r3, r3, r2
 5576 001a DBB2     		uxtb	r3, r3
1552:mpu6050.c     **** }
 5577              		.loc 1 1552 0
 5578 001c 1800     		movs	r0, r3
 5579 001e BD46     		mov	sp, r7
 5580              		@ sp needed
 5581 0020 80BD     		pop	{r7, pc}
 5582              	.L451:
 5583 0022 C046     		.align	2
 5584              	.L450:
 5585 0024 00000000 		.word	devAddr
 5586 0028 00000000 		.word	buffer
 5587              		.cfi_endproc
 5588              	.LFE120:
 5589              		.size	MPU6050_getIntZeroMotionEnabled, .-MPU6050_getIntZeroMotionEnabled
 5590              		.section	.text.MPU6050_setIntZeroMotionEnabled,"ax",%progbits
 5591              		.align	2
 5592              		.global	MPU6050_setIntZeroMotionEnabled
 5593              		.code	16
 5594              		.thumb_func
 5595              		.type	MPU6050_setIntZeroMotionEnabled, %function
 5596              	MPU6050_setIntZeroMotionEnabled:
 5597              	.LFB121:
1553:mpu6050.c     **** /** Set Zero Motion Detection interrupt enabled status.
1554:mpu6050.c     ****  * @param enabled New interrupt enabled status
1555:mpu6050.c     ****  * @see getIntZeroMotionEnabled()
1556:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1557:mpu6050.c     ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1558:mpu6050.c     ****  **/
1559:mpu6050.c     **** void MPU6050_setIntZeroMotionEnabled(bool enabled) {
 5598              		.loc 1 1559 0
 5599              		.cfi_startproc
 5600              		@ args = 0, pretend = 0, frame = 8
 5601              		@ frame_needed = 1, uses_anonymous_args = 0
 5602 0000 80B5     		push	{r7, lr}
 5603              		.cfi_def_cfa_offset 8
 5604              		.cfi_offset 7, -8
 5605              		.cfi_offset 14, -4
 5606 0002 82B0     		sub	sp, sp, #8
 5607              		.cfi_def_cfa_offset 16
 5608 0004 00AF     		add	r7, sp, #0
 5609              		.cfi_def_cfa_register 7
 5610 0006 0200     		movs	r2, r0
 5611 0008 FB1D     		adds	r3, r7, #7
 5612 000a 1A70     		strb	r2, [r3]
1560:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, enabled);
 5613              		.loc 1 1560 0
 5614 000c 054B     		ldr	r3, .L453
 5615 000e 1878     		ldrb	r0, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 127


 5616 0010 FB1D     		adds	r3, r7, #7
 5617 0012 1B78     		ldrb	r3, [r3]
 5618 0014 0522     		movs	r2, #5
 5619 0016 3821     		movs	r1, #56
 5620 0018 FFF7FEFF 		bl	I2CWriteBit
1561:mpu6050.c     **** }
 5621              		.loc 1 1561 0
 5622 001c C046     		nop
 5623 001e BD46     		mov	sp, r7
 5624 0020 02B0     		add	sp, sp, #8
 5625              		@ sp needed
 5626 0022 80BD     		pop	{r7, pc}
 5627              	.L454:
 5628              		.align	2
 5629              	.L453:
 5630 0024 00000000 		.word	devAddr
 5631              		.cfi_endproc
 5632              	.LFE121:
 5633              		.size	MPU6050_setIntZeroMotionEnabled, .-MPU6050_setIntZeroMotionEnabled
 5634              		.section	.text.MPU6050_getIntFIFOBufferOverflowEnabled,"ax",%progbits
 5635              		.align	2
 5636              		.global	MPU6050_getIntFIFOBufferOverflowEnabled
 5637              		.code	16
 5638              		.thumb_func
 5639              		.type	MPU6050_getIntFIFOBufferOverflowEnabled, %function
 5640              	MPU6050_getIntFIFOBufferOverflowEnabled:
 5641              	.LFB122:
1562:mpu6050.c     **** /** Get FIFO Buffer Overflow interrupt enabled status.
1563:mpu6050.c     ****  * Will be set 0 for disabled, 1 for enabled.
1564:mpu6050.c     ****  * @return Current interrupt enabled status
1565:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1566:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1567:mpu6050.c     ****  **/
1568:mpu6050.c     **** bool MPU6050_getIntFIFOBufferOverflowEnabled() {
 5642              		.loc 1 1568 0
 5643              		.cfi_startproc
 5644              		@ args = 0, pretend = 0, frame = 0
 5645              		@ frame_needed = 1, uses_anonymous_args = 0
 5646 0000 80B5     		push	{r7, lr}
 5647              		.cfi_def_cfa_offset 8
 5648              		.cfi_offset 7, -8
 5649              		.cfi_offset 14, -4
 5650 0002 00AF     		add	r7, sp, #0
 5651              		.cfi_def_cfa_register 7
1569:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 5652              		.loc 1 1569 0
 5653 0004 074B     		ldr	r3, .L457
 5654 0006 1878     		ldrb	r0, [r3]
 5655 0008 074B     		ldr	r3, .L457+4
 5656 000a 0422     		movs	r2, #4
 5657 000c 3821     		movs	r1, #56
 5658 000e FFF7FEFF 		bl	I2CReadBit
1570:mpu6050.c     ****     return buffer[0];
 5659              		.loc 1 1570 0
 5660 0012 054B     		ldr	r3, .L457+4
 5661 0014 1B78     		ldrb	r3, [r3]
 5662 0016 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 128


 5663 0018 9341     		sbcs	r3, r3, r2
 5664 001a DBB2     		uxtb	r3, r3
1571:mpu6050.c     **** }
 5665              		.loc 1 1571 0
 5666 001c 1800     		movs	r0, r3
 5667 001e BD46     		mov	sp, r7
 5668              		@ sp needed
 5669 0020 80BD     		pop	{r7, pc}
 5670              	.L458:
 5671 0022 C046     		.align	2
 5672              	.L457:
 5673 0024 00000000 		.word	devAddr
 5674 0028 00000000 		.word	buffer
 5675              		.cfi_endproc
 5676              	.LFE122:
 5677              		.size	MPU6050_getIntFIFOBufferOverflowEnabled, .-MPU6050_getIntFIFOBufferOverflowEnabled
 5678              		.section	.text.MPU6050_setIntFIFOBufferOverflowEnabled,"ax",%progbits
 5679              		.align	2
 5680              		.global	MPU6050_setIntFIFOBufferOverflowEnabled
 5681              		.code	16
 5682              		.thumb_func
 5683              		.type	MPU6050_setIntFIFOBufferOverflowEnabled, %function
 5684              	MPU6050_setIntFIFOBufferOverflowEnabled:
 5685              	.LFB123:
1572:mpu6050.c     **** /** Set FIFO Buffer Overflow interrupt enabled status.
1573:mpu6050.c     ****  * @param enabled New interrupt enabled status
1574:mpu6050.c     ****  * @see getIntFIFOBufferOverflowEnabled()
1575:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1576:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1577:mpu6050.c     ****  **/
1578:mpu6050.c     **** void MPU6050_setIntFIFOBufferOverflowEnabled(bool enabled) {
 5686              		.loc 1 1578 0
 5687              		.cfi_startproc
 5688              		@ args = 0, pretend = 0, frame = 8
 5689              		@ frame_needed = 1, uses_anonymous_args = 0
 5690 0000 80B5     		push	{r7, lr}
 5691              		.cfi_def_cfa_offset 8
 5692              		.cfi_offset 7, -8
 5693              		.cfi_offset 14, -4
 5694 0002 82B0     		sub	sp, sp, #8
 5695              		.cfi_def_cfa_offset 16
 5696 0004 00AF     		add	r7, sp, #0
 5697              		.cfi_def_cfa_register 7
 5698 0006 0200     		movs	r2, r0
 5699 0008 FB1D     		adds	r3, r7, #7
 5700 000a 1A70     		strb	r2, [r3]
1579:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);
 5701              		.loc 1 1579 0
 5702 000c 054B     		ldr	r3, .L460
 5703 000e 1878     		ldrb	r0, [r3]
 5704 0010 FB1D     		adds	r3, r7, #7
 5705 0012 1B78     		ldrb	r3, [r3]
 5706 0014 0422     		movs	r2, #4
 5707 0016 3821     		movs	r1, #56
 5708 0018 FFF7FEFF 		bl	I2CWriteBit
1580:mpu6050.c     **** }
 5709              		.loc 1 1580 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 129


 5710 001c C046     		nop
 5711 001e BD46     		mov	sp, r7
 5712 0020 02B0     		add	sp, sp, #8
 5713              		@ sp needed
 5714 0022 80BD     		pop	{r7, pc}
 5715              	.L461:
 5716              		.align	2
 5717              	.L460:
 5718 0024 00000000 		.word	devAddr
 5719              		.cfi_endproc
 5720              	.LFE123:
 5721              		.size	MPU6050_setIntFIFOBufferOverflowEnabled, .-MPU6050_setIntFIFOBufferOverflowEnabled
 5722              		.section	.text.MPU6050_getIntI2CMasterEnabled,"ax",%progbits
 5723              		.align	2
 5724              		.global	MPU6050_getIntI2CMasterEnabled
 5725              		.code	16
 5726              		.thumb_func
 5727              		.type	MPU6050_getIntI2CMasterEnabled, %function
 5728              	MPU6050_getIntI2CMasterEnabled:
 5729              	.LFB124:
1581:mpu6050.c     **** /** Get I2C Master interrupt enabled status.
1582:mpu6050.c     ****  * This enables any of the I2C Master interrupt sources to generate an
1583:mpu6050.c     ****  * interrupt. Will be set 0 for disabled, 1 for enabled.
1584:mpu6050.c     ****  * @return Current interrupt enabled status
1585:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1586:mpu6050.c     ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1587:mpu6050.c     ****  **/
1588:mpu6050.c     **** bool MPU6050_getIntI2CMasterEnabled() {
 5730              		.loc 1 1588 0
 5731              		.cfi_startproc
 5732              		@ args = 0, pretend = 0, frame = 0
 5733              		@ frame_needed = 1, uses_anonymous_args = 0
 5734 0000 80B5     		push	{r7, lr}
 5735              		.cfi_def_cfa_offset 8
 5736              		.cfi_offset 7, -8
 5737              		.cfi_offset 14, -4
 5738 0002 00AF     		add	r7, sp, #0
 5739              		.cfi_def_cfa_register 7
1589:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 5740              		.loc 1 1589 0
 5741 0004 074B     		ldr	r3, .L464
 5742 0006 1878     		ldrb	r0, [r3]
 5743 0008 074B     		ldr	r3, .L464+4
 5744 000a 0322     		movs	r2, #3
 5745 000c 3821     		movs	r1, #56
 5746 000e FFF7FEFF 		bl	I2CReadBit
1590:mpu6050.c     ****     return buffer[0];
 5747              		.loc 1 1590 0
 5748 0012 054B     		ldr	r3, .L464+4
 5749 0014 1B78     		ldrb	r3, [r3]
 5750 0016 5A1E     		subs	r2, r3, #1
 5751 0018 9341     		sbcs	r3, r3, r2
 5752 001a DBB2     		uxtb	r3, r3
1591:mpu6050.c     **** }
 5753              		.loc 1 1591 0
 5754 001c 1800     		movs	r0, r3
 5755 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 130


 5756              		@ sp needed
 5757 0020 80BD     		pop	{r7, pc}
 5758              	.L465:
 5759 0022 C046     		.align	2
 5760              	.L464:
 5761 0024 00000000 		.word	devAddr
 5762 0028 00000000 		.word	buffer
 5763              		.cfi_endproc
 5764              	.LFE124:
 5765              		.size	MPU6050_getIntI2CMasterEnabled, .-MPU6050_getIntI2CMasterEnabled
 5766              		.section	.text.MPU6050_setIntI2CMasterEnabled,"ax",%progbits
 5767              		.align	2
 5768              		.global	MPU6050_setIntI2CMasterEnabled
 5769              		.code	16
 5770              		.thumb_func
 5771              		.type	MPU6050_setIntI2CMasterEnabled, %function
 5772              	MPU6050_setIntI2CMasterEnabled:
 5773              	.LFB125:
1592:mpu6050.c     **** /** Set I2C Master interrupt enabled status.
1593:mpu6050.c     ****  * @param enabled New interrupt enabled status
1594:mpu6050.c     ****  * @see getIntI2CMasterEnabled()
1595:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1596:mpu6050.c     ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1597:mpu6050.c     ****  **/
1598:mpu6050.c     **** void MPU6050_setIntI2CMasterEnabled(bool enabled) {
 5774              		.loc 1 1598 0
 5775              		.cfi_startproc
 5776              		@ args = 0, pretend = 0, frame = 8
 5777              		@ frame_needed = 1, uses_anonymous_args = 0
 5778 0000 80B5     		push	{r7, lr}
 5779              		.cfi_def_cfa_offset 8
 5780              		.cfi_offset 7, -8
 5781              		.cfi_offset 14, -4
 5782 0002 82B0     		sub	sp, sp, #8
 5783              		.cfi_def_cfa_offset 16
 5784 0004 00AF     		add	r7, sp, #0
 5785              		.cfi_def_cfa_register 7
 5786 0006 0200     		movs	r2, r0
 5787 0008 FB1D     		adds	r3, r7, #7
 5788 000a 1A70     		strb	r2, [r3]
1599:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, enabled);
 5789              		.loc 1 1599 0
 5790 000c 054B     		ldr	r3, .L467
 5791 000e 1878     		ldrb	r0, [r3]
 5792 0010 FB1D     		adds	r3, r7, #7
 5793 0012 1B78     		ldrb	r3, [r3]
 5794 0014 0322     		movs	r2, #3
 5795 0016 3821     		movs	r1, #56
 5796 0018 FFF7FEFF 		bl	I2CWriteBit
1600:mpu6050.c     **** }
 5797              		.loc 1 1600 0
 5798 001c C046     		nop
 5799 001e BD46     		mov	sp, r7
 5800 0020 02B0     		add	sp, sp, #8
 5801              		@ sp needed
 5802 0022 80BD     		pop	{r7, pc}
 5803              	.L468:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 131


 5804              		.align	2
 5805              	.L467:
 5806 0024 00000000 		.word	devAddr
 5807              		.cfi_endproc
 5808              	.LFE125:
 5809              		.size	MPU6050_setIntI2CMasterEnabled, .-MPU6050_setIntI2CMasterEnabled
 5810              		.section	.text.MPU6050_getIntDataReadyEnabled,"ax",%progbits
 5811              		.align	2
 5812              		.global	MPU6050_getIntDataReadyEnabled
 5813              		.code	16
 5814              		.thumb_func
 5815              		.type	MPU6050_getIntDataReadyEnabled, %function
 5816              	MPU6050_getIntDataReadyEnabled:
 5817              	.LFB126:
1601:mpu6050.c     **** /** Get Data Ready interrupt enabled setting.
1602:mpu6050.c     ****  * This event occurs each time a write operation to all of the sensor registers
1603:mpu6050.c     ****  * has been completed. Will be set 0 for disabled, 1 for enabled.
1604:mpu6050.c     ****  * @return Current interrupt enabled status
1605:mpu6050.c     ****  * @see MPU6050_RA_INT_ENABLE
1606:mpu6050.c     ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1607:mpu6050.c     ****  */
1608:mpu6050.c     **** bool MPU6050_getIntDataReadyEnabled() {
 5818              		.loc 1 1608 0
 5819              		.cfi_startproc
 5820              		@ args = 0, pretend = 0, frame = 0
 5821              		@ frame_needed = 1, uses_anonymous_args = 0
 5822 0000 80B5     		push	{r7, lr}
 5823              		.cfi_def_cfa_offset 8
 5824              		.cfi_offset 7, -8
 5825              		.cfi_offset 14, -4
 5826 0002 00AF     		add	r7, sp, #0
 5827              		.cfi_def_cfa_register 7
1609:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 5828              		.loc 1 1609 0
 5829 0004 074B     		ldr	r3, .L471
 5830 0006 1878     		ldrb	r0, [r3]
 5831 0008 074B     		ldr	r3, .L471+4
 5832 000a 0022     		movs	r2, #0
 5833 000c 3821     		movs	r1, #56
 5834 000e FFF7FEFF 		bl	I2CReadBit
1610:mpu6050.c     ****     return buffer[0];
 5835              		.loc 1 1610 0
 5836 0012 054B     		ldr	r3, .L471+4
 5837 0014 1B78     		ldrb	r3, [r3]
 5838 0016 5A1E     		subs	r2, r3, #1
 5839 0018 9341     		sbcs	r3, r3, r2
 5840 001a DBB2     		uxtb	r3, r3
1611:mpu6050.c     **** }
 5841              		.loc 1 1611 0
 5842 001c 1800     		movs	r0, r3
 5843 001e BD46     		mov	sp, r7
 5844              		@ sp needed
 5845 0020 80BD     		pop	{r7, pc}
 5846              	.L472:
 5847 0022 C046     		.align	2
 5848              	.L471:
 5849 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 132


 5850 0028 00000000 		.word	buffer
 5851              		.cfi_endproc
 5852              	.LFE126:
 5853              		.size	MPU6050_getIntDataReadyEnabled, .-MPU6050_getIntDataReadyEnabled
 5854              		.section	.text.MPU6050_setIntDataReadyEnabled,"ax",%progbits
 5855              		.align	2
 5856              		.global	MPU6050_setIntDataReadyEnabled
 5857              		.code	16
 5858              		.thumb_func
 5859              		.type	MPU6050_setIntDataReadyEnabled, %function
 5860              	MPU6050_setIntDataReadyEnabled:
 5861              	.LFB127:
1612:mpu6050.c     **** /** Set Data Ready interrupt enabled status.
1613:mpu6050.c     ****  * @param enabled New interrupt enabled status
1614:mpu6050.c     ****  * @see getIntDataReadyEnabled()
1615:mpu6050.c     ****  * @see MPU6050_RA_INT_CFG
1616:mpu6050.c     ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1617:mpu6050.c     ****  */
1618:mpu6050.c     **** void MPU6050_setIntDataReadyEnabled(bool enabled) {
 5862              		.loc 1 1618 0
 5863              		.cfi_startproc
 5864              		@ args = 0, pretend = 0, frame = 8
 5865              		@ frame_needed = 1, uses_anonymous_args = 0
 5866 0000 80B5     		push	{r7, lr}
 5867              		.cfi_def_cfa_offset 8
 5868              		.cfi_offset 7, -8
 5869              		.cfi_offset 14, -4
 5870 0002 82B0     		sub	sp, sp, #8
 5871              		.cfi_def_cfa_offset 16
 5872 0004 00AF     		add	r7, sp, #0
 5873              		.cfi_def_cfa_register 7
 5874 0006 0200     		movs	r2, r0
 5875 0008 FB1D     		adds	r3, r7, #7
 5876 000a 1A70     		strb	r2, [r3]
1619:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, enabled);
 5877              		.loc 1 1619 0
 5878 000c 054B     		ldr	r3, .L474
 5879 000e 1878     		ldrb	r0, [r3]
 5880 0010 FB1D     		adds	r3, r7, #7
 5881 0012 1B78     		ldrb	r3, [r3]
 5882 0014 0022     		movs	r2, #0
 5883 0016 3821     		movs	r1, #56
 5884 0018 FFF7FEFF 		bl	I2CWriteBit
1620:mpu6050.c     **** }
 5885              		.loc 1 1620 0
 5886 001c C046     		nop
 5887 001e BD46     		mov	sp, r7
 5888 0020 02B0     		add	sp, sp, #8
 5889              		@ sp needed
 5890 0022 80BD     		pop	{r7, pc}
 5891              	.L475:
 5892              		.align	2
 5893              	.L474:
 5894 0024 00000000 		.word	devAddr
 5895              		.cfi_endproc
 5896              	.LFE127:
 5897              		.size	MPU6050_setIntDataReadyEnabled, .-MPU6050_setIntDataReadyEnabled
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 133


 5898              		.section	.text.MPU6050_getIntStatus,"ax",%progbits
 5899              		.align	2
 5900              		.global	MPU6050_getIntStatus
 5901              		.code	16
 5902              		.thumb_func
 5903              		.type	MPU6050_getIntStatus, %function
 5904              	MPU6050_getIntStatus:
 5905              	.LFB128:
1621:mpu6050.c     **** 
1622:mpu6050.c     **** // INT_STATUS register
1623:mpu6050.c     **** 
1624:mpu6050.c     **** /** Get full set of interrupt status bits.
1625:mpu6050.c     ****  * These bits clear to 0 after the register has been read. Very useful
1626:mpu6050.c     ****  * for getting multiple INT statuses, since each single bit read clears
1627:mpu6050.c     ****  * all of them because it has to read the whole byte.
1628:mpu6050.c     ****  * @return Current interrupt status
1629:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1630:mpu6050.c     ****  */
1631:mpu6050.c     **** uint8_t MPU6050_getIntStatus() {
 5906              		.loc 1 1631 0
 5907              		.cfi_startproc
 5908              		@ args = 0, pretend = 0, frame = 0
 5909              		@ frame_needed = 1, uses_anonymous_args = 0
 5910 0000 80B5     		push	{r7, lr}
 5911              		.cfi_def_cfa_offset 8
 5912              		.cfi_offset 7, -8
 5913              		.cfi_offset 14, -4
 5914 0002 00AF     		add	r7, sp, #0
 5915              		.cfi_def_cfa_register 7
1632:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 5916              		.loc 1 1632 0
 5917 0004 054B     		ldr	r3, .L478
 5918 0006 1B78     		ldrb	r3, [r3]
 5919 0008 054A     		ldr	r2, .L478+4
 5920 000a 3A21     		movs	r1, #58
 5921 000c 1800     		movs	r0, r3
 5922 000e FFF7FEFF 		bl	I2CReadByte
1633:mpu6050.c     ****     return buffer[0];
 5923              		.loc 1 1633 0
 5924 0012 034B     		ldr	r3, .L478+4
 5925 0014 1B78     		ldrb	r3, [r3]
1634:mpu6050.c     **** }
 5926              		.loc 1 1634 0
 5927 0016 1800     		movs	r0, r3
 5928 0018 BD46     		mov	sp, r7
 5929              		@ sp needed
 5930 001a 80BD     		pop	{r7, pc}
 5931              	.L479:
 5932              		.align	2
 5933              	.L478:
 5934 001c 00000000 		.word	devAddr
 5935 0020 00000000 		.word	buffer
 5936              		.cfi_endproc
 5937              	.LFE128:
 5938              		.size	MPU6050_getIntStatus, .-MPU6050_getIntStatus
 5939              		.section	.text.MPU6050_getIntFreefallStatus,"ax",%progbits
 5940              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 134


 5941              		.global	MPU6050_getIntFreefallStatus
 5942              		.code	16
 5943              		.thumb_func
 5944              		.type	MPU6050_getIntFreefallStatus, %function
 5945              	MPU6050_getIntFreefallStatus:
 5946              	.LFB129:
1635:mpu6050.c     **** /** Get Free Fall interrupt status.
1636:mpu6050.c     ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1637:mpu6050.c     ****  * generated. The bit clears to 0 after the register has been read.
1638:mpu6050.c     ****  * @return Current interrupt status
1639:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1640:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FF_BIT
1641:mpu6050.c     ****  */
1642:mpu6050.c     **** bool MPU6050_getIntFreefallStatus() {
 5947              		.loc 1 1642 0
 5948              		.cfi_startproc
 5949              		@ args = 0, pretend = 0, frame = 0
 5950              		@ frame_needed = 1, uses_anonymous_args = 0
 5951 0000 80B5     		push	{r7, lr}
 5952              		.cfi_def_cfa_offset 8
 5953              		.cfi_offset 7, -8
 5954              		.cfi_offset 14, -4
 5955 0002 00AF     		add	r7, sp, #0
 5956              		.cfi_def_cfa_register 7
1643:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FF_BIT, buffer);
 5957              		.loc 1 1643 0
 5958 0004 074B     		ldr	r3, .L482
 5959 0006 1878     		ldrb	r0, [r3]
 5960 0008 074B     		ldr	r3, .L482+4
 5961 000a 0722     		movs	r2, #7
 5962 000c 3A21     		movs	r1, #58
 5963 000e FFF7FEFF 		bl	I2CReadBit
1644:mpu6050.c     ****     return buffer[0];
 5964              		.loc 1 1644 0
 5965 0012 054B     		ldr	r3, .L482+4
 5966 0014 1B78     		ldrb	r3, [r3]
 5967 0016 5A1E     		subs	r2, r3, #1
 5968 0018 9341     		sbcs	r3, r3, r2
 5969 001a DBB2     		uxtb	r3, r3
1645:mpu6050.c     **** }
 5970              		.loc 1 1645 0
 5971 001c 1800     		movs	r0, r3
 5972 001e BD46     		mov	sp, r7
 5973              		@ sp needed
 5974 0020 80BD     		pop	{r7, pc}
 5975              	.L483:
 5976 0022 C046     		.align	2
 5977              	.L482:
 5978 0024 00000000 		.word	devAddr
 5979 0028 00000000 		.word	buffer
 5980              		.cfi_endproc
 5981              	.LFE129:
 5982              		.size	MPU6050_getIntFreefallStatus, .-MPU6050_getIntFreefallStatus
 5983              		.section	.text.MPU6050_getIntMotionStatus,"ax",%progbits
 5984              		.align	2
 5985              		.global	MPU6050_getIntMotionStatus
 5986              		.code	16
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 135


 5987              		.thumb_func
 5988              		.type	MPU6050_getIntMotionStatus, %function
 5989              	MPU6050_getIntMotionStatus:
 5990              	.LFB130:
1646:mpu6050.c     **** /** Get Motion Detection interrupt status.
1647:mpu6050.c     ****  * This bit automatically sets to 1 when a Motion Detection interrupt has been
1648:mpu6050.c     ****  * generated. The bit clears to 0 after the register has been read.
1649:mpu6050.c     ****  * @return Current interrupt status
1650:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1651:mpu6050.c     ****  * @see MPU6050_INTERRUPT_MOT_BIT
1652:mpu6050.c     ****  */
1653:mpu6050.c     **** bool MPU6050_getIntMotionStatus() {
 5991              		.loc 1 1653 0
 5992              		.cfi_startproc
 5993              		@ args = 0, pretend = 0, frame = 0
 5994              		@ frame_needed = 1, uses_anonymous_args = 0
 5995 0000 80B5     		push	{r7, lr}
 5996              		.cfi_def_cfa_offset 8
 5997              		.cfi_offset 7, -8
 5998              		.cfi_offset 14, -4
 5999 0002 00AF     		add	r7, sp, #0
 6000              		.cfi_def_cfa_register 7
1654:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_MOT_BIT, buffer);
 6001              		.loc 1 1654 0
 6002 0004 074B     		ldr	r3, .L486
 6003 0006 1878     		ldrb	r0, [r3]
 6004 0008 074B     		ldr	r3, .L486+4
 6005 000a 0622     		movs	r2, #6
 6006 000c 3A21     		movs	r1, #58
 6007 000e FFF7FEFF 		bl	I2CReadBit
1655:mpu6050.c     ****     return buffer[0];
 6008              		.loc 1 1655 0
 6009 0012 054B     		ldr	r3, .L486+4
 6010 0014 1B78     		ldrb	r3, [r3]
 6011 0016 5A1E     		subs	r2, r3, #1
 6012 0018 9341     		sbcs	r3, r3, r2
 6013 001a DBB2     		uxtb	r3, r3
1656:mpu6050.c     **** }
 6014              		.loc 1 1656 0
 6015 001c 1800     		movs	r0, r3
 6016 001e BD46     		mov	sp, r7
 6017              		@ sp needed
 6018 0020 80BD     		pop	{r7, pc}
 6019              	.L487:
 6020 0022 C046     		.align	2
 6021              	.L486:
 6022 0024 00000000 		.word	devAddr
 6023 0028 00000000 		.word	buffer
 6024              		.cfi_endproc
 6025              	.LFE130:
 6026              		.size	MPU6050_getIntMotionStatus, .-MPU6050_getIntMotionStatus
 6027              		.section	.text.MPU6050_getIntZeroMotionStatus,"ax",%progbits
 6028              		.align	2
 6029              		.global	MPU6050_getIntZeroMotionStatus
 6030              		.code	16
 6031              		.thumb_func
 6032              		.type	MPU6050_getIntZeroMotionStatus, %function
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 136


 6033              	MPU6050_getIntZeroMotionStatus:
 6034              	.LFB131:
1657:mpu6050.c     **** /** Get Zero Motion Detection interrupt status.
1658:mpu6050.c     ****  * This bit automatically sets to 1 when a Zero Motion Detection interrupt has
1659:mpu6050.c     ****  * been generated. The bit clears to 0 after the register has been read.
1660:mpu6050.c     ****  * @return Current interrupt status
1661:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1662:mpu6050.c     ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1663:mpu6050.c     ****  */
1664:mpu6050.c     **** bool MPU6050_getIntZeroMotionStatus() {
 6035              		.loc 1 1664 0
 6036              		.cfi_startproc
 6037              		@ args = 0, pretend = 0, frame = 0
 6038              		@ frame_needed = 1, uses_anonymous_args = 0
 6039 0000 80B5     		push	{r7, lr}
 6040              		.cfi_def_cfa_offset 8
 6041              		.cfi_offset 7, -8
 6042              		.cfi_offset 14, -4
 6043 0002 00AF     		add	r7, sp, #0
 6044              		.cfi_def_cfa_register 7
1665:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 6045              		.loc 1 1665 0
 6046 0004 074B     		ldr	r3, .L490
 6047 0006 1878     		ldrb	r0, [r3]
 6048 0008 074B     		ldr	r3, .L490+4
 6049 000a 0522     		movs	r2, #5
 6050 000c 3A21     		movs	r1, #58
 6051 000e FFF7FEFF 		bl	I2CReadBit
1666:mpu6050.c     ****     return buffer[0];
 6052              		.loc 1 1666 0
 6053 0012 054B     		ldr	r3, .L490+4
 6054 0014 1B78     		ldrb	r3, [r3]
 6055 0016 5A1E     		subs	r2, r3, #1
 6056 0018 9341     		sbcs	r3, r3, r2
 6057 001a DBB2     		uxtb	r3, r3
1667:mpu6050.c     **** }
 6058              		.loc 1 1667 0
 6059 001c 1800     		movs	r0, r3
 6060 001e BD46     		mov	sp, r7
 6061              		@ sp needed
 6062 0020 80BD     		pop	{r7, pc}
 6063              	.L491:
 6064 0022 C046     		.align	2
 6065              	.L490:
 6066 0024 00000000 		.word	devAddr
 6067 0028 00000000 		.word	buffer
 6068              		.cfi_endproc
 6069              	.LFE131:
 6070              		.size	MPU6050_getIntZeroMotionStatus, .-MPU6050_getIntZeroMotionStatus
 6071              		.section	.text.MPU6050_getIntFIFOBufferOverflowStatus,"ax",%progbits
 6072              		.align	2
 6073              		.global	MPU6050_getIntFIFOBufferOverflowStatus
 6074              		.code	16
 6075              		.thumb_func
 6076              		.type	MPU6050_getIntFIFOBufferOverflowStatus, %function
 6077              	MPU6050_getIntFIFOBufferOverflowStatus:
 6078              	.LFB132:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 137


1668:mpu6050.c     **** /** Get FIFO Buffer Overflow interrupt status.
1669:mpu6050.c     ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1670:mpu6050.c     ****  * generated. The bit clears to 0 after the register has been read.
1671:mpu6050.c     ****  * @return Current interrupt status
1672:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1673:mpu6050.c     ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1674:mpu6050.c     ****  */
1675:mpu6050.c     **** bool MPU6050_getIntFIFOBufferOverflowStatus() {
 6079              		.loc 1 1675 0
 6080              		.cfi_startproc
 6081              		@ args = 0, pretend = 0, frame = 0
 6082              		@ frame_needed = 1, uses_anonymous_args = 0
 6083 0000 80B5     		push	{r7, lr}
 6084              		.cfi_def_cfa_offset 8
 6085              		.cfi_offset 7, -8
 6086              		.cfi_offset 14, -4
 6087 0002 00AF     		add	r7, sp, #0
 6088              		.cfi_def_cfa_register 7
1676:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 6089              		.loc 1 1676 0
 6090 0004 074B     		ldr	r3, .L494
 6091 0006 1878     		ldrb	r0, [r3]
 6092 0008 074B     		ldr	r3, .L494+4
 6093 000a 0422     		movs	r2, #4
 6094 000c 3A21     		movs	r1, #58
 6095 000e FFF7FEFF 		bl	I2CReadBit
1677:mpu6050.c     ****     return buffer[0];
 6096              		.loc 1 1677 0
 6097 0012 054B     		ldr	r3, .L494+4
 6098 0014 1B78     		ldrb	r3, [r3]
 6099 0016 5A1E     		subs	r2, r3, #1
 6100 0018 9341     		sbcs	r3, r3, r2
 6101 001a DBB2     		uxtb	r3, r3
1678:mpu6050.c     **** }
 6102              		.loc 1 1678 0
 6103 001c 1800     		movs	r0, r3
 6104 001e BD46     		mov	sp, r7
 6105              		@ sp needed
 6106 0020 80BD     		pop	{r7, pc}
 6107              	.L495:
 6108 0022 C046     		.align	2
 6109              	.L494:
 6110 0024 00000000 		.word	devAddr
 6111 0028 00000000 		.word	buffer
 6112              		.cfi_endproc
 6113              	.LFE132:
 6114              		.size	MPU6050_getIntFIFOBufferOverflowStatus, .-MPU6050_getIntFIFOBufferOverflowStatus
 6115              		.section	.text.MPU6050_getIntI2CMasterStatus,"ax",%progbits
 6116              		.align	2
 6117              		.global	MPU6050_getIntI2CMasterStatus
 6118              		.code	16
 6119              		.thumb_func
 6120              		.type	MPU6050_getIntI2CMasterStatus, %function
 6121              	MPU6050_getIntI2CMasterStatus:
 6122              	.LFB133:
1679:mpu6050.c     **** /** Get I2C Master interrupt status.
1680:mpu6050.c     ****  * This bit automatically sets to 1 when an I2C Master interrupt has been
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 138


1681:mpu6050.c     ****  * generated. For a list of I2C Master interrupts, please refer to Register 54.
1682:mpu6050.c     ****  * The bit clears to 0 after the register has been read.
1683:mpu6050.c     ****  * @return Current interrupt status
1684:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1685:mpu6050.c     ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1686:mpu6050.c     ****  */
1687:mpu6050.c     **** bool MPU6050_getIntI2CMasterStatus() {
 6123              		.loc 1 1687 0
 6124              		.cfi_startproc
 6125              		@ args = 0, pretend = 0, frame = 0
 6126              		@ frame_needed = 1, uses_anonymous_args = 0
 6127 0000 80B5     		push	{r7, lr}
 6128              		.cfi_def_cfa_offset 8
 6129              		.cfi_offset 7, -8
 6130              		.cfi_offset 14, -4
 6131 0002 00AF     		add	r7, sp, #0
 6132              		.cfi_def_cfa_register 7
1688:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 6133              		.loc 1 1688 0
 6134 0004 074B     		ldr	r3, .L498
 6135 0006 1878     		ldrb	r0, [r3]
 6136 0008 074B     		ldr	r3, .L498+4
 6137 000a 0322     		movs	r2, #3
 6138 000c 3A21     		movs	r1, #58
 6139 000e FFF7FEFF 		bl	I2CReadBit
1689:mpu6050.c     ****     return buffer[0];
 6140              		.loc 1 1689 0
 6141 0012 054B     		ldr	r3, .L498+4
 6142 0014 1B78     		ldrb	r3, [r3]
 6143 0016 5A1E     		subs	r2, r3, #1
 6144 0018 9341     		sbcs	r3, r3, r2
 6145 001a DBB2     		uxtb	r3, r3
1690:mpu6050.c     **** }
 6146              		.loc 1 1690 0
 6147 001c 1800     		movs	r0, r3
 6148 001e BD46     		mov	sp, r7
 6149              		@ sp needed
 6150 0020 80BD     		pop	{r7, pc}
 6151              	.L499:
 6152 0022 C046     		.align	2
 6153              	.L498:
 6154 0024 00000000 		.word	devAddr
 6155 0028 00000000 		.word	buffer
 6156              		.cfi_endproc
 6157              	.LFE133:
 6158              		.size	MPU6050_getIntI2CMasterStatus, .-MPU6050_getIntI2CMasterStatus
 6159              		.section	.text.MPU6050_getIntDataReadyStatus,"ax",%progbits
 6160              		.align	2
 6161              		.global	MPU6050_getIntDataReadyStatus
 6162              		.code	16
 6163              		.thumb_func
 6164              		.type	MPU6050_getIntDataReadyStatus, %function
 6165              	MPU6050_getIntDataReadyStatus:
 6166              	.LFB134:
1691:mpu6050.c     **** /** Get Data Ready interrupt status.
1692:mpu6050.c     ****  * This bit automatically sets to 1 when a Data Ready interrupt has been
1693:mpu6050.c     ****  * generated. The bit clears to 0 after the register has been read.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 139


1694:mpu6050.c     ****  * @return Current interrupt status
1695:mpu6050.c     ****  * @see MPU6050_RA_INT_STATUS
1696:mpu6050.c     ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1697:mpu6050.c     ****  */
1698:mpu6050.c     **** bool MPU6050_getIntDataReadyStatus() {
 6167              		.loc 1 1698 0
 6168              		.cfi_startproc
 6169              		@ args = 0, pretend = 0, frame = 0
 6170              		@ frame_needed = 1, uses_anonymous_args = 0
 6171 0000 80B5     		push	{r7, lr}
 6172              		.cfi_def_cfa_offset 8
 6173              		.cfi_offset 7, -8
 6174              		.cfi_offset 14, -4
 6175 0002 00AF     		add	r7, sp, #0
 6176              		.cfi_def_cfa_register 7
1699:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 6177              		.loc 1 1699 0
 6178 0004 074B     		ldr	r3, .L502
 6179 0006 1878     		ldrb	r0, [r3]
 6180 0008 074B     		ldr	r3, .L502+4
 6181 000a 0022     		movs	r2, #0
 6182 000c 3A21     		movs	r1, #58
 6183 000e FFF7FEFF 		bl	I2CReadBit
1700:mpu6050.c     ****     return buffer[0];
 6184              		.loc 1 1700 0
 6185 0012 054B     		ldr	r3, .L502+4
 6186 0014 1B78     		ldrb	r3, [r3]
 6187 0016 5A1E     		subs	r2, r3, #1
 6188 0018 9341     		sbcs	r3, r3, r2
 6189 001a DBB2     		uxtb	r3, r3
1701:mpu6050.c     **** }
 6190              		.loc 1 1701 0
 6191 001c 1800     		movs	r0, r3
 6192 001e BD46     		mov	sp, r7
 6193              		@ sp needed
 6194 0020 80BD     		pop	{r7, pc}
 6195              	.L503:
 6196 0022 C046     		.align	2
 6197              	.L502:
 6198 0024 00000000 		.word	devAddr
 6199 0028 00000000 		.word	buffer
 6200              		.cfi_endproc
 6201              	.LFE134:
 6202              		.size	MPU6050_getIntDataReadyStatus, .-MPU6050_getIntDataReadyStatus
 6203              		.section	.text.MPU6050_getMotion9,"ax",%progbits
 6204              		.align	2
 6205              		.global	MPU6050_getMotion9
 6206              		.code	16
 6207              		.thumb_func
 6208              		.type	MPU6050_getMotion9, %function
 6209              	MPU6050_getMotion9:
 6210              	.LFB135:
1702:mpu6050.c     **** 
1703:mpu6050.c     **** // ACCEL_*OUT_* registers
1704:mpu6050.c     **** 
1705:mpu6050.c     **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1706:mpu6050.c     ****  * FUNCTION NOT FULLY IMPLEMENTED YET.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 140


1707:mpu6050.c     ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1708:mpu6050.c     ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1709:mpu6050.c     ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1710:mpu6050.c     ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1711:mpu6050.c     ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1712:mpu6050.c     ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1713:mpu6050.c     ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1714:mpu6050.c     ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1715:mpu6050.c     ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1716:mpu6050.c     ****  * @see getMotion6()
1717:mpu6050.c     ****  * @see getAcceleration()
1718:mpu6050.c     ****  * @see getRotation()
1719:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_XOUT_H
1720:mpu6050.c     ****  */
1721:mpu6050.c     **** void MPU6050_getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6211              		.loc 1 1721 0
 6212              		.cfi_startproc
 6213              		@ args = 20, pretend = 0, frame = 16
 6214              		@ frame_needed = 1, uses_anonymous_args = 0
 6215 0000 80B5     		push	{r7, lr}
 6216              		.cfi_def_cfa_offset 8
 6217              		.cfi_offset 7, -8
 6218              		.cfi_offset 14, -4
 6219 0002 84B0     		sub	sp, sp, #16
 6220              		.cfi_def_cfa_offset 24
 6221 0004 00AF     		add	r7, sp, #0
 6222              		.cfi_def_cfa_register 7
 6223 0006 F860     		str	r0, [r7, #12]
 6224 0008 B960     		str	r1, [r7, #8]
 6225 000a 7A60     		str	r2, [r7, #4]
 6226 000c 3B60     		str	r3, [r7]
1722:mpu6050.c     ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6227              		.loc 1 1722 0
 6228 000e 364B     		ldr	r3, .L505
 6229 0010 1622     		movs	r2, #22
 6230 0012 3B21     		movs	r1, #59
 6231 0014 6920     		movs	r0, #105
 6232 0016 FFF7FEFF 		bl	I2CReadBytes
1723:mpu6050.c     **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6233              		.loc 1 1723 0
 6234 001a 334B     		ldr	r3, .L505
 6235 001c 1B78     		ldrb	r3, [r3]
 6236 001e 1B02     		lsls	r3, r3, #8
 6237 0020 1AB2     		sxth	r2, r3
 6238 0022 314B     		ldr	r3, .L505
 6239 0024 5B78     		ldrb	r3, [r3, #1]
 6240 0026 1BB2     		sxth	r3, r3
 6241 0028 1343     		orrs	r3, r2
 6242 002a 1AB2     		sxth	r2, r3
 6243 002c FB68     		ldr	r3, [r7, #12]
 6244 002e 1A80     		strh	r2, [r3]
1724:mpu6050.c     **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6245              		.loc 1 1724 0
 6246 0030 2D4B     		ldr	r3, .L505
 6247 0032 9B78     		ldrb	r3, [r3, #2]
 6248 0034 1B02     		lsls	r3, r3, #8
 6249 0036 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 141


 6250 0038 2B4B     		ldr	r3, .L505
 6251 003a DB78     		ldrb	r3, [r3, #3]
 6252 003c 1BB2     		sxth	r3, r3
 6253 003e 1343     		orrs	r3, r2
 6254 0040 1AB2     		sxth	r2, r3
 6255 0042 BB68     		ldr	r3, [r7, #8]
 6256 0044 1A80     		strh	r2, [r3]
1725:mpu6050.c     **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6257              		.loc 1 1725 0
 6258 0046 284B     		ldr	r3, .L505
 6259 0048 1B79     		ldrb	r3, [r3, #4]
 6260 004a 1B02     		lsls	r3, r3, #8
 6261 004c 1AB2     		sxth	r2, r3
 6262 004e 264B     		ldr	r3, .L505
 6263 0050 5B79     		ldrb	r3, [r3, #5]
 6264 0052 1BB2     		sxth	r3, r3
 6265 0054 1343     		orrs	r3, r2
 6266 0056 1AB2     		sxth	r2, r3
 6267 0058 7B68     		ldr	r3, [r7, #4]
 6268 005a 1A80     		strh	r2, [r3]
1726:mpu6050.c     **** //	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
1727:mpu6050.c     **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6269              		.loc 1 1727 0
 6270 005c 224B     		ldr	r3, .L505
 6271 005e 1B7A     		ldrb	r3, [r3, #8]
 6272 0060 1B02     		lsls	r3, r3, #8
 6273 0062 1AB2     		sxth	r2, r3
 6274 0064 204B     		ldr	r3, .L505
 6275 0066 5B7A     		ldrb	r3, [r3, #9]
 6276 0068 1BB2     		sxth	r3, r3
 6277 006a 1343     		orrs	r3, r2
 6278 006c 1AB2     		sxth	r2, r3
 6279 006e 3B68     		ldr	r3, [r7]
 6280 0070 1A80     		strh	r2, [r3]
1728:mpu6050.c     **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6281              		.loc 1 1728 0
 6282 0072 1D4B     		ldr	r3, .L505
 6283 0074 9B7A     		ldrb	r3, [r3, #10]
 6284 0076 1B02     		lsls	r3, r3, #8
 6285 0078 1AB2     		sxth	r2, r3
 6286 007a 1B4B     		ldr	r3, .L505
 6287 007c DB7A     		ldrb	r3, [r3, #11]
 6288 007e 1BB2     		sxth	r3, r3
 6289 0080 1343     		orrs	r3, r2
 6290 0082 1AB2     		sxth	r2, r3
 6291 0084 BB69     		ldr	r3, [r7, #24]
 6292 0086 1A80     		strh	r2, [r3]
1729:mpu6050.c     **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6293              		.loc 1 1729 0
 6294 0088 174B     		ldr	r3, .L505
 6295 008a 1B7B     		ldrb	r3, [r3, #12]
 6296 008c 1B02     		lsls	r3, r3, #8
 6297 008e 1AB2     		sxth	r2, r3
 6298 0090 154B     		ldr	r3, .L505
 6299 0092 5B7B     		ldrb	r3, [r3, #13]
 6300 0094 1BB2     		sxth	r3, r3
 6301 0096 1343     		orrs	r3, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 142


 6302 0098 1AB2     		sxth	r2, r3
 6303 009a FB69     		ldr	r3, [r7, #28]
 6304 009c 1A80     		strh	r2, [r3]
1730:mpu6050.c     **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1731:mpu6050.c     **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6305              		.loc 1 1731 0
 6306 009e 124B     		ldr	r3, .L505
 6307 00a0 1B7C     		ldrb	r3, [r3, #16]
 6308 00a2 1B02     		lsls	r3, r3, #8
 6309 00a4 1AB2     		sxth	r2, r3
 6310 00a6 104B     		ldr	r3, .L505
 6311 00a8 DB7B     		ldrb	r3, [r3, #15]
 6312 00aa 1BB2     		sxth	r3, r3
 6313 00ac 1343     		orrs	r3, r2
 6314 00ae 1AB2     		sxth	r2, r3
 6315 00b0 3B6A     		ldr	r3, [r7, #32]
 6316 00b2 1A80     		strh	r2, [r3]
1732:mpu6050.c     **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6317              		.loc 1 1732 0
 6318 00b4 0C4B     		ldr	r3, .L505
 6319 00b6 9B7C     		ldrb	r3, [r3, #18]
 6320 00b8 1B02     		lsls	r3, r3, #8
 6321 00ba 1AB2     		sxth	r2, r3
 6322 00bc 0A4B     		ldr	r3, .L505
 6323 00be 5B7C     		ldrb	r3, [r3, #17]
 6324 00c0 1BB2     		sxth	r3, r3
 6325 00c2 1343     		orrs	r3, r2
 6326 00c4 1AB2     		sxth	r2, r3
 6327 00c6 7B6A     		ldr	r3, [r7, #36]
 6328 00c8 1A80     		strh	r2, [r3]
1733:mpu6050.c     **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6329              		.loc 1 1733 0
 6330 00ca 074B     		ldr	r3, .L505
 6331 00cc 1B7D     		ldrb	r3, [r3, #20]
 6332 00ce 1B02     		lsls	r3, r3, #8
 6333 00d0 1AB2     		sxth	r2, r3
 6334 00d2 054B     		ldr	r3, .L505
 6335 00d4 DB7C     		ldrb	r3, [r3, #19]
 6336 00d6 1BB2     		sxth	r3, r3
 6337 00d8 1343     		orrs	r3, r2
 6338 00da 1AB2     		sxth	r2, r3
 6339 00dc BB6A     		ldr	r3, [r7, #40]
 6340 00de 1A80     		strh	r2, [r3]
1734:mpu6050.c     **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1735:mpu6050.c     **** 
1736:mpu6050.c     **** }
 6341              		.loc 1 1736 0
 6342 00e0 C046     		nop
 6343 00e2 BD46     		mov	sp, r7
 6344 00e4 04B0     		add	sp, sp, #16
 6345              		@ sp needed
 6346 00e6 80BD     		pop	{r7, pc}
 6347              	.L506:
 6348              		.align	2
 6349              	.L505:
 6350 00e8 00000000 		.word	buffer
 6351              		.cfi_endproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 143


 6352              	.LFE135:
 6353              		.size	MPU6050_getMotion9, .-MPU6050_getMotion9
 6354              		.section	.text.MPU6050_getMotion9t,"ax",%progbits
 6355              		.align	2
 6356              		.global	MPU6050_getMotion9t
 6357              		.code	16
 6358              		.thumb_func
 6359              		.type	MPU6050_getMotion9t, %function
 6360              	MPU6050_getMotion9t:
 6361              	.LFB136:
1737:mpu6050.c     **** 
1738:mpu6050.c     **** 
1739:mpu6050.c     **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1740:mpu6050.c     ****  * assumes setup of compass with setup_compass
1741:mpu6050.c     ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1742:mpu6050.c     ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1743:mpu6050.c     ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1744:mpu6050.c     ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1745:mpu6050.c     ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1746:mpu6050.c     ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1747:mpu6050.c     ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1748:mpu6050.c     ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1749:mpu6050.c     ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1750:mpu6050.c     ****  * @param t  16-bit signed integer container for temperature value
1751:mpu6050.c     ****  * @see getMotion6()
1752:mpu6050.c     ****  * @see getAcceleration()
1753:mpu6050.c     ****  * @see getRotation()
1754:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_XOUT_H
1755:mpu6050.c     ****  * @see setup_compass
1756:mpu6050.c     ****  */
1757:mpu6050.c     **** void MPU6050_getMotion9t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6362              		.loc 1 1757 0
 6363              		.cfi_startproc
 6364              		@ args = 24, pretend = 0, frame = 16
 6365              		@ frame_needed = 1, uses_anonymous_args = 0
 6366 0000 80B5     		push	{r7, lr}
 6367              		.cfi_def_cfa_offset 8
 6368              		.cfi_offset 7, -8
 6369              		.cfi_offset 14, -4
 6370 0002 84B0     		sub	sp, sp, #16
 6371              		.cfi_def_cfa_offset 24
 6372 0004 00AF     		add	r7, sp, #0
 6373              		.cfi_def_cfa_register 7
 6374 0006 F860     		str	r0, [r7, #12]
 6375 0008 B960     		str	r1, [r7, #8]
 6376 000a 7A60     		str	r2, [r7, #4]
 6377 000c 3B60     		str	r3, [r7]
1758:mpu6050.c     ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6378              		.loc 1 1758 0
 6379 000e 3C4B     		ldr	r3, .L508
 6380 0010 1622     		movs	r2, #22
 6381 0012 3B21     		movs	r1, #59
 6382 0014 6920     		movs	r0, #105
 6383 0016 FFF7FEFF 		bl	I2CReadBytes
1759:mpu6050.c     **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6384              		.loc 1 1759 0
 6385 001a 394B     		ldr	r3, .L508
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 144


 6386 001c 1B78     		ldrb	r3, [r3]
 6387 001e 1B02     		lsls	r3, r3, #8
 6388 0020 1AB2     		sxth	r2, r3
 6389 0022 374B     		ldr	r3, .L508
 6390 0024 5B78     		ldrb	r3, [r3, #1]
 6391 0026 1BB2     		sxth	r3, r3
 6392 0028 1343     		orrs	r3, r2
 6393 002a 1AB2     		sxth	r2, r3
 6394 002c FB68     		ldr	r3, [r7, #12]
 6395 002e 1A80     		strh	r2, [r3]
1760:mpu6050.c     **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6396              		.loc 1 1760 0
 6397 0030 334B     		ldr	r3, .L508
 6398 0032 9B78     		ldrb	r3, [r3, #2]
 6399 0034 1B02     		lsls	r3, r3, #8
 6400 0036 1AB2     		sxth	r2, r3
 6401 0038 314B     		ldr	r3, .L508
 6402 003a DB78     		ldrb	r3, [r3, #3]
 6403 003c 1BB2     		sxth	r3, r3
 6404 003e 1343     		orrs	r3, r2
 6405 0040 1AB2     		sxth	r2, r3
 6406 0042 BB68     		ldr	r3, [r7, #8]
 6407 0044 1A80     		strh	r2, [r3]
1761:mpu6050.c     **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6408              		.loc 1 1761 0
 6409 0046 2E4B     		ldr	r3, .L508
 6410 0048 1B79     		ldrb	r3, [r3, #4]
 6411 004a 1B02     		lsls	r3, r3, #8
 6412 004c 1AB2     		sxth	r2, r3
 6413 004e 2C4B     		ldr	r3, .L508
 6414 0050 5B79     		ldrb	r3, [r3, #5]
 6415 0052 1BB2     		sxth	r3, r3
 6416 0054 1343     		orrs	r3, r2
 6417 0056 1AB2     		sxth	r2, r3
 6418 0058 7B68     		ldr	r3, [r7, #4]
 6419 005a 1A80     		strh	r2, [r3]
1762:mpu6050.c     **** 	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
 6420              		.loc 1 1762 0
 6421 005c 284B     		ldr	r3, .L508
 6422 005e 9B79     		ldrb	r3, [r3, #6]
 6423 0060 1B02     		lsls	r3, r3, #8
 6424 0062 1AB2     		sxth	r2, r3
 6425 0064 264B     		ldr	r3, .L508
 6426 0066 DB79     		ldrb	r3, [r3, #7]
 6427 0068 1BB2     		sxth	r3, r3
 6428 006a 1343     		orrs	r3, r2
 6429 006c 1AB2     		sxth	r2, r3
 6430 006e FB6A     		ldr	r3, [r7, #44]
 6431 0070 1A80     		strh	r2, [r3]
1763:mpu6050.c     **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6432              		.loc 1 1763 0
 6433 0072 234B     		ldr	r3, .L508
 6434 0074 1B7A     		ldrb	r3, [r3, #8]
 6435 0076 1B02     		lsls	r3, r3, #8
 6436 0078 1AB2     		sxth	r2, r3
 6437 007a 214B     		ldr	r3, .L508
 6438 007c 5B7A     		ldrb	r3, [r3, #9]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 145


 6439 007e 1BB2     		sxth	r3, r3
 6440 0080 1343     		orrs	r3, r2
 6441 0082 1AB2     		sxth	r2, r3
 6442 0084 3B68     		ldr	r3, [r7]
 6443 0086 1A80     		strh	r2, [r3]
1764:mpu6050.c     **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6444              		.loc 1 1764 0
 6445 0088 1D4B     		ldr	r3, .L508
 6446 008a 9B7A     		ldrb	r3, [r3, #10]
 6447 008c 1B02     		lsls	r3, r3, #8
 6448 008e 1AB2     		sxth	r2, r3
 6449 0090 1B4B     		ldr	r3, .L508
 6450 0092 DB7A     		ldrb	r3, [r3, #11]
 6451 0094 1BB2     		sxth	r3, r3
 6452 0096 1343     		orrs	r3, r2
 6453 0098 1AB2     		sxth	r2, r3
 6454 009a BB69     		ldr	r3, [r7, #24]
 6455 009c 1A80     		strh	r2, [r3]
1765:mpu6050.c     **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6456              		.loc 1 1765 0
 6457 009e 184B     		ldr	r3, .L508
 6458 00a0 1B7B     		ldrb	r3, [r3, #12]
 6459 00a2 1B02     		lsls	r3, r3, #8
 6460 00a4 1AB2     		sxth	r2, r3
 6461 00a6 164B     		ldr	r3, .L508
 6462 00a8 5B7B     		ldrb	r3, [r3, #13]
 6463 00aa 1BB2     		sxth	r3, r3
 6464 00ac 1343     		orrs	r3, r2
 6465 00ae 1AB2     		sxth	r2, r3
 6466 00b0 FB69     		ldr	r3, [r7, #28]
 6467 00b2 1A80     		strh	r2, [r3]
1766:mpu6050.c     **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1767:mpu6050.c     **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6468              		.loc 1 1767 0
 6469 00b4 124B     		ldr	r3, .L508
 6470 00b6 1B7C     		ldrb	r3, [r3, #16]
 6471 00b8 1B02     		lsls	r3, r3, #8
 6472 00ba 1AB2     		sxth	r2, r3
 6473 00bc 104B     		ldr	r3, .L508
 6474 00be DB7B     		ldrb	r3, [r3, #15]
 6475 00c0 1BB2     		sxth	r3, r3
 6476 00c2 1343     		orrs	r3, r2
 6477 00c4 1AB2     		sxth	r2, r3
 6478 00c6 3B6A     		ldr	r3, [r7, #32]
 6479 00c8 1A80     		strh	r2, [r3]
1768:mpu6050.c     **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6480              		.loc 1 1768 0
 6481 00ca 0D4B     		ldr	r3, .L508
 6482 00cc 9B7C     		ldrb	r3, [r3, #18]
 6483 00ce 1B02     		lsls	r3, r3, #8
 6484 00d0 1AB2     		sxth	r2, r3
 6485 00d2 0B4B     		ldr	r3, .L508
 6486 00d4 5B7C     		ldrb	r3, [r3, #17]
 6487 00d6 1BB2     		sxth	r3, r3
 6488 00d8 1343     		orrs	r3, r2
 6489 00da 1AB2     		sxth	r2, r3
 6490 00dc 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 146


 6491 00de 1A80     		strh	r2, [r3]
1769:mpu6050.c     **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6492              		.loc 1 1769 0
 6493 00e0 074B     		ldr	r3, .L508
 6494 00e2 1B7D     		ldrb	r3, [r3, #20]
 6495 00e4 1B02     		lsls	r3, r3, #8
 6496 00e6 1AB2     		sxth	r2, r3
 6497 00e8 054B     		ldr	r3, .L508
 6498 00ea DB7C     		ldrb	r3, [r3, #19]
 6499 00ec 1BB2     		sxth	r3, r3
 6500 00ee 1343     		orrs	r3, r2
 6501 00f0 1AB2     		sxth	r2, r3
 6502 00f2 BB6A     		ldr	r3, [r7, #40]
 6503 00f4 1A80     		strh	r2, [r3]
1770:mpu6050.c     **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1771:mpu6050.c     **** 
1772:mpu6050.c     **** }
 6504              		.loc 1 1772 0
 6505 00f6 C046     		nop
 6506 00f8 BD46     		mov	sp, r7
 6507 00fa 04B0     		add	sp, sp, #16
 6508              		@ sp needed
 6509 00fc 80BD     		pop	{r7, pc}
 6510              	.L509:
 6511 00fe C046     		.align	2
 6512              	.L508:
 6513 0100 00000000 		.word	buffer
 6514              		.cfi_endproc
 6515              	.LFE136:
 6516              		.size	MPU6050_getMotion9t, .-MPU6050_getMotion9t
 6517              		.section	.text.MPU6050_getMotion6,"ax",%progbits
 6518              		.align	2
 6519              		.global	MPU6050_getMotion6
 6520              		.code	16
 6521              		.thumb_func
 6522              		.type	MPU6050_getMotion6, %function
 6523              	MPU6050_getMotion6:
 6524              	.LFB137:
1773:mpu6050.c     **** 
1774:mpu6050.c     **** /** Get raw 6-axis motion sensor readings (accel/gyro).
1775:mpu6050.c     ****  * Retrieves all currently available motion sensor values.
1776:mpu6050.c     ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1777:mpu6050.c     ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1778:mpu6050.c     ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1779:mpu6050.c     ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1780:mpu6050.c     ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1781:mpu6050.c     ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1782:mpu6050.c     ****  * @see getAcceleration()
1783:mpu6050.c     ****  * @see getRotation()
1784:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_XOUT_H
1785:mpu6050.c     ****  */
1786:mpu6050.c     **** void MPU6050_getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6525              		.loc 1 1786 0
 6526              		.cfi_startproc
 6527              		@ args = 8, pretend = 0, frame = 16
 6528              		@ frame_needed = 1, uses_anonymous_args = 0
 6529 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 147


 6530              		.cfi_def_cfa_offset 8
 6531              		.cfi_offset 7, -8
 6532              		.cfi_offset 14, -4
 6533 0002 84B0     		sub	sp, sp, #16
 6534              		.cfi_def_cfa_offset 24
 6535 0004 00AF     		add	r7, sp, #0
 6536              		.cfi_def_cfa_register 7
 6537 0006 F860     		str	r0, [r7, #12]
 6538 0008 B960     		str	r1, [r7, #8]
 6539 000a 7A60     		str	r2, [r7, #4]
 6540 000c 3B60     		str	r3, [r7]
1787:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6541              		.loc 1 1787 0
 6542 000e 264B     		ldr	r3, .L511
 6543 0010 1878     		ldrb	r0, [r3]
 6544 0012 264B     		ldr	r3, .L511+4
 6545 0014 0E22     		movs	r2, #14
 6546 0016 3B21     		movs	r1, #59
 6547 0018 FFF7FEFF 		bl	I2CReadBytes
1788:mpu6050.c     ****     //fixme the following code needs to be examined. causes a interrupt to NMI_VECTOR
1789:mpu6050.c     ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6548              		.loc 1 1789 0
 6549 001c 234B     		ldr	r3, .L511+4
 6550 001e 1B78     		ldrb	r3, [r3]
 6551 0020 1B02     		lsls	r3, r3, #8
 6552 0022 1AB2     		sxth	r2, r3
 6553 0024 214B     		ldr	r3, .L511+4
 6554 0026 5B78     		ldrb	r3, [r3, #1]
 6555 0028 1BB2     		sxth	r3, r3
 6556 002a 1343     		orrs	r3, r2
 6557 002c 1AB2     		sxth	r2, r3
 6558 002e FB68     		ldr	r3, [r7, #12]
 6559 0030 1A80     		strh	r2, [r3]
1790:mpu6050.c     ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6560              		.loc 1 1790 0
 6561 0032 1E4B     		ldr	r3, .L511+4
 6562 0034 9B78     		ldrb	r3, [r3, #2]
 6563 0036 1B02     		lsls	r3, r3, #8
 6564 0038 1AB2     		sxth	r2, r3
 6565 003a 1C4B     		ldr	r3, .L511+4
 6566 003c DB78     		ldrb	r3, [r3, #3]
 6567 003e 1BB2     		sxth	r3, r3
 6568 0040 1343     		orrs	r3, r2
 6569 0042 1AB2     		sxth	r2, r3
 6570 0044 BB68     		ldr	r3, [r7, #8]
 6571 0046 1A80     		strh	r2, [r3]
1791:mpu6050.c     ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6572              		.loc 1 1791 0
 6573 0048 184B     		ldr	r3, .L511+4
 6574 004a 1B79     		ldrb	r3, [r3, #4]
 6575 004c 1B02     		lsls	r3, r3, #8
 6576 004e 1AB2     		sxth	r2, r3
 6577 0050 164B     		ldr	r3, .L511+4
 6578 0052 5B79     		ldrb	r3, [r3, #5]
 6579 0054 1BB2     		sxth	r3, r3
 6580 0056 1343     		orrs	r3, r2
 6581 0058 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 148


 6582 005a 7B68     		ldr	r3, [r7, #4]
 6583 005c 1A80     		strh	r2, [r3]
1792:mpu6050.c     ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6584              		.loc 1 1792 0
 6585 005e 134B     		ldr	r3, .L511+4
 6586 0060 1B7A     		ldrb	r3, [r3, #8]
 6587 0062 1B02     		lsls	r3, r3, #8
 6588 0064 1AB2     		sxth	r2, r3
 6589 0066 114B     		ldr	r3, .L511+4
 6590 0068 5B7A     		ldrb	r3, [r3, #9]
 6591 006a 1BB2     		sxth	r3, r3
 6592 006c 1343     		orrs	r3, r2
 6593 006e 1AB2     		sxth	r2, r3
 6594 0070 3B68     		ldr	r3, [r7]
 6595 0072 1A80     		strh	r2, [r3]
1793:mpu6050.c     ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6596              		.loc 1 1793 0
 6597 0074 0D4B     		ldr	r3, .L511+4
 6598 0076 9B7A     		ldrb	r3, [r3, #10]
 6599 0078 1B02     		lsls	r3, r3, #8
 6600 007a 1AB2     		sxth	r2, r3
 6601 007c 0B4B     		ldr	r3, .L511+4
 6602 007e DB7A     		ldrb	r3, [r3, #11]
 6603 0080 1BB2     		sxth	r3, r3
 6604 0082 1343     		orrs	r3, r2
 6605 0084 1AB2     		sxth	r2, r3
 6606 0086 BB69     		ldr	r3, [r7, #24]
 6607 0088 1A80     		strh	r2, [r3]
1794:mpu6050.c     ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6608              		.loc 1 1794 0
 6609 008a 084B     		ldr	r3, .L511+4
 6610 008c 1B7B     		ldrb	r3, [r3, #12]
 6611 008e 1B02     		lsls	r3, r3, #8
 6612 0090 1AB2     		sxth	r2, r3
 6613 0092 064B     		ldr	r3, .L511+4
 6614 0094 5B7B     		ldrb	r3, [r3, #13]
 6615 0096 1BB2     		sxth	r3, r3
 6616 0098 1343     		orrs	r3, r2
 6617 009a 1AB2     		sxth	r2, r3
 6618 009c FB69     		ldr	r3, [r7, #28]
 6619 009e 1A80     		strh	r2, [r3]
1795:mpu6050.c     **** }
 6620              		.loc 1 1795 0
 6621 00a0 C046     		nop
 6622 00a2 BD46     		mov	sp, r7
 6623 00a4 04B0     		add	sp, sp, #16
 6624              		@ sp needed
 6625 00a6 80BD     		pop	{r7, pc}
 6626              	.L512:
 6627              		.align	2
 6628              	.L511:
 6629 00a8 00000000 		.word	devAddr
 6630 00ac 00000000 		.word	buffer
 6631              		.cfi_endproc
 6632              	.LFE137:
 6633              		.size	MPU6050_getMotion6, .-MPU6050_getMotion6
 6634              		.section	.text.MPU6050_getMotion6t,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 149


 6635              		.align	2
 6636              		.global	MPU6050_getMotion6t
 6637              		.code	16
 6638              		.thumb_func
 6639              		.type	MPU6050_getMotion6t, %function
 6640              	MPU6050_getMotion6t:
 6641              	.LFB138:
1796:mpu6050.c     **** 
1797:mpu6050.c     **** /** Get raw 6-axis motion sensor readings (accel/gyro) + temperature.
1798:mpu6050.c     ****  * Retrieves all currently available motion sensor values.
1799:mpu6050.c     ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1800:mpu6050.c     ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1801:mpu6050.c     ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1802:mpu6050.c     ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1803:mpu6050.c     ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1804:mpu6050.c     ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1805:mpu6050.c     ****  * @param t  16-bit signed integer container for temperature value
1806:mpu6050.c     ****  * @see getAcceleration()
1807:mpu6050.c     ****  * @see getRotation()
1808:mpu6050.c     ****  * @see getTemperature()
1809:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_XOUT_H
1810:mpu6050.c     ****  */
1811:mpu6050.c     **** void MPU6050_getMotion6t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6642              		.loc 1 1811 0
 6643              		.cfi_startproc
 6644              		@ args = 12, pretend = 0, frame = 16
 6645              		@ frame_needed = 1, uses_anonymous_args = 0
 6646 0000 80B5     		push	{r7, lr}
 6647              		.cfi_def_cfa_offset 8
 6648              		.cfi_offset 7, -8
 6649              		.cfi_offset 14, -4
 6650 0002 84B0     		sub	sp, sp, #16
 6651              		.cfi_def_cfa_offset 24
 6652 0004 00AF     		add	r7, sp, #0
 6653              		.cfi_def_cfa_register 7
 6654 0006 F860     		str	r0, [r7, #12]
 6655 0008 B960     		str	r1, [r7, #8]
 6656 000a 7A60     		str	r2, [r7, #4]
 6657 000c 3B60     		str	r3, [r7]
1812:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6658              		.loc 1 1812 0
 6659 000e 2C4B     		ldr	r3, .L514
 6660 0010 1878     		ldrb	r0, [r3]
 6661 0012 2C4B     		ldr	r3, .L514+4
 6662 0014 0E22     		movs	r2, #14
 6663 0016 3B21     		movs	r1, #59
 6664 0018 FFF7FEFF 		bl	I2CReadBytes
1813:mpu6050.c     ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6665              		.loc 1 1813 0
 6666 001c 294B     		ldr	r3, .L514+4
 6667 001e 1B78     		ldrb	r3, [r3]
 6668 0020 1B02     		lsls	r3, r3, #8
 6669 0022 1AB2     		sxth	r2, r3
 6670 0024 274B     		ldr	r3, .L514+4
 6671 0026 5B78     		ldrb	r3, [r3, #1]
 6672 0028 1BB2     		sxth	r3, r3
 6673 002a 1343     		orrs	r3, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 150


 6674 002c 1AB2     		sxth	r2, r3
 6675 002e FB68     		ldr	r3, [r7, #12]
 6676 0030 1A80     		strh	r2, [r3]
1814:mpu6050.c     ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6677              		.loc 1 1814 0
 6678 0032 244B     		ldr	r3, .L514+4
 6679 0034 9B78     		ldrb	r3, [r3, #2]
 6680 0036 1B02     		lsls	r3, r3, #8
 6681 0038 1AB2     		sxth	r2, r3
 6682 003a 224B     		ldr	r3, .L514+4
 6683 003c DB78     		ldrb	r3, [r3, #3]
 6684 003e 1BB2     		sxth	r3, r3
 6685 0040 1343     		orrs	r3, r2
 6686 0042 1AB2     		sxth	r2, r3
 6687 0044 BB68     		ldr	r3, [r7, #8]
 6688 0046 1A80     		strh	r2, [r3]
1815:mpu6050.c     ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6689              		.loc 1 1815 0
 6690 0048 1E4B     		ldr	r3, .L514+4
 6691 004a 1B79     		ldrb	r3, [r3, #4]
 6692 004c 1B02     		lsls	r3, r3, #8
 6693 004e 1AB2     		sxth	r2, r3
 6694 0050 1C4B     		ldr	r3, .L514+4
 6695 0052 5B79     		ldrb	r3, [r3, #5]
 6696 0054 1BB2     		sxth	r3, r3
 6697 0056 1343     		orrs	r3, r2
 6698 0058 1AB2     		sxth	r2, r3
 6699 005a 7B68     		ldr	r3, [r7, #4]
 6700 005c 1A80     		strh	r2, [r3]
1816:mpu6050.c     ****     *t  = (((int16_t)buffer[6]) << 8) | buffer[7];
 6701              		.loc 1 1816 0
 6702 005e 194B     		ldr	r3, .L514+4
 6703 0060 9B79     		ldrb	r3, [r3, #6]
 6704 0062 1B02     		lsls	r3, r3, #8
 6705 0064 1AB2     		sxth	r2, r3
 6706 0066 174B     		ldr	r3, .L514+4
 6707 0068 DB79     		ldrb	r3, [r3, #7]
 6708 006a 1BB2     		sxth	r3, r3
 6709 006c 1343     		orrs	r3, r2
 6710 006e 1AB2     		sxth	r2, r3
 6711 0070 3B6A     		ldr	r3, [r7, #32]
 6712 0072 1A80     		strh	r2, [r3]
1817:mpu6050.c     ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6713              		.loc 1 1817 0
 6714 0074 134B     		ldr	r3, .L514+4
 6715 0076 1B7A     		ldrb	r3, [r3, #8]
 6716 0078 1B02     		lsls	r3, r3, #8
 6717 007a 1AB2     		sxth	r2, r3
 6718 007c 114B     		ldr	r3, .L514+4
 6719 007e 5B7A     		ldrb	r3, [r3, #9]
 6720 0080 1BB2     		sxth	r3, r3
 6721 0082 1343     		orrs	r3, r2
 6722 0084 1AB2     		sxth	r2, r3
 6723 0086 3B68     		ldr	r3, [r7]
 6724 0088 1A80     		strh	r2, [r3]
1818:mpu6050.c     ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6725              		.loc 1 1818 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 151


 6726 008a 0E4B     		ldr	r3, .L514+4
 6727 008c 9B7A     		ldrb	r3, [r3, #10]
 6728 008e 1B02     		lsls	r3, r3, #8
 6729 0090 1AB2     		sxth	r2, r3
 6730 0092 0C4B     		ldr	r3, .L514+4
 6731 0094 DB7A     		ldrb	r3, [r3, #11]
 6732 0096 1BB2     		sxth	r3, r3
 6733 0098 1343     		orrs	r3, r2
 6734 009a 1AB2     		sxth	r2, r3
 6735 009c BB69     		ldr	r3, [r7, #24]
 6736 009e 1A80     		strh	r2, [r3]
1819:mpu6050.c     ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6737              		.loc 1 1819 0
 6738 00a0 084B     		ldr	r3, .L514+4
 6739 00a2 1B7B     		ldrb	r3, [r3, #12]
 6740 00a4 1B02     		lsls	r3, r3, #8
 6741 00a6 1AB2     		sxth	r2, r3
 6742 00a8 064B     		ldr	r3, .L514+4
 6743 00aa 5B7B     		ldrb	r3, [r3, #13]
 6744 00ac 1BB2     		sxth	r3, r3
 6745 00ae 1343     		orrs	r3, r2
 6746 00b0 1AB2     		sxth	r2, r3
 6747 00b2 FB69     		ldr	r3, [r7, #28]
 6748 00b4 1A80     		strh	r2, [r3]
1820:mpu6050.c     **** }
 6749              		.loc 1 1820 0
 6750 00b6 C046     		nop
 6751 00b8 BD46     		mov	sp, r7
 6752 00ba 04B0     		add	sp, sp, #16
 6753              		@ sp needed
 6754 00bc 80BD     		pop	{r7, pc}
 6755              	.L515:
 6756 00be C046     		.align	2
 6757              	.L514:
 6758 00c0 00000000 		.word	devAddr
 6759 00c4 00000000 		.word	buffer
 6760              		.cfi_endproc
 6761              	.LFE138:
 6762              		.size	MPU6050_getMotion6t, .-MPU6050_getMotion6t
 6763              		.section	.text.MPU6050_getAcceleration,"ax",%progbits
 6764              		.align	2
 6765              		.global	MPU6050_getAcceleration
 6766              		.code	16
 6767              		.thumb_func
 6768              		.type	MPU6050_getAcceleration, %function
 6769              	MPU6050_getAcceleration:
 6770              	.LFB139:
1821:mpu6050.c     **** 
1822:mpu6050.c     **** /** Get 3-axis accelerometer readings.
1823:mpu6050.c     ****  * These registers store the most recent accelerometer measurements.
1824:mpu6050.c     ****  * Accelerometer measurements are written to these registers at the Sample Rate
1825:mpu6050.c     ****  * as defined in Register 25.
1826:mpu6050.c     ****  *
1827:mpu6050.c     ****  * The accelerometer measurement registers, along with the temperature
1828:mpu6050.c     ****  * measurement registers, gyroscope measurement registers, and external sensor
1829:mpu6050.c     ****  * data registers, are composed of two sets of registers: an internal register
1830:mpu6050.c     ****  * set and a user-facing read register set.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 152


1831:mpu6050.c     ****  *
1832:mpu6050.c     ****  * The data within the accelerometer sensors' internal register set is always
1833:mpu6050.c     ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1834:mpu6050.c     ****  * duplicates the internal register set's data values whenever the serial
1835:mpu6050.c     ****  * interface is idle. This guarantees that a burst read of sensor registers will
1836:mpu6050.c     ****  * read measurements from the same sampling instant. Note that if burst reads
1837:mpu6050.c     ****  * are not used, the user is responsible for ensuring a set of single byte reads
1838:mpu6050.c     ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1839:mpu6050.c     ****  *
1840:mpu6050.c     ****  * Each 16-bit accelerometer measurement has a full scale defined in ACCEL_FS
1841:mpu6050.c     ****  * (Register 28). For each full scale setting, the accelerometers' sensitivity
1842:mpu6050.c     ****  * per LSB in ACCEL_xOUT is shown in the table below:
1843:mpu6050.c     ****  *
1844:mpu6050.c     ****  * <pre>
1845:mpu6050.c     ****  * AFS_SEL | Full Scale Range | LSB Sensitivity
1846:mpu6050.c     ****  * --------+------------------+----------------
1847:mpu6050.c     ****  * 0       | +/- 2g           | 8192 LSB/mg
1848:mpu6050.c     ****  * 1       | +/- 4g           | 4096 LSB/mg
1849:mpu6050.c     ****  * 2       | +/- 8g           | 2048 LSB/mg
1850:mpu6050.c     ****  * 3       | +/- 16g          | 1024 LSB/mg
1851:mpu6050.c     ****  * </pre>
1852:mpu6050.c     ****  *
1853:mpu6050.c     ****  * @param x 16-bit signed integer container for X-axis acceleration
1854:mpu6050.c     ****  * @param y 16-bit signed integer container for Y-axis acceleration
1855:mpu6050.c     ****  * @param z 16-bit signed integer container for Z-axis acceleration
1856:mpu6050.c     ****  * @see MPU6050_RA_GYRO_XOUT_H
1857:mpu6050.c     ****  */
1858:mpu6050.c     **** void MPU6050_getAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 6771              		.loc 1 1858 0
 6772              		.cfi_startproc
 6773              		@ args = 0, pretend = 0, frame = 16
 6774              		@ frame_needed = 1, uses_anonymous_args = 0
 6775 0000 80B5     		push	{r7, lr}
 6776              		.cfi_def_cfa_offset 8
 6777              		.cfi_offset 7, -8
 6778              		.cfi_offset 14, -4
 6779 0002 84B0     		sub	sp, sp, #16
 6780              		.cfi_def_cfa_offset 24
 6781 0004 00AF     		add	r7, sp, #0
 6782              		.cfi_def_cfa_register 7
 6783 0006 F860     		str	r0, [r7, #12]
 6784 0008 B960     		str	r1, [r7, #8]
 6785 000a 7A60     		str	r2, [r7, #4]
1859:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 6, buffer);
 6786              		.loc 1 1859 0
 6787 000c 154B     		ldr	r3, .L517
 6788 000e 1878     		ldrb	r0, [r3]
 6789 0010 154B     		ldr	r3, .L517+4
 6790 0012 0622     		movs	r2, #6
 6791 0014 3B21     		movs	r1, #59
 6792 0016 FFF7FEFF 		bl	I2CReadBytes
1860:mpu6050.c     ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 6793              		.loc 1 1860 0
 6794 001a 134B     		ldr	r3, .L517+4
 6795 001c 1B78     		ldrb	r3, [r3]
 6796 001e 1B02     		lsls	r3, r3, #8
 6797 0020 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 153


 6798 0022 114B     		ldr	r3, .L517+4
 6799 0024 5B78     		ldrb	r3, [r3, #1]
 6800 0026 1BB2     		sxth	r3, r3
 6801 0028 1343     		orrs	r3, r2
 6802 002a 1AB2     		sxth	r2, r3
 6803 002c FB68     		ldr	r3, [r7, #12]
 6804 002e 1A80     		strh	r2, [r3]
1861:mpu6050.c     ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 6805              		.loc 1 1861 0
 6806 0030 0D4B     		ldr	r3, .L517+4
 6807 0032 9B78     		ldrb	r3, [r3, #2]
 6808 0034 1B02     		lsls	r3, r3, #8
 6809 0036 1AB2     		sxth	r2, r3
 6810 0038 0B4B     		ldr	r3, .L517+4
 6811 003a DB78     		ldrb	r3, [r3, #3]
 6812 003c 1BB2     		sxth	r3, r3
 6813 003e 1343     		orrs	r3, r2
 6814 0040 1AB2     		sxth	r2, r3
 6815 0042 BB68     		ldr	r3, [r7, #8]
 6816 0044 1A80     		strh	r2, [r3]
1862:mpu6050.c     ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 6817              		.loc 1 1862 0
 6818 0046 084B     		ldr	r3, .L517+4
 6819 0048 1B79     		ldrb	r3, [r3, #4]
 6820 004a 1B02     		lsls	r3, r3, #8
 6821 004c 1AB2     		sxth	r2, r3
 6822 004e 064B     		ldr	r3, .L517+4
 6823 0050 5B79     		ldrb	r3, [r3, #5]
 6824 0052 1BB2     		sxth	r3, r3
 6825 0054 1343     		orrs	r3, r2
 6826 0056 1AB2     		sxth	r2, r3
 6827 0058 7B68     		ldr	r3, [r7, #4]
 6828 005a 1A80     		strh	r2, [r3]
1863:mpu6050.c     **** }
 6829              		.loc 1 1863 0
 6830 005c C046     		nop
 6831 005e BD46     		mov	sp, r7
 6832 0060 04B0     		add	sp, sp, #16
 6833              		@ sp needed
 6834 0062 80BD     		pop	{r7, pc}
 6835              	.L518:
 6836              		.align	2
 6837              	.L517:
 6838 0064 00000000 		.word	devAddr
 6839 0068 00000000 		.word	buffer
 6840              		.cfi_endproc
 6841              	.LFE139:
 6842              		.size	MPU6050_getAcceleration, .-MPU6050_getAcceleration
 6843              		.section	.text.MPU6050_getAccelerationX,"ax",%progbits
 6844              		.align	2
 6845              		.global	MPU6050_getAccelerationX
 6846              		.code	16
 6847              		.thumb_func
 6848              		.type	MPU6050_getAccelerationX, %function
 6849              	MPU6050_getAccelerationX:
 6850              	.LFB140:
1864:mpu6050.c     **** /** Get X-axis accelerometer reading.
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 154


1865:mpu6050.c     ****  * @return X-axis acceleration measurement in 16-bit 2's complement format
1866:mpu6050.c     ****  * @see getMotion6()
1867:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_XOUT_H
1868:mpu6050.c     ****  */
1869:mpu6050.c     **** int16_t MPU6050_getAccelerationX() {
 6851              		.loc 1 1869 0
 6852              		.cfi_startproc
 6853              		@ args = 0, pretend = 0, frame = 8
 6854              		@ frame_needed = 1, uses_anonymous_args = 0
 6855 0000 80B5     		push	{r7, lr}
 6856              		.cfi_def_cfa_offset 8
 6857              		.cfi_offset 7, -8
 6858              		.cfi_offset 14, -4
 6859 0002 82B0     		sub	sp, sp, #8
 6860              		.cfi_def_cfa_offset 16
 6861 0004 00AF     		add	r7, sp, #0
 6862              		.cfi_def_cfa_register 7
1870:mpu6050.c     ****     int8_t hVal,lVal;
1871:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_XOUT_H, buffer);
 6863              		.loc 1 1871 0
 6864 0006 124B     		ldr	r3, .L521
 6865 0008 1B78     		ldrb	r3, [r3]
 6866 000a 124A     		ldr	r2, .L521+4
 6867 000c 3B21     		movs	r1, #59
 6868 000e 1800     		movs	r0, r3
 6869 0010 FFF7FEFF 		bl	I2CReadByte
1872:mpu6050.c     ****     hVal = buffer[0];
 6870              		.loc 1 1872 0
 6871 0014 0F4B     		ldr	r3, .L521+4
 6872 0016 1A78     		ldrb	r2, [r3]
 6873 0018 FB1D     		adds	r3, r7, #7
 6874 001a 1A70     		strb	r2, [r3]
1873:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_XOUT_L, buffer);
 6875              		.loc 1 1873 0
 6876 001c 0C4B     		ldr	r3, .L521
 6877 001e 1B78     		ldrb	r3, [r3]
 6878 0020 0C4A     		ldr	r2, .L521+4
 6879 0022 3C21     		movs	r1, #60
 6880 0024 1800     		movs	r0, r3
 6881 0026 FFF7FEFF 		bl	I2CReadByte
1874:mpu6050.c     ****     lVal = buffer[0];
 6882              		.loc 1 1874 0
 6883 002a 0A4B     		ldr	r3, .L521+4
 6884 002c 1A78     		ldrb	r2, [r3]
 6885 002e BB1D     		adds	r3, r7, #6
 6886 0030 1A70     		strb	r2, [r3]
1875:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 6887              		.loc 1 1875 0
 6888 0032 FB1D     		adds	r3, r7, #7
 6889 0034 1B78     		ldrb	r3, [r3]
 6890 0036 5BB2     		sxtb	r3, r3
 6891 0038 1B02     		lsls	r3, r3, #8
 6892 003a 1AB2     		sxth	r2, r3
 6893 003c BB1D     		adds	r3, r7, #6
 6894 003e 1B78     		ldrb	r3, [r3]
 6895 0040 5BB2     		sxtb	r3, r3
 6896 0042 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 155


 6897 0044 1343     		orrs	r3, r2
 6898 0046 1BB2     		sxth	r3, r3
1876:mpu6050.c     **** }
 6899              		.loc 1 1876 0
 6900 0048 1800     		movs	r0, r3
 6901 004a BD46     		mov	sp, r7
 6902 004c 02B0     		add	sp, sp, #8
 6903              		@ sp needed
 6904 004e 80BD     		pop	{r7, pc}
 6905              	.L522:
 6906              		.align	2
 6907              	.L521:
 6908 0050 00000000 		.word	devAddr
 6909 0054 00000000 		.word	buffer
 6910              		.cfi_endproc
 6911              	.LFE140:
 6912              		.size	MPU6050_getAccelerationX, .-MPU6050_getAccelerationX
 6913              		.section	.text.MPU6050_getAccelerationY,"ax",%progbits
 6914              		.align	2
 6915              		.global	MPU6050_getAccelerationY
 6916              		.code	16
 6917              		.thumb_func
 6918              		.type	MPU6050_getAccelerationY, %function
 6919              	MPU6050_getAccelerationY:
 6920              	.LFB141:
1877:mpu6050.c     **** /** Get Y-axis accelerometer reading.
1878:mpu6050.c     ****  * @return Y-axis acceleration measurement in 16-bit 2's complement format
1879:mpu6050.c     ****  * @see getMotion6()
1880:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_YOUT_H
1881:mpu6050.c     ****  */
1882:mpu6050.c     **** int16_t MPU6050_getAccelerationY() {
 6921              		.loc 1 1882 0
 6922              		.cfi_startproc
 6923              		@ args = 0, pretend = 0, frame = 8
 6924              		@ frame_needed = 1, uses_anonymous_args = 0
 6925 0000 80B5     		push	{r7, lr}
 6926              		.cfi_def_cfa_offset 8
 6927              		.cfi_offset 7, -8
 6928              		.cfi_offset 14, -4
 6929 0002 82B0     		sub	sp, sp, #8
 6930              		.cfi_def_cfa_offset 16
 6931 0004 00AF     		add	r7, sp, #0
 6932              		.cfi_def_cfa_register 7
1883:mpu6050.c     ****     int8_t hVal,lVal;
1884:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_YOUT_H, buffer);
 6933              		.loc 1 1884 0
 6934 0006 124B     		ldr	r3, .L525
 6935 0008 1B78     		ldrb	r3, [r3]
 6936 000a 124A     		ldr	r2, .L525+4
 6937 000c 3D21     		movs	r1, #61
 6938 000e 1800     		movs	r0, r3
 6939 0010 FFF7FEFF 		bl	I2CReadByte
1885:mpu6050.c     ****     hVal = buffer[0];
 6940              		.loc 1 1885 0
 6941 0014 0F4B     		ldr	r3, .L525+4
 6942 0016 1A78     		ldrb	r2, [r3]
 6943 0018 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 156


 6944 001a 1A70     		strb	r2, [r3]
1886:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_YOUT_L, buffer);
 6945              		.loc 1 1886 0
 6946 001c 0C4B     		ldr	r3, .L525
 6947 001e 1B78     		ldrb	r3, [r3]
 6948 0020 0C4A     		ldr	r2, .L525+4
 6949 0022 3E21     		movs	r1, #62
 6950 0024 1800     		movs	r0, r3
 6951 0026 FFF7FEFF 		bl	I2CReadByte
1887:mpu6050.c     ****     lVal = buffer[0];
 6952              		.loc 1 1887 0
 6953 002a 0A4B     		ldr	r3, .L525+4
 6954 002c 1A78     		ldrb	r2, [r3]
 6955 002e BB1D     		adds	r3, r7, #6
 6956 0030 1A70     		strb	r2, [r3]
1888:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 6957              		.loc 1 1888 0
 6958 0032 FB1D     		adds	r3, r7, #7
 6959 0034 1B78     		ldrb	r3, [r3]
 6960 0036 5BB2     		sxtb	r3, r3
 6961 0038 1B02     		lsls	r3, r3, #8
 6962 003a 1AB2     		sxth	r2, r3
 6963 003c BB1D     		adds	r3, r7, #6
 6964 003e 1B78     		ldrb	r3, [r3]
 6965 0040 5BB2     		sxtb	r3, r3
 6966 0042 1BB2     		sxth	r3, r3
 6967 0044 1343     		orrs	r3, r2
 6968 0046 1BB2     		sxth	r3, r3
1889:mpu6050.c     **** }
 6969              		.loc 1 1889 0
 6970 0048 1800     		movs	r0, r3
 6971 004a BD46     		mov	sp, r7
 6972 004c 02B0     		add	sp, sp, #8
 6973              		@ sp needed
 6974 004e 80BD     		pop	{r7, pc}
 6975              	.L526:
 6976              		.align	2
 6977              	.L525:
 6978 0050 00000000 		.word	devAddr
 6979 0054 00000000 		.word	buffer
 6980              		.cfi_endproc
 6981              	.LFE141:
 6982              		.size	MPU6050_getAccelerationY, .-MPU6050_getAccelerationY
 6983              		.section	.text.MPU6050_getAccelerationZ,"ax",%progbits
 6984              		.align	2
 6985              		.global	MPU6050_getAccelerationZ
 6986              		.code	16
 6987              		.thumb_func
 6988              		.type	MPU6050_getAccelerationZ, %function
 6989              	MPU6050_getAccelerationZ:
 6990              	.LFB142:
1890:mpu6050.c     **** /** Get Z-axis accelerometer reading.
1891:mpu6050.c     ****  * @return Z-axis acceleration measurement in 16-bit 2's complement format
1892:mpu6050.c     ****  * @see getMotion6()
1893:mpu6050.c     ****  * @see MPU6050_RA_ACCEL_ZOUT_H
1894:mpu6050.c     ****  */
1895:mpu6050.c     **** int16_t MPU6050_getAccelerationZ() {
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 157


 6991              		.loc 1 1895 0
 6992              		.cfi_startproc
 6993              		@ args = 0, pretend = 0, frame = 8
 6994              		@ frame_needed = 1, uses_anonymous_args = 0
 6995 0000 80B5     		push	{r7, lr}
 6996              		.cfi_def_cfa_offset 8
 6997              		.cfi_offset 7, -8
 6998              		.cfi_offset 14, -4
 6999 0002 82B0     		sub	sp, sp, #8
 7000              		.cfi_def_cfa_offset 16
 7001 0004 00AF     		add	r7, sp, #0
 7002              		.cfi_def_cfa_register 7
1896:mpu6050.c     ****     int8_t hVal,lVal;
1897:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_ZOUT_H, buffer);
 7003              		.loc 1 1897 0
 7004 0006 124B     		ldr	r3, .L529
 7005 0008 1B78     		ldrb	r3, [r3]
 7006 000a 124A     		ldr	r2, .L529+4
 7007 000c 3F21     		movs	r1, #63
 7008 000e 1800     		movs	r0, r3
 7009 0010 FFF7FEFF 		bl	I2CReadByte
1898:mpu6050.c     ****     hVal = buffer[0];
 7010              		.loc 1 1898 0
 7011 0014 0F4B     		ldr	r3, .L529+4
 7012 0016 1A78     		ldrb	r2, [r3]
 7013 0018 FB1D     		adds	r3, r7, #7
 7014 001a 1A70     		strb	r2, [r3]
1899:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_ACCEL_ZOUT_L, buffer);
 7015              		.loc 1 1899 0
 7016 001c 0C4B     		ldr	r3, .L529
 7017 001e 1B78     		ldrb	r3, [r3]
 7018 0020 0C4A     		ldr	r2, .L529+4
 7019 0022 4021     		movs	r1, #64
 7020 0024 1800     		movs	r0, r3
 7021 0026 FFF7FEFF 		bl	I2CReadByte
1900:mpu6050.c     ****     lVal = buffer[0];
 7022              		.loc 1 1900 0
 7023 002a 0A4B     		ldr	r3, .L529+4
 7024 002c 1A78     		ldrb	r2, [r3]
 7025 002e BB1D     		adds	r3, r7, #6
 7026 0030 1A70     		strb	r2, [r3]
1901:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 7027              		.loc 1 1901 0
 7028 0032 FB1D     		adds	r3, r7, #7
 7029 0034 1B78     		ldrb	r3, [r3]
 7030 0036 5BB2     		sxtb	r3, r3
 7031 0038 1B02     		lsls	r3, r3, #8
 7032 003a 1AB2     		sxth	r2, r3
 7033 003c BB1D     		adds	r3, r7, #6
 7034 003e 1B78     		ldrb	r3, [r3]
 7035 0040 5BB2     		sxtb	r3, r3
 7036 0042 1BB2     		sxth	r3, r3
 7037 0044 1343     		orrs	r3, r2
 7038 0046 1BB2     		sxth	r3, r3
1902:mpu6050.c     **** }
 7039              		.loc 1 1902 0
 7040 0048 1800     		movs	r0, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 158


 7041 004a BD46     		mov	sp, r7
 7042 004c 02B0     		add	sp, sp, #8
 7043              		@ sp needed
 7044 004e 80BD     		pop	{r7, pc}
 7045              	.L530:
 7046              		.align	2
 7047              	.L529:
 7048 0050 00000000 		.word	devAddr
 7049 0054 00000000 		.word	buffer
 7050              		.cfi_endproc
 7051              	.LFE142:
 7052              		.size	MPU6050_getAccelerationZ, .-MPU6050_getAccelerationZ
 7053              		.section	.text.MPU6050_getTemperature,"ax",%progbits
 7054              		.align	2
 7055              		.global	MPU6050_getTemperature
 7056              		.code	16
 7057              		.thumb_func
 7058              		.type	MPU6050_getTemperature, %function
 7059              	MPU6050_getTemperature:
 7060              	.LFB143:
1903:mpu6050.c     **** 
1904:mpu6050.c     **** // TEMP_OUT_* registers
1905:mpu6050.c     **** 
1906:mpu6050.c     **** /** Get current internal temperature.
1907:mpu6050.c     ****  * @return Temperature reading in 16-bit 2's complement format
1908:mpu6050.c     ****  * @see MPU6050_RA_TEMP_OUT_H
1909:mpu6050.c     ****  */
1910:mpu6050.c     **** int16_t MPU6050_getTemperature() {
 7061              		.loc 1 1910 0
 7062              		.cfi_startproc
 7063              		@ args = 0, pretend = 0, frame = 0
 7064              		@ frame_needed = 1, uses_anonymous_args = 0
 7065 0000 80B5     		push	{r7, lr}
 7066              		.cfi_def_cfa_offset 8
 7067              		.cfi_offset 7, -8
 7068              		.cfi_offset 14, -4
 7069 0002 00AF     		add	r7, sp, #0
 7070              		.cfi_def_cfa_register 7
1911:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);
 7071              		.loc 1 1911 0
 7072 0004 094B     		ldr	r3, .L533
 7073 0006 1878     		ldrb	r0, [r3]
 7074 0008 094B     		ldr	r3, .L533+4
 7075 000a 0222     		movs	r2, #2
 7076 000c 4121     		movs	r1, #65
 7077 000e FFF7FEFF 		bl	I2CReadBytes
1912:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 7078              		.loc 1 1912 0
 7079 0012 074B     		ldr	r3, .L533+4
 7080 0014 1B78     		ldrb	r3, [r3]
 7081 0016 1B02     		lsls	r3, r3, #8
 7082 0018 1AB2     		sxth	r2, r3
 7083 001a 054B     		ldr	r3, .L533+4
 7084 001c 5B78     		ldrb	r3, [r3, #1]
 7085 001e 1BB2     		sxth	r3, r3
 7086 0020 1343     		orrs	r3, r2
 7087 0022 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 159


1913:mpu6050.c     **** }
 7088              		.loc 1 1913 0
 7089 0024 1800     		movs	r0, r3
 7090 0026 BD46     		mov	sp, r7
 7091              		@ sp needed
 7092 0028 80BD     		pop	{r7, pc}
 7093              	.L534:
 7094 002a C046     		.align	2
 7095              	.L533:
 7096 002c 00000000 		.word	devAddr
 7097 0030 00000000 		.word	buffer
 7098              		.cfi_endproc
 7099              	.LFE143:
 7100              		.size	MPU6050_getTemperature, .-MPU6050_getTemperature
 7101              		.section	.text.MPU6050_getRotation,"ax",%progbits
 7102              		.align	2
 7103              		.global	MPU6050_getRotation
 7104              		.code	16
 7105              		.thumb_func
 7106              		.type	MPU6050_getRotation, %function
 7107              	MPU6050_getRotation:
 7108              	.LFB144:
1914:mpu6050.c     **** 
1915:mpu6050.c     **** // GYRO_*OUT_* registers
1916:mpu6050.c     **** 
1917:mpu6050.c     **** /** Get 3-axis gyroscope readings.
1918:mpu6050.c     ****  * These gyroscope measurement registers, along with the accelerometer
1919:mpu6050.c     ****  * measurement registers, temperature measurement registers, and external sensor
1920:mpu6050.c     ****  * data registers, are composed of two sets of registers: an internal register
1921:mpu6050.c     ****  * set and a user-facing read register set.
1922:mpu6050.c     ****  * The data within the gyroscope sensors' internal register set is always
1923:mpu6050.c     ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1924:mpu6050.c     ****  * duplicates the internal register set's data values whenever the serial
1925:mpu6050.c     ****  * interface is idle. This guarantees that a burst read of sensor registers will
1926:mpu6050.c     ****  * read measurements from the same sampling instant. Note that if burst reads
1927:mpu6050.c     ****  * are not used, the user is responsible for ensuring a set of single byte reads
1928:mpu6050.c     ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1929:mpu6050.c     ****  *
1930:mpu6050.c     ****  * Each 16-bit gyroscope measurement has a full scale defined in FS_SEL
1931:mpu6050.c     ****  * (Register 27). For each full scale setting, the gyroscopes' sensitivity per
1932:mpu6050.c     ****  * LSB in GYRO_xOUT is shown in the table below:
1933:mpu6050.c     ****  *
1934:mpu6050.c     ****  * <pre>
1935:mpu6050.c     ****  * FS_SEL | Full Scale Range   | LSB Sensitivity
1936:mpu6050.c     ****  * -------+--------------------+----------------
1937:mpu6050.c     ****  * 0      | +/- 250 degrees/s  | 131 LSB/deg/s
1938:mpu6050.c     ****  * 1      | +/- 500 degrees/s  | 65.5 LSB/deg/s
1939:mpu6050.c     ****  * 2      | +/- 1000 degrees/s | 32.8 LSB/deg/s
1940:mpu6050.c     ****  * 3      | +/- 2000 degrees/s | 16.4 LSB/deg/s
1941:mpu6050.c     ****  * </pre>
1942:mpu6050.c     ****  *
1943:mpu6050.c     ****  * @param x 16-bit signed integer container for X-axis rotation
1944:mpu6050.c     ****  * @param y 16-bit signed integer container for Y-axis rotation
1945:mpu6050.c     ****  * @param z 16-bit signed integer container for Z-axis rotation
1946:mpu6050.c     ****  * @see getMotion6()
1947:mpu6050.c     ****  * @see MPU6050_RA_GYRO_XOUT_H
1948:mpu6050.c     ****  */
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 160


1949:mpu6050.c     **** void MPU6050_getRotation(int16_t* x, int16_t* y, int16_t* z) {
 7109              		.loc 1 1949 0
 7110              		.cfi_startproc
 7111              		@ args = 0, pretend = 0, frame = 16
 7112              		@ frame_needed = 1, uses_anonymous_args = 0
 7113 0000 80B5     		push	{r7, lr}
 7114              		.cfi_def_cfa_offset 8
 7115              		.cfi_offset 7, -8
 7116              		.cfi_offset 14, -4
 7117 0002 84B0     		sub	sp, sp, #16
 7118              		.cfi_def_cfa_offset 24
 7119 0004 00AF     		add	r7, sp, #0
 7120              		.cfi_def_cfa_register 7
 7121 0006 F860     		str	r0, [r7, #12]
 7122 0008 B960     		str	r1, [r7, #8]
 7123 000a 7A60     		str	r2, [r7, #4]
1950:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 6, buffer);
 7124              		.loc 1 1950 0
 7125 000c 154B     		ldr	r3, .L536
 7126 000e 1878     		ldrb	r0, [r3]
 7127 0010 154B     		ldr	r3, .L536+4
 7128 0012 0622     		movs	r2, #6
 7129 0014 4321     		movs	r1, #67
 7130 0016 FFF7FEFF 		bl	I2CReadBytes
1951:mpu6050.c     ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 7131              		.loc 1 1951 0
 7132 001a 134B     		ldr	r3, .L536+4
 7133 001c 1B78     		ldrb	r3, [r3]
 7134 001e 1B02     		lsls	r3, r3, #8
 7135 0020 1AB2     		sxth	r2, r3
 7136 0022 114B     		ldr	r3, .L536+4
 7137 0024 5B78     		ldrb	r3, [r3, #1]
 7138 0026 1BB2     		sxth	r3, r3
 7139 0028 1343     		orrs	r3, r2
 7140 002a 1AB2     		sxth	r2, r3
 7141 002c FB68     		ldr	r3, [r7, #12]
 7142 002e 1A80     		strh	r2, [r3]
1952:mpu6050.c     ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 7143              		.loc 1 1952 0
 7144 0030 0D4B     		ldr	r3, .L536+4
 7145 0032 9B78     		ldrb	r3, [r3, #2]
 7146 0034 1B02     		lsls	r3, r3, #8
 7147 0036 1AB2     		sxth	r2, r3
 7148 0038 0B4B     		ldr	r3, .L536+4
 7149 003a DB78     		ldrb	r3, [r3, #3]
 7150 003c 1BB2     		sxth	r3, r3
 7151 003e 1343     		orrs	r3, r2
 7152 0040 1AB2     		sxth	r2, r3
 7153 0042 BB68     		ldr	r3, [r7, #8]
 7154 0044 1A80     		strh	r2, [r3]
1953:mpu6050.c     ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 7155              		.loc 1 1953 0
 7156 0046 084B     		ldr	r3, .L536+4
 7157 0048 1B79     		ldrb	r3, [r3, #4]
 7158 004a 1B02     		lsls	r3, r3, #8
 7159 004c 1AB2     		sxth	r2, r3
 7160 004e 064B     		ldr	r3, .L536+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 161


 7161 0050 5B79     		ldrb	r3, [r3, #5]
 7162 0052 1BB2     		sxth	r3, r3
 7163 0054 1343     		orrs	r3, r2
 7164 0056 1AB2     		sxth	r2, r3
 7165 0058 7B68     		ldr	r3, [r7, #4]
 7166 005a 1A80     		strh	r2, [r3]
1954:mpu6050.c     **** }
 7167              		.loc 1 1954 0
 7168 005c C046     		nop
 7169 005e BD46     		mov	sp, r7
 7170 0060 04B0     		add	sp, sp, #16
 7171              		@ sp needed
 7172 0062 80BD     		pop	{r7, pc}
 7173              	.L537:
 7174              		.align	2
 7175              	.L536:
 7176 0064 00000000 		.word	devAddr
 7177 0068 00000000 		.word	buffer
 7178              		.cfi_endproc
 7179              	.LFE144:
 7180              		.size	MPU6050_getRotation, .-MPU6050_getRotation
 7181              		.section	.text.MPU6050_getRotationX,"ax",%progbits
 7182              		.align	2
 7183              		.global	MPU6050_getRotationX
 7184              		.code	16
 7185              		.thumb_func
 7186              		.type	MPU6050_getRotationX, %function
 7187              	MPU6050_getRotationX:
 7188              	.LFB145:
1955:mpu6050.c     **** /** Get X-axis gyroscope reading.
1956:mpu6050.c     ****  * @return X-axis rotation measurement in 16-bit 2's complement format
1957:mpu6050.c     ****  * @see getMotion6()
1958:mpu6050.c     ****  * @see MPU6050_RA_GYRO_XOUT_H
1959:mpu6050.c     ****  */
1960:mpu6050.c     **** int16_t MPU6050_getRotationX() {
 7189              		.loc 1 1960 0
 7190              		.cfi_startproc
 7191              		@ args = 0, pretend = 0, frame = 8
 7192              		@ frame_needed = 1, uses_anonymous_args = 0
 7193 0000 80B5     		push	{r7, lr}
 7194              		.cfi_def_cfa_offset 8
 7195              		.cfi_offset 7, -8
 7196              		.cfi_offset 14, -4
 7197 0002 82B0     		sub	sp, sp, #8
 7198              		.cfi_def_cfa_offset 16
 7199 0004 00AF     		add	r7, sp, #0
 7200              		.cfi_def_cfa_register 7
1961:mpu6050.c     ****     int8_t hVal,lVal;
1962:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_XOUT_H, buffer);
 7201              		.loc 1 1962 0
 7202 0006 124B     		ldr	r3, .L540
 7203 0008 1B78     		ldrb	r3, [r3]
 7204 000a 124A     		ldr	r2, .L540+4
 7205 000c 4321     		movs	r1, #67
 7206 000e 1800     		movs	r0, r3
 7207 0010 FFF7FEFF 		bl	I2CReadByte
1963:mpu6050.c     ****     hVal = buffer[0];
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 162


 7208              		.loc 1 1963 0
 7209 0014 0F4B     		ldr	r3, .L540+4
 7210 0016 1A78     		ldrb	r2, [r3]
 7211 0018 FB1D     		adds	r3, r7, #7
 7212 001a 1A70     		strb	r2, [r3]
1964:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_XOUT_L, buffer);
 7213              		.loc 1 1964 0
 7214 001c 0C4B     		ldr	r3, .L540
 7215 001e 1B78     		ldrb	r3, [r3]
 7216 0020 0C4A     		ldr	r2, .L540+4
 7217 0022 4421     		movs	r1, #68
 7218 0024 1800     		movs	r0, r3
 7219 0026 FFF7FEFF 		bl	I2CReadByte
1965:mpu6050.c     ****     lVal = buffer[0];
 7220              		.loc 1 1965 0
 7221 002a 0A4B     		ldr	r3, .L540+4
 7222 002c 1A78     		ldrb	r2, [r3]
 7223 002e BB1D     		adds	r3, r7, #6
 7224 0030 1A70     		strb	r2, [r3]
1966:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 7225              		.loc 1 1966 0
 7226 0032 FB1D     		adds	r3, r7, #7
 7227 0034 1B78     		ldrb	r3, [r3]
 7228 0036 5BB2     		sxtb	r3, r3
 7229 0038 1B02     		lsls	r3, r3, #8
 7230 003a 1AB2     		sxth	r2, r3
 7231 003c BB1D     		adds	r3, r7, #6
 7232 003e 1B78     		ldrb	r3, [r3]
 7233 0040 5BB2     		sxtb	r3, r3
 7234 0042 1BB2     		sxth	r3, r3
 7235 0044 1343     		orrs	r3, r2
 7236 0046 1BB2     		sxth	r3, r3
1967:mpu6050.c     **** }
 7237              		.loc 1 1967 0
 7238 0048 1800     		movs	r0, r3
 7239 004a BD46     		mov	sp, r7
 7240 004c 02B0     		add	sp, sp, #8
 7241              		@ sp needed
 7242 004e 80BD     		pop	{r7, pc}
 7243              	.L541:
 7244              		.align	2
 7245              	.L540:
 7246 0050 00000000 		.word	devAddr
 7247 0054 00000000 		.word	buffer
 7248              		.cfi_endproc
 7249              	.LFE145:
 7250              		.size	MPU6050_getRotationX, .-MPU6050_getRotationX
 7251              		.section	.text.MPU6050_getRotationY,"ax",%progbits
 7252              		.align	2
 7253              		.global	MPU6050_getRotationY
 7254              		.code	16
 7255              		.thumb_func
 7256              		.type	MPU6050_getRotationY, %function
 7257              	MPU6050_getRotationY:
 7258              	.LFB146:
1968:mpu6050.c     **** /** Get Y-axis gyroscope reading.
1969:mpu6050.c     ****  * @return Y-axis rotation measurement in 16-bit 2's complement format
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 163


1970:mpu6050.c     ****  * @see getMotion6()
1971:mpu6050.c     ****  * @see MPU6050_RA_GYRO_YOUT_H
1972:mpu6050.c     ****  */
1973:mpu6050.c     **** int16_t MPU6050_getRotationY() {
 7259              		.loc 1 1973 0
 7260              		.cfi_startproc
 7261              		@ args = 0, pretend = 0, frame = 8
 7262              		@ frame_needed = 1, uses_anonymous_args = 0
 7263 0000 80B5     		push	{r7, lr}
 7264              		.cfi_def_cfa_offset 8
 7265              		.cfi_offset 7, -8
 7266              		.cfi_offset 14, -4
 7267 0002 82B0     		sub	sp, sp, #8
 7268              		.cfi_def_cfa_offset 16
 7269 0004 00AF     		add	r7, sp, #0
 7270              		.cfi_def_cfa_register 7
1974:mpu6050.c     ****     int8_t hVal,lVal;
1975:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_YOUT_H, buffer);
 7271              		.loc 1 1975 0
 7272 0006 124B     		ldr	r3, .L544
 7273 0008 1B78     		ldrb	r3, [r3]
 7274 000a 124A     		ldr	r2, .L544+4
 7275 000c 4521     		movs	r1, #69
 7276 000e 1800     		movs	r0, r3
 7277 0010 FFF7FEFF 		bl	I2CReadByte
1976:mpu6050.c     ****     hVal = buffer[0];
 7278              		.loc 1 1976 0
 7279 0014 0F4B     		ldr	r3, .L544+4
 7280 0016 1A78     		ldrb	r2, [r3]
 7281 0018 FB1D     		adds	r3, r7, #7
 7282 001a 1A70     		strb	r2, [r3]
1977:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_YOUT_L, buffer);
 7283              		.loc 1 1977 0
 7284 001c 0C4B     		ldr	r3, .L544
 7285 001e 1B78     		ldrb	r3, [r3]
 7286 0020 0C4A     		ldr	r2, .L544+4
 7287 0022 4621     		movs	r1, #70
 7288 0024 1800     		movs	r0, r3
 7289 0026 FFF7FEFF 		bl	I2CReadByte
1978:mpu6050.c     ****     lVal = buffer[0];
 7290              		.loc 1 1978 0
 7291 002a 0A4B     		ldr	r3, .L544+4
 7292 002c 1A78     		ldrb	r2, [r3]
 7293 002e BB1D     		adds	r3, r7, #6
 7294 0030 1A70     		strb	r2, [r3]
1979:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 7295              		.loc 1 1979 0
 7296 0032 FB1D     		adds	r3, r7, #7
 7297 0034 1B78     		ldrb	r3, [r3]
 7298 0036 5BB2     		sxtb	r3, r3
 7299 0038 1B02     		lsls	r3, r3, #8
 7300 003a 1AB2     		sxth	r2, r3
 7301 003c BB1D     		adds	r3, r7, #6
 7302 003e 1B78     		ldrb	r3, [r3]
 7303 0040 5BB2     		sxtb	r3, r3
 7304 0042 1BB2     		sxth	r3, r3
 7305 0044 1343     		orrs	r3, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 164


 7306 0046 1BB2     		sxth	r3, r3
1980:mpu6050.c     **** }
 7307              		.loc 1 1980 0
 7308 0048 1800     		movs	r0, r3
 7309 004a BD46     		mov	sp, r7
 7310 004c 02B0     		add	sp, sp, #8
 7311              		@ sp needed
 7312 004e 80BD     		pop	{r7, pc}
 7313              	.L545:
 7314              		.align	2
 7315              	.L544:
 7316 0050 00000000 		.word	devAddr
 7317 0054 00000000 		.word	buffer
 7318              		.cfi_endproc
 7319              	.LFE146:
 7320              		.size	MPU6050_getRotationY, .-MPU6050_getRotationY
 7321              		.section	.text.MPU6050_getRotationZ,"ax",%progbits
 7322              		.align	2
 7323              		.global	MPU6050_getRotationZ
 7324              		.code	16
 7325              		.thumb_func
 7326              		.type	MPU6050_getRotationZ, %function
 7327              	MPU6050_getRotationZ:
 7328              	.LFB147:
1981:mpu6050.c     **** /** Get Z-axis gyroscope reading.
1982:mpu6050.c     ****  * @return Z-axis rotation measurement in 16-bit 2's complement format
1983:mpu6050.c     ****  * @see getMotion6()
1984:mpu6050.c     ****  * @see MPU6050_RA_GYRO_ZOUT_H
1985:mpu6050.c     ****  */
1986:mpu6050.c     **** int16_t MPU6050_getRotationZ() {
 7329              		.loc 1 1986 0
 7330              		.cfi_startproc
 7331              		@ args = 0, pretend = 0, frame = 8
 7332              		@ frame_needed = 1, uses_anonymous_args = 0
 7333 0000 80B5     		push	{r7, lr}
 7334              		.cfi_def_cfa_offset 8
 7335              		.cfi_offset 7, -8
 7336              		.cfi_offset 14, -4
 7337 0002 82B0     		sub	sp, sp, #8
 7338              		.cfi_def_cfa_offset 16
 7339 0004 00AF     		add	r7, sp, #0
 7340              		.cfi_def_cfa_register 7
1987:mpu6050.c     ****     int8_t hVal,lVal;
1988:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_ZOUT_H, buffer);
 7341              		.loc 1 1988 0
 7342 0006 124B     		ldr	r3, .L548
 7343 0008 1B78     		ldrb	r3, [r3]
 7344 000a 124A     		ldr	r2, .L548+4
 7345 000c 4721     		movs	r1, #71
 7346 000e 1800     		movs	r0, r3
 7347 0010 FFF7FEFF 		bl	I2CReadByte
1989:mpu6050.c     ****     hVal = buffer[0];
 7348              		.loc 1 1989 0
 7349 0014 0F4B     		ldr	r3, .L548+4
 7350 0016 1A78     		ldrb	r2, [r3]
 7351 0018 FB1D     		adds	r3, r7, #7
 7352 001a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 165


1990:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_GYRO_ZOUT_L, buffer);
 7353              		.loc 1 1990 0
 7354 001c 0C4B     		ldr	r3, .L548
 7355 001e 1B78     		ldrb	r3, [r3]
 7356 0020 0C4A     		ldr	r2, .L548+4
 7357 0022 4821     		movs	r1, #72
 7358 0024 1800     		movs	r0, r3
 7359 0026 FFF7FEFF 		bl	I2CReadByte
1991:mpu6050.c     ****     lVal = buffer[0];
 7360              		.loc 1 1991 0
 7361 002a 0A4B     		ldr	r3, .L548+4
 7362 002c 1A78     		ldrb	r2, [r3]
 7363 002e BB1D     		adds	r3, r7, #6
 7364 0030 1A70     		strb	r2, [r3]
1992:mpu6050.c     ****     return (((int16_t)hVal) << 8) | lVal;
 7365              		.loc 1 1992 0
 7366 0032 FB1D     		adds	r3, r7, #7
 7367 0034 1B78     		ldrb	r3, [r3]
 7368 0036 5BB2     		sxtb	r3, r3
 7369 0038 1B02     		lsls	r3, r3, #8
 7370 003a 1AB2     		sxth	r2, r3
 7371 003c BB1D     		adds	r3, r7, #6
 7372 003e 1B78     		ldrb	r3, [r3]
 7373 0040 5BB2     		sxtb	r3, r3
 7374 0042 1BB2     		sxth	r3, r3
 7375 0044 1343     		orrs	r3, r2
 7376 0046 1BB2     		sxth	r3, r3
1993:mpu6050.c     **** }
 7377              		.loc 1 1993 0
 7378 0048 1800     		movs	r0, r3
 7379 004a BD46     		mov	sp, r7
 7380 004c 02B0     		add	sp, sp, #8
 7381              		@ sp needed
 7382 004e 80BD     		pop	{r7, pc}
 7383              	.L549:
 7384              		.align	2
 7385              	.L548:
 7386 0050 00000000 		.word	devAddr
 7387 0054 00000000 		.word	buffer
 7388              		.cfi_endproc
 7389              	.LFE147:
 7390              		.size	MPU6050_getRotationZ, .-MPU6050_getRotationZ
 7391              		.section	.text.MPU6050_getExternalSensorByte,"ax",%progbits
 7392              		.align	2
 7393              		.global	MPU6050_getExternalSensorByte
 7394              		.code	16
 7395              		.thumb_func
 7396              		.type	MPU6050_getExternalSensorByte, %function
 7397              	MPU6050_getExternalSensorByte:
 7398              	.LFB148:
1994:mpu6050.c     **** 
1995:mpu6050.c     **** // EXT_SENS_DATA_* registers
1996:mpu6050.c     **** 
1997:mpu6050.c     **** /** Read single byte from external sensor data register.
1998:mpu6050.c     ****  * These registers store data read from external sensors by the Slave 0, 1, 2,
1999:mpu6050.c     ****  * and 3 on the auxiliary I2C interface. Data read by Slave 4 is stored in
2000:mpu6050.c     ****  * I2C_SLV4_DI (Register 53).
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 166


2001:mpu6050.c     ****  *
2002:mpu6050.c     ****  * External sensor data is written to these registers at the Sample Rate as
2003:mpu6050.c     ****  * defined in Register 25. This access rate can be reduced by using the Slave
2004:mpu6050.c     ****  * Delay Enable registers (Register 103).
2005:mpu6050.c     ****  *
2006:mpu6050.c     ****  * External sensor data registers, along with the gyroscope measurement
2007:mpu6050.c     ****  * registers, accelerometer measurement registers, and temperature measurement
2008:mpu6050.c     ****  * registers, are composed of two sets of registers: an internal register set
2009:mpu6050.c     ****  * and a user-facing read register set.
2010:mpu6050.c     ****  *
2011:mpu6050.c     ****  * The data within the external sensors' internal register set is always updated
2012:mpu6050.c     ****  * at the Sample Rate (or the reduced access rate) whenever the serial interface
2013:mpu6050.c     ****  * is idle. This guarantees that a burst read of sensor registers will read
2014:mpu6050.c     ****  * measurements from the same sampling instant. Note that if burst reads are not
2015:mpu6050.c     ****  * used, the user is responsible for ensuring a set of single byte reads
2016:mpu6050.c     ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
2017:mpu6050.c     ****  *
2018:mpu6050.c     ****  * Data is placed in these external sensor data registers according to
2019:mpu6050.c     ****  * I2C_SLV0_CTRL, I2C_SLV1_CTRL, I2C_SLV2_CTRL, and I2C_SLV3_CTRL (Registers 39,
2020:mpu6050.c     ****  * 42, 45, and 48). When more than zero bytes are read (I2C_SLVx_LEN > 0) from
2021:mpu6050.c     ****  * an enabled slave (I2C_SLVx_EN = 1), the slave is read at the Sample Rate (as
2022:mpu6050.c     ****  * defined in Register 25) or delayed rate (if specified in Register 52 and
2023:mpu6050.c     ****  * 103). During each Sample cycle, slave reads are performed in order of Slave
2024:mpu6050.c     ****  * number. If all slaves are enabled with more than zero bytes to be read, the
2025:mpu6050.c     ****  * order will be Slave 0, followed by Slave 1, Slave 2, and Slave 3.
2026:mpu6050.c     ****  *
2027:mpu6050.c     ****  * Each enabled slave will have EXT_SENS_DATA registers associated with it by
2028:mpu6050.c     ****  * number of bytes read (I2C_SLVx_LEN) in order of slave number, starting from
2029:mpu6050.c     ****  * EXT_SENS_DATA_00. Note that this means enabling or disabling a slave may
2030:mpu6050.c     ****  * change the higher numbered slaves' associated registers. Furthermore, if
2031:mpu6050.c     ****  * fewer total bytes are being read from the external sensors as a result of
2032:mpu6050.c     ****  * such a change, then the data remaining in the registers which no longer have
2033:mpu6050.c     ****  * an associated slave device (i.e. high numbered registers) will remain in
2034:mpu6050.c     ****  * these previously allocated registers unless reset.
2035:mpu6050.c     ****  *
2036:mpu6050.c     ****  * If the sum of the read lengths of all SLVx transactions exceed the number of
2037:mpu6050.c     ****  * available EXT_SENS_DATA registers, the excess bytes will be dropped. There
2038:mpu6050.c     ****  * are 24 EXT_SENS_DATA registers and hence the total read lengths between all
2039:mpu6050.c     ****  * the slaves cannot be greater than 24 or some bytes will be lost.
2040:mpu6050.c     ****  *
2041:mpu6050.c     ****  * Note: Slave 4's behavior is distinct from that of Slaves 0-3. For further
2042:mpu6050.c     ****  * information regarding the characteristics of Slave 4, please refer to
2043:mpu6050.c     ****  * Registers 49 to 53.
2044:mpu6050.c     ****  *
2045:mpu6050.c     ****  * EXAMPLE:
2046:mpu6050.c     ****  * Suppose that Slave 0 is enabled with 4 bytes to be read (I2C_SLV0_EN = 1 and
2047:mpu6050.c     ****  * I2C_SLV0_LEN = 4) while Slave 1 is enabled with 2 bytes to be read so that
2048:mpu6050.c     ****  * I2C_SLV1_EN = 1 and I2C_SLV1_LEN = 2. In such a situation, EXT_SENS_DATA _00
2049:mpu6050.c     ****  * through _03 will be associated with Slave 0, while EXT_SENS_DATA _04 and 05
2050:mpu6050.c     ****  * will be associated with Slave 1. If Slave 2 is enabled as well, registers
2051:mpu6050.c     ****  * starting from EXT_SENS_DATA_06 will be allocated to Slave 2.
2052:mpu6050.c     ****  *
2053:mpu6050.c     ****  * If Slave 2 is disabled while Slave 3 is enabled in this same situation, then
2054:mpu6050.c     ****  * registers starting from EXT_SENS_DATA_06 will be allocated to Slave 3
2055:mpu6050.c     ****  * instead.
2056:mpu6050.c     ****  *
2057:mpu6050.c     ****  * REGISTER ALLOCATION FOR DYNAMIC DISABLE VS. NORMAL DISABLE:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 167


2058:mpu6050.c     ****  * If a slave is disabled at any time, the space initially allocated to the
2059:mpu6050.c     ****  * slave in the EXT_SENS_DATA register, will remain associated with that slave.
2060:mpu6050.c     ****  * This is to avoid dynamic adjustment of the register allocation.
2061:mpu6050.c     ****  *
2062:mpu6050.c     ****  * The allocation of the EXT_SENS_DATA registers is recomputed only when (1) all
2063:mpu6050.c     ****  * slaves are disabled, or (2) the I2C_MST_RST bit is set (Register 106).
2064:mpu6050.c     ****  *
2065:mpu6050.c     ****  * This above is also true if one of the slaves gets NACKed and stops
2066:mpu6050.c     ****  * functioning.
2067:mpu6050.c     ****  *
2068:mpu6050.c     ****  * @param position Starting position (0-23)
2069:mpu6050.c     ****  * @return Byte read from register
2070:mpu6050.c     ****  */
2071:mpu6050.c     **** uint8_t MPU6050_getExternalSensorByte(int position) {
 7399              		.loc 1 2071 0
 7400              		.cfi_startproc
 7401              		@ args = 0, pretend = 0, frame = 8
 7402              		@ frame_needed = 1, uses_anonymous_args = 0
 7403 0000 80B5     		push	{r7, lr}
 7404              		.cfi_def_cfa_offset 8
 7405              		.cfi_offset 7, -8
 7406              		.cfi_offset 14, -4
 7407 0002 82B0     		sub	sp, sp, #8
 7408              		.cfi_def_cfa_offset 16
 7409 0004 00AF     		add	r7, sp, #0
 7410              		.cfi_def_cfa_register 7
 7411 0006 7860     		str	r0, [r7, #4]
2072:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, buffer);
 7412              		.loc 1 2072 0
 7413 0008 074B     		ldr	r3, .L552
 7414 000a 1878     		ldrb	r0, [r3]
 7415 000c 7B68     		ldr	r3, [r7, #4]
 7416 000e DBB2     		uxtb	r3, r3
 7417 0010 4933     		adds	r3, r3, #73
 7418 0012 DBB2     		uxtb	r3, r3
 7419 0014 054A     		ldr	r2, .L552+4
 7420 0016 1900     		movs	r1, r3
 7421 0018 FFF7FEFF 		bl	I2CReadByte
2073:mpu6050.c     ****     return buffer[0];
 7422              		.loc 1 2073 0
 7423 001c 034B     		ldr	r3, .L552+4
 7424 001e 1B78     		ldrb	r3, [r3]
2074:mpu6050.c     **** }
 7425              		.loc 1 2074 0
 7426 0020 1800     		movs	r0, r3
 7427 0022 BD46     		mov	sp, r7
 7428 0024 02B0     		add	sp, sp, #8
 7429              		@ sp needed
 7430 0026 80BD     		pop	{r7, pc}
 7431              	.L553:
 7432              		.align	2
 7433              	.L552:
 7434 0028 00000000 		.word	devAddr
 7435 002c 00000000 		.word	buffer
 7436              		.cfi_endproc
 7437              	.LFE148:
 7438              		.size	MPU6050_getExternalSensorByte, .-MPU6050_getExternalSensorByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 168


 7439              		.section	.text.MPU6050_getExternalSensorWord,"ax",%progbits
 7440              		.align	2
 7441              		.global	MPU6050_getExternalSensorWord
 7442              		.code	16
 7443              		.thumb_func
 7444              		.type	MPU6050_getExternalSensorWord, %function
 7445              	MPU6050_getExternalSensorWord:
 7446              	.LFB149:
2075:mpu6050.c     **** /** Read word (2 bytes) from external sensor data registers.
2076:mpu6050.c     ****  * @param position Starting position (0-21)
2077:mpu6050.c     ****  * @return Word read from register
2078:mpu6050.c     ****  * @see getExternalSensorByte()
2079:mpu6050.c     ****  */
2080:mpu6050.c     **** uint16_t MPU6050_getExternalSensorWord(int position) {
 7447              		.loc 1 2080 0
 7448              		.cfi_startproc
 7449              		@ args = 0, pretend = 0, frame = 8
 7450              		@ frame_needed = 1, uses_anonymous_args = 0
 7451 0000 80B5     		push	{r7, lr}
 7452              		.cfi_def_cfa_offset 8
 7453              		.cfi_offset 7, -8
 7454              		.cfi_offset 14, -4
 7455 0002 82B0     		sub	sp, sp, #8
 7456              		.cfi_def_cfa_offset 16
 7457 0004 00AF     		add	r7, sp, #0
 7458              		.cfi_def_cfa_register 7
 7459 0006 7860     		str	r0, [r7, #4]
2081:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 2, buffer);
 7460              		.loc 1 2081 0
 7461 0008 0B4B     		ldr	r3, .L556
 7462 000a 1878     		ldrb	r0, [r3]
 7463 000c 7B68     		ldr	r3, [r7, #4]
 7464 000e DBB2     		uxtb	r3, r3
 7465 0010 4933     		adds	r3, r3, #73
 7466 0012 D9B2     		uxtb	r1, r3
 7467 0014 094B     		ldr	r3, .L556+4
 7468 0016 0222     		movs	r2, #2
 7469 0018 FFF7FEFF 		bl	I2CReadBytes
2082:mpu6050.c     ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 7470              		.loc 1 2082 0
 7471 001c 074B     		ldr	r3, .L556+4
 7472 001e 1B78     		ldrb	r3, [r3]
 7473 0020 1B02     		lsls	r3, r3, #8
 7474 0022 1AB2     		sxth	r2, r3
 7475 0024 054B     		ldr	r3, .L556+4
 7476 0026 5B78     		ldrb	r3, [r3, #1]
 7477 0028 1BB2     		sxth	r3, r3
 7478 002a 1343     		orrs	r3, r2
 7479 002c 1BB2     		sxth	r3, r3
 7480 002e 9BB2     		uxth	r3, r3
2083:mpu6050.c     **** }
 7481              		.loc 1 2083 0
 7482 0030 1800     		movs	r0, r3
 7483 0032 BD46     		mov	sp, r7
 7484 0034 02B0     		add	sp, sp, #8
 7485              		@ sp needed
 7486 0036 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 169


 7487              	.L557:
 7488              		.align	2
 7489              	.L556:
 7490 0038 00000000 		.word	devAddr
 7491 003c 00000000 		.word	buffer
 7492              		.cfi_endproc
 7493              	.LFE149:
 7494              		.size	MPU6050_getExternalSensorWord, .-MPU6050_getExternalSensorWord
 7495              		.section	.text.MPU6050_getExternalSensorDWord,"ax",%progbits
 7496              		.align	2
 7497              		.global	MPU6050_getExternalSensorDWord
 7498              		.code	16
 7499              		.thumb_func
 7500              		.type	MPU6050_getExternalSensorDWord, %function
 7501              	MPU6050_getExternalSensorDWord:
 7502              	.LFB150:
2084:mpu6050.c     **** /** Read double word (4 bytes) from external sensor data registers.
2085:mpu6050.c     ****  * @param position Starting position (0-20)
2086:mpu6050.c     ****  * @return Double word read from registers
2087:mpu6050.c     ****  * @see getExternalSensorByte()
2088:mpu6050.c     ****  */
2089:mpu6050.c     **** uint32_t MPU6050_getExternalSensorDWord(int position) {
 7503              		.loc 1 2089 0
 7504              		.cfi_startproc
 7505              		@ args = 0, pretend = 0, frame = 8
 7506              		@ frame_needed = 1, uses_anonymous_args = 0
 7507 0000 80B5     		push	{r7, lr}
 7508              		.cfi_def_cfa_offset 8
 7509              		.cfi_offset 7, -8
 7510              		.cfi_offset 14, -4
 7511 0002 82B0     		sub	sp, sp, #8
 7512              		.cfi_def_cfa_offset 16
 7513 0004 00AF     		add	r7, sp, #0
 7514              		.cfi_def_cfa_register 7
 7515 0006 7860     		str	r0, [r7, #4]
2090:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 4, buffer);
 7516              		.loc 1 2090 0
 7517 0008 0D4B     		ldr	r3, .L560
 7518 000a 1878     		ldrb	r0, [r3]
 7519 000c 7B68     		ldr	r3, [r7, #4]
 7520 000e DBB2     		uxtb	r3, r3
 7521 0010 4933     		adds	r3, r3, #73
 7522 0012 D9B2     		uxtb	r1, r3
 7523 0014 0B4B     		ldr	r3, .L560+4
 7524 0016 0422     		movs	r2, #4
 7525 0018 FFF7FEFF 		bl	I2CReadBytes
2091:mpu6050.c     ****     return (((uint32_t)buffer[0]) << 24) | (((uint32_t)buffer[1]) << 16) | (((uint16_t)buffer[2]) <
 7526              		.loc 1 2091 0
 7527 001c 094B     		ldr	r3, .L560+4
 7528 001e 1B78     		ldrb	r3, [r3]
 7529 0020 1A06     		lsls	r2, r3, #24
 7530 0022 084B     		ldr	r3, .L560+4
 7531 0024 5B78     		ldrb	r3, [r3, #1]
 7532 0026 1B04     		lsls	r3, r3, #16
 7533 0028 1343     		orrs	r3, r2
 7534 002a 064A     		ldr	r2, .L560+4
 7535 002c 9278     		ldrb	r2, [r2, #2]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 170


 7536 002e 1202     		lsls	r2, r2, #8
 7537 0030 1343     		orrs	r3, r2
 7538 0032 044A     		ldr	r2, .L560+4
 7539 0034 D278     		ldrb	r2, [r2, #3]
 7540 0036 1343     		orrs	r3, r2
2092:mpu6050.c     **** }
 7541              		.loc 1 2092 0
 7542 0038 1800     		movs	r0, r3
 7543 003a BD46     		mov	sp, r7
 7544 003c 02B0     		add	sp, sp, #8
 7545              		@ sp needed
 7546 003e 80BD     		pop	{r7, pc}
 7547              	.L561:
 7548              		.align	2
 7549              	.L560:
 7550 0040 00000000 		.word	devAddr
 7551 0044 00000000 		.word	buffer
 7552              		.cfi_endproc
 7553              	.LFE150:
 7554              		.size	MPU6050_getExternalSensorDWord, .-MPU6050_getExternalSensorDWord
 7555              		.section	.text.MPU6050_getXNegMotionDetected,"ax",%progbits
 7556              		.align	2
 7557              		.global	MPU6050_getXNegMotionDetected
 7558              		.code	16
 7559              		.thumb_func
 7560              		.type	MPU6050_getXNegMotionDetected, %function
 7561              	MPU6050_getXNegMotionDetected:
 7562              	.LFB151:
2093:mpu6050.c     **** 
2094:mpu6050.c     **** // MOT_DETECT_STATUS register
2095:mpu6050.c     **** 
2096:mpu6050.c     **** /** Get X-axis negative motion detection interrupt status.
2097:mpu6050.c     ****  * @return Motion detection status
2098:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2099:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_XNEG_BIT
2100:mpu6050.c     ****  */
2101:mpu6050.c     **** bool MPU6050_getXNegMotionDetected() {
 7563              		.loc 1 2101 0
 7564              		.cfi_startproc
 7565              		@ args = 0, pretend = 0, frame = 0
 7566              		@ frame_needed = 1, uses_anonymous_args = 0
 7567 0000 80B5     		push	{r7, lr}
 7568              		.cfi_def_cfa_offset 8
 7569              		.cfi_offset 7, -8
 7570              		.cfi_offset 14, -4
 7571 0002 00AF     		add	r7, sp, #0
 7572              		.cfi_def_cfa_register 7
2102:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XNEG_BIT, buffer);
 7573              		.loc 1 2102 0
 7574 0004 074B     		ldr	r3, .L564
 7575 0006 1878     		ldrb	r0, [r3]
 7576 0008 074B     		ldr	r3, .L564+4
 7577 000a 0722     		movs	r2, #7
 7578 000c 6121     		movs	r1, #97
 7579 000e FFF7FEFF 		bl	I2CReadBit
2103:mpu6050.c     ****     return buffer[0];
 7580              		.loc 1 2103 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 171


 7581 0012 054B     		ldr	r3, .L564+4
 7582 0014 1B78     		ldrb	r3, [r3]
 7583 0016 5A1E     		subs	r2, r3, #1
 7584 0018 9341     		sbcs	r3, r3, r2
 7585 001a DBB2     		uxtb	r3, r3
2104:mpu6050.c     **** }
 7586              		.loc 1 2104 0
 7587 001c 1800     		movs	r0, r3
 7588 001e BD46     		mov	sp, r7
 7589              		@ sp needed
 7590 0020 80BD     		pop	{r7, pc}
 7591              	.L565:
 7592 0022 C046     		.align	2
 7593              	.L564:
 7594 0024 00000000 		.word	devAddr
 7595 0028 00000000 		.word	buffer
 7596              		.cfi_endproc
 7597              	.LFE151:
 7598              		.size	MPU6050_getXNegMotionDetected, .-MPU6050_getXNegMotionDetected
 7599              		.section	.text.MPU6050_getXPosMotionDetected,"ax",%progbits
 7600              		.align	2
 7601              		.global	MPU6050_getXPosMotionDetected
 7602              		.code	16
 7603              		.thumb_func
 7604              		.type	MPU6050_getXPosMotionDetected, %function
 7605              	MPU6050_getXPosMotionDetected:
 7606              	.LFB152:
2105:mpu6050.c     **** /** Get X-axis positive motion detection interrupt status.
2106:mpu6050.c     ****  * @return Motion detection status
2107:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2108:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_XPOS_BIT
2109:mpu6050.c     ****  */
2110:mpu6050.c     **** bool MPU6050_getXPosMotionDetected() {
 7607              		.loc 1 2110 0
 7608              		.cfi_startproc
 7609              		@ args = 0, pretend = 0, frame = 0
 7610              		@ frame_needed = 1, uses_anonymous_args = 0
 7611 0000 80B5     		push	{r7, lr}
 7612              		.cfi_def_cfa_offset 8
 7613              		.cfi_offset 7, -8
 7614              		.cfi_offset 14, -4
 7615 0002 00AF     		add	r7, sp, #0
 7616              		.cfi_def_cfa_register 7
2111:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XPOS_BIT, buffer);
 7617              		.loc 1 2111 0
 7618 0004 074B     		ldr	r3, .L568
 7619 0006 1878     		ldrb	r0, [r3]
 7620 0008 074B     		ldr	r3, .L568+4
 7621 000a 0622     		movs	r2, #6
 7622 000c 6121     		movs	r1, #97
 7623 000e FFF7FEFF 		bl	I2CReadBit
2112:mpu6050.c     ****     return buffer[0];
 7624              		.loc 1 2112 0
 7625 0012 054B     		ldr	r3, .L568+4
 7626 0014 1B78     		ldrb	r3, [r3]
 7627 0016 5A1E     		subs	r2, r3, #1
 7628 0018 9341     		sbcs	r3, r3, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 172


 7629 001a DBB2     		uxtb	r3, r3
2113:mpu6050.c     **** }
 7630              		.loc 1 2113 0
 7631 001c 1800     		movs	r0, r3
 7632 001e BD46     		mov	sp, r7
 7633              		@ sp needed
 7634 0020 80BD     		pop	{r7, pc}
 7635              	.L569:
 7636 0022 C046     		.align	2
 7637              	.L568:
 7638 0024 00000000 		.word	devAddr
 7639 0028 00000000 		.word	buffer
 7640              		.cfi_endproc
 7641              	.LFE152:
 7642              		.size	MPU6050_getXPosMotionDetected, .-MPU6050_getXPosMotionDetected
 7643              		.section	.text.MPU6050_getYNegMotionDetected,"ax",%progbits
 7644              		.align	2
 7645              		.global	MPU6050_getYNegMotionDetected
 7646              		.code	16
 7647              		.thumb_func
 7648              		.type	MPU6050_getYNegMotionDetected, %function
 7649              	MPU6050_getYNegMotionDetected:
 7650              	.LFB153:
2114:mpu6050.c     **** /** Get Y-axis negative motion detection interrupt status.
2115:mpu6050.c     ****  * @return Motion detection status
2116:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2117:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_YNEG_BIT
2118:mpu6050.c     ****  */
2119:mpu6050.c     **** bool MPU6050_getYNegMotionDetected() {
 7651              		.loc 1 2119 0
 7652              		.cfi_startproc
 7653              		@ args = 0, pretend = 0, frame = 0
 7654              		@ frame_needed = 1, uses_anonymous_args = 0
 7655 0000 80B5     		push	{r7, lr}
 7656              		.cfi_def_cfa_offset 8
 7657              		.cfi_offset 7, -8
 7658              		.cfi_offset 14, -4
 7659 0002 00AF     		add	r7, sp, #0
 7660              		.cfi_def_cfa_register 7
2120:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YNEG_BIT, buffer);
 7661              		.loc 1 2120 0
 7662 0004 074B     		ldr	r3, .L572
 7663 0006 1878     		ldrb	r0, [r3]
 7664 0008 074B     		ldr	r3, .L572+4
 7665 000a 0522     		movs	r2, #5
 7666 000c 6121     		movs	r1, #97
 7667 000e FFF7FEFF 		bl	I2CReadBit
2121:mpu6050.c     ****     return buffer[0];
 7668              		.loc 1 2121 0
 7669 0012 054B     		ldr	r3, .L572+4
 7670 0014 1B78     		ldrb	r3, [r3]
 7671 0016 5A1E     		subs	r2, r3, #1
 7672 0018 9341     		sbcs	r3, r3, r2
 7673 001a DBB2     		uxtb	r3, r3
2122:mpu6050.c     **** }
 7674              		.loc 1 2122 0
 7675 001c 1800     		movs	r0, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 173


 7676 001e BD46     		mov	sp, r7
 7677              		@ sp needed
 7678 0020 80BD     		pop	{r7, pc}
 7679              	.L573:
 7680 0022 C046     		.align	2
 7681              	.L572:
 7682 0024 00000000 		.word	devAddr
 7683 0028 00000000 		.word	buffer
 7684              		.cfi_endproc
 7685              	.LFE153:
 7686              		.size	MPU6050_getYNegMotionDetected, .-MPU6050_getYNegMotionDetected
 7687              		.section	.text.MPU6050_getYPosMotionDetected,"ax",%progbits
 7688              		.align	2
 7689              		.global	MPU6050_getYPosMotionDetected
 7690              		.code	16
 7691              		.thumb_func
 7692              		.type	MPU6050_getYPosMotionDetected, %function
 7693              	MPU6050_getYPosMotionDetected:
 7694              	.LFB154:
2123:mpu6050.c     **** /** Get Y-axis positive motion detection interrupt status.
2124:mpu6050.c     ****  * @return Motion detection status
2125:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2126:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_YPOS_BIT
2127:mpu6050.c     ****  */
2128:mpu6050.c     **** bool MPU6050_getYPosMotionDetected() {
 7695              		.loc 1 2128 0
 7696              		.cfi_startproc
 7697              		@ args = 0, pretend = 0, frame = 0
 7698              		@ frame_needed = 1, uses_anonymous_args = 0
 7699 0000 80B5     		push	{r7, lr}
 7700              		.cfi_def_cfa_offset 8
 7701              		.cfi_offset 7, -8
 7702              		.cfi_offset 14, -4
 7703 0002 00AF     		add	r7, sp, #0
 7704              		.cfi_def_cfa_register 7
2129:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YPOS_BIT, buffer);
 7705              		.loc 1 2129 0
 7706 0004 074B     		ldr	r3, .L576
 7707 0006 1878     		ldrb	r0, [r3]
 7708 0008 074B     		ldr	r3, .L576+4
 7709 000a 0422     		movs	r2, #4
 7710 000c 6121     		movs	r1, #97
 7711 000e FFF7FEFF 		bl	I2CReadBit
2130:mpu6050.c     ****     return buffer[0];
 7712              		.loc 1 2130 0
 7713 0012 054B     		ldr	r3, .L576+4
 7714 0014 1B78     		ldrb	r3, [r3]
 7715 0016 5A1E     		subs	r2, r3, #1
 7716 0018 9341     		sbcs	r3, r3, r2
 7717 001a DBB2     		uxtb	r3, r3
2131:mpu6050.c     **** }
 7718              		.loc 1 2131 0
 7719 001c 1800     		movs	r0, r3
 7720 001e BD46     		mov	sp, r7
 7721              		@ sp needed
 7722 0020 80BD     		pop	{r7, pc}
 7723              	.L577:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 174


 7724 0022 C046     		.align	2
 7725              	.L576:
 7726 0024 00000000 		.word	devAddr
 7727 0028 00000000 		.word	buffer
 7728              		.cfi_endproc
 7729              	.LFE154:
 7730              		.size	MPU6050_getYPosMotionDetected, .-MPU6050_getYPosMotionDetected
 7731              		.section	.text.MPU6050_getZNegMotionDetected,"ax",%progbits
 7732              		.align	2
 7733              		.global	MPU6050_getZNegMotionDetected
 7734              		.code	16
 7735              		.thumb_func
 7736              		.type	MPU6050_getZNegMotionDetected, %function
 7737              	MPU6050_getZNegMotionDetected:
 7738              	.LFB155:
2132:mpu6050.c     **** /** Get Z-axis negative motion detection interrupt status.
2133:mpu6050.c     ****  * @return Motion detection status
2134:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2135:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_ZNEG_BIT
2136:mpu6050.c     ****  */
2137:mpu6050.c     **** bool MPU6050_getZNegMotionDetected() {
 7739              		.loc 1 2137 0
 7740              		.cfi_startproc
 7741              		@ args = 0, pretend = 0, frame = 0
 7742              		@ frame_needed = 1, uses_anonymous_args = 0
 7743 0000 80B5     		push	{r7, lr}
 7744              		.cfi_def_cfa_offset 8
 7745              		.cfi_offset 7, -8
 7746              		.cfi_offset 14, -4
 7747 0002 00AF     		add	r7, sp, #0
 7748              		.cfi_def_cfa_register 7
2138:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZNEG_BIT, buffer);
 7749              		.loc 1 2138 0
 7750 0004 074B     		ldr	r3, .L580
 7751 0006 1878     		ldrb	r0, [r3]
 7752 0008 074B     		ldr	r3, .L580+4
 7753 000a 0322     		movs	r2, #3
 7754 000c 6121     		movs	r1, #97
 7755 000e FFF7FEFF 		bl	I2CReadBit
2139:mpu6050.c     ****     return buffer[0];
 7756              		.loc 1 2139 0
 7757 0012 054B     		ldr	r3, .L580+4
 7758 0014 1B78     		ldrb	r3, [r3]
 7759 0016 5A1E     		subs	r2, r3, #1
 7760 0018 9341     		sbcs	r3, r3, r2
 7761 001a DBB2     		uxtb	r3, r3
2140:mpu6050.c     **** }
 7762              		.loc 1 2140 0
 7763 001c 1800     		movs	r0, r3
 7764 001e BD46     		mov	sp, r7
 7765              		@ sp needed
 7766 0020 80BD     		pop	{r7, pc}
 7767              	.L581:
 7768 0022 C046     		.align	2
 7769              	.L580:
 7770 0024 00000000 		.word	devAddr
 7771 0028 00000000 		.word	buffer
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 175


 7772              		.cfi_endproc
 7773              	.LFE155:
 7774              		.size	MPU6050_getZNegMotionDetected, .-MPU6050_getZNegMotionDetected
 7775              		.section	.text.MPU6050_getZPosMotionDetected,"ax",%progbits
 7776              		.align	2
 7777              		.global	MPU6050_getZPosMotionDetected
 7778              		.code	16
 7779              		.thumb_func
 7780              		.type	MPU6050_getZPosMotionDetected, %function
 7781              	MPU6050_getZPosMotionDetected:
 7782              	.LFB156:
2141:mpu6050.c     **** /** Get Z-axis positive motion detection interrupt status.
2142:mpu6050.c     ****  * @return Motion detection status
2143:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2144:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_ZPOS_BIT
2145:mpu6050.c     ****  */
2146:mpu6050.c     **** bool MPU6050_getZPosMotionDetected() {
 7783              		.loc 1 2146 0
 7784              		.cfi_startproc
 7785              		@ args = 0, pretend = 0, frame = 0
 7786              		@ frame_needed = 1, uses_anonymous_args = 0
 7787 0000 80B5     		push	{r7, lr}
 7788              		.cfi_def_cfa_offset 8
 7789              		.cfi_offset 7, -8
 7790              		.cfi_offset 14, -4
 7791 0002 00AF     		add	r7, sp, #0
 7792              		.cfi_def_cfa_register 7
2147:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZPOS_BIT, buffer);
 7793              		.loc 1 2147 0
 7794 0004 074B     		ldr	r3, .L584
 7795 0006 1878     		ldrb	r0, [r3]
 7796 0008 074B     		ldr	r3, .L584+4
 7797 000a 0222     		movs	r2, #2
 7798 000c 6121     		movs	r1, #97
 7799 000e FFF7FEFF 		bl	I2CReadBit
2148:mpu6050.c     ****     return buffer[0];
 7800              		.loc 1 2148 0
 7801 0012 054B     		ldr	r3, .L584+4
 7802 0014 1B78     		ldrb	r3, [r3]
 7803 0016 5A1E     		subs	r2, r3, #1
 7804 0018 9341     		sbcs	r3, r3, r2
 7805 001a DBB2     		uxtb	r3, r3
2149:mpu6050.c     **** }
 7806              		.loc 1 2149 0
 7807 001c 1800     		movs	r0, r3
 7808 001e BD46     		mov	sp, r7
 7809              		@ sp needed
 7810 0020 80BD     		pop	{r7, pc}
 7811              	.L585:
 7812 0022 C046     		.align	2
 7813              	.L584:
 7814 0024 00000000 		.word	devAddr
 7815 0028 00000000 		.word	buffer
 7816              		.cfi_endproc
 7817              	.LFE156:
 7818              		.size	MPU6050_getZPosMotionDetected, .-MPU6050_getZPosMotionDetected
 7819              		.section	.text.MPU6050_getZeroMotionDetected,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 176


 7820              		.align	2
 7821              		.global	MPU6050_getZeroMotionDetected
 7822              		.code	16
 7823              		.thumb_func
 7824              		.type	MPU6050_getZeroMotionDetected, %function
 7825              	MPU6050_getZeroMotionDetected:
 7826              	.LFB157:
2150:mpu6050.c     **** /** Get zero motion detection interrupt status.
2151:mpu6050.c     ****  * @return Motion detection status
2152:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2153:mpu6050.c     ****  * @see MPU6050_MOTION_MOT_ZRMOT_BIT
2154:mpu6050.c     ****  */
2155:mpu6050.c     **** bool MPU6050_getZeroMotionDetected() {
 7827              		.loc 1 2155 0
 7828              		.cfi_startproc
 7829              		@ args = 0, pretend = 0, frame = 0
 7830              		@ frame_needed = 1, uses_anonymous_args = 0
 7831 0000 80B5     		push	{r7, lr}
 7832              		.cfi_def_cfa_offset 8
 7833              		.cfi_offset 7, -8
 7834              		.cfi_offset 14, -4
 7835 0002 00AF     		add	r7, sp, #0
 7836              		.cfi_def_cfa_register 7
2156:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZRMOT_BIT, buffer);
 7837              		.loc 1 2156 0
 7838 0004 074B     		ldr	r3, .L588
 7839 0006 1878     		ldrb	r0, [r3]
 7840 0008 074B     		ldr	r3, .L588+4
 7841 000a 0022     		movs	r2, #0
 7842 000c 6121     		movs	r1, #97
 7843 000e FFF7FEFF 		bl	I2CReadBit
2157:mpu6050.c     ****     return buffer[0];
 7844              		.loc 1 2157 0
 7845 0012 054B     		ldr	r3, .L588+4
 7846 0014 1B78     		ldrb	r3, [r3]
 7847 0016 5A1E     		subs	r2, r3, #1
 7848 0018 9341     		sbcs	r3, r3, r2
 7849 001a DBB2     		uxtb	r3, r3
2158:mpu6050.c     **** }
 7850              		.loc 1 2158 0
 7851 001c 1800     		movs	r0, r3
 7852 001e BD46     		mov	sp, r7
 7853              		@ sp needed
 7854 0020 80BD     		pop	{r7, pc}
 7855              	.L589:
 7856 0022 C046     		.align	2
 7857              	.L588:
 7858 0024 00000000 		.word	devAddr
 7859 0028 00000000 		.word	buffer
 7860              		.cfi_endproc
 7861              	.LFE157:
 7862              		.size	MPU6050_getZeroMotionDetected, .-MPU6050_getZeroMotionDetected
 7863              		.section	.text.MPU6050_setSlaveOutputByte,"ax",%progbits
 7864              		.align	2
 7865              		.global	MPU6050_setSlaveOutputByte
 7866              		.code	16
 7867              		.thumb_func
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 177


 7868              		.type	MPU6050_setSlaveOutputByte, %function
 7869              	MPU6050_setSlaveOutputByte:
 7870              	.LFB158:
2159:mpu6050.c     **** 
2160:mpu6050.c     **** // I2C_SLV*_DO register
2161:mpu6050.c     **** 
2162:mpu6050.c     **** /** Write byte to Data Output container for specified slave.
2163:mpu6050.c     ****  * This register holds the output data written into Slave when Slave is set to
2164:mpu6050.c     ****  * write mode. For further information regarding Slave control, please
2165:mpu6050.c     ****  * refer to Registers 37 to 39 and immediately following.
2166:mpu6050.c     ****  * @param num Slave number (0-3)
2167:mpu6050.c     ****  * @param data Byte to write
2168:mpu6050.c     ****  * @see MPU6050_RA_I2C_SLV0_DO
2169:mpu6050.c     ****  */
2170:mpu6050.c     **** void MPU6050_setSlaveOutputByte(uint8_t num, uint8_t data) {
 7871              		.loc 1 2170 0
 7872              		.cfi_startproc
 7873              		@ args = 0, pretend = 0, frame = 8
 7874              		@ frame_needed = 1, uses_anonymous_args = 0
 7875 0000 80B5     		push	{r7, lr}
 7876              		.cfi_def_cfa_offset 8
 7877              		.cfi_offset 7, -8
 7878              		.cfi_offset 14, -4
 7879 0002 82B0     		sub	sp, sp, #8
 7880              		.cfi_def_cfa_offset 16
 7881 0004 00AF     		add	r7, sp, #0
 7882              		.cfi_def_cfa_register 7
 7883 0006 0200     		movs	r2, r0
 7884 0008 FB1D     		adds	r3, r7, #7
 7885 000a 1A70     		strb	r2, [r3]
 7886 000c BB1D     		adds	r3, r7, #6
 7887 000e 0A1C     		adds	r2, r1, #0
 7888 0010 1A70     		strb	r2, [r3]
2171:mpu6050.c     ****     if (num > 3) return;
 7889              		.loc 1 2171 0
 7890 0012 FB1D     		adds	r3, r7, #7
 7891 0014 1B78     		ldrb	r3, [r3]
 7892 0016 032B     		cmp	r3, #3
 7893 0018 0BD8     		bhi	.L593
2172:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_DO + num, data);
 7894              		.loc 1 2172 0
 7895 001a 084B     		ldr	r3, .L594
 7896 001c 1878     		ldrb	r0, [r3]
 7897 001e FB1D     		adds	r3, r7, #7
 7898 0020 1B78     		ldrb	r3, [r3]
 7899 0022 6333     		adds	r3, r3, #99
 7900 0024 D9B2     		uxtb	r1, r3
 7901 0026 BB1D     		adds	r3, r7, #6
 7902 0028 1B78     		ldrb	r3, [r3]
 7903 002a 1A00     		movs	r2, r3
 7904 002c FFF7FEFF 		bl	I2CWriteByte
 7905 0030 00E0     		b	.L590
 7906              	.L593:
2171:mpu6050.c     ****     if (num > 3) return;
 7907              		.loc 1 2171 0
 7908 0032 C046     		nop
 7909              	.L590:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 178


2173:mpu6050.c     **** }
 7910              		.loc 1 2173 0
 7911 0034 BD46     		mov	sp, r7
 7912 0036 02B0     		add	sp, sp, #8
 7913              		@ sp needed
 7914 0038 80BD     		pop	{r7, pc}
 7915              	.L595:
 7916 003a C046     		.align	2
 7917              	.L594:
 7918 003c 00000000 		.word	devAddr
 7919              		.cfi_endproc
 7920              	.LFE158:
 7921              		.size	MPU6050_setSlaveOutputByte, .-MPU6050_setSlaveOutputByte
 7922              		.section	.text.MPU6050_getExternalShadowDelayEnabled,"ax",%progbits
 7923              		.align	2
 7924              		.global	MPU6050_getExternalShadowDelayEnabled
 7925              		.code	16
 7926              		.thumb_func
 7927              		.type	MPU6050_getExternalShadowDelayEnabled, %function
 7928              	MPU6050_getExternalShadowDelayEnabled:
 7929              	.LFB159:
2174:mpu6050.c     **** 
2175:mpu6050.c     **** // I2C_MST_DELAY_CTRL register
2176:mpu6050.c     **** 
2177:mpu6050.c     **** /** Get external data shadow delay enabled status.
2178:mpu6050.c     ****  * This register is used to specify the timing of external sensor data
2179:mpu6050.c     ****  * shadowing. When DELAY_ES_SHADOW is set to 1, shadowing of external
2180:mpu6050.c     ****  * sensor data is delayed until all data has been received.
2181:mpu6050.c     ****  * @return Current external data shadow delay enabled status.
2182:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2183:mpu6050.c     ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2184:mpu6050.c     ****  */
2185:mpu6050.c     **** bool MPU6050_getExternalShadowDelayEnabled() {
 7930              		.loc 1 2185 0
 7931              		.cfi_startproc
 7932              		@ args = 0, pretend = 0, frame = 0
 7933              		@ frame_needed = 1, uses_anonymous_args = 0
 7934 0000 80B5     		push	{r7, lr}
 7935              		.cfi_def_cfa_offset 8
 7936              		.cfi_offset 7, -8
 7937              		.cfi_offset 14, -4
 7938 0002 00AF     		add	r7, sp, #0
 7939              		.cfi_def_cfa_register 7
2186:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, buffe
 7940              		.loc 1 2186 0
 7941 0004 074B     		ldr	r3, .L598
 7942 0006 1878     		ldrb	r0, [r3]
 7943 0008 074B     		ldr	r3, .L598+4
 7944 000a 0722     		movs	r2, #7
 7945 000c 6721     		movs	r1, #103
 7946 000e FFF7FEFF 		bl	I2CReadBit
2187:mpu6050.c     ****     return buffer[0];
 7947              		.loc 1 2187 0
 7948 0012 054B     		ldr	r3, .L598+4
 7949 0014 1B78     		ldrb	r3, [r3]
 7950 0016 5A1E     		subs	r2, r3, #1
 7951 0018 9341     		sbcs	r3, r3, r2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 179


 7952 001a DBB2     		uxtb	r3, r3
2188:mpu6050.c     **** }
 7953              		.loc 1 2188 0
 7954 001c 1800     		movs	r0, r3
 7955 001e BD46     		mov	sp, r7
 7956              		@ sp needed
 7957 0020 80BD     		pop	{r7, pc}
 7958              	.L599:
 7959 0022 C046     		.align	2
 7960              	.L598:
 7961 0024 00000000 		.word	devAddr
 7962 0028 00000000 		.word	buffer
 7963              		.cfi_endproc
 7964              	.LFE159:
 7965              		.size	MPU6050_getExternalShadowDelayEnabled, .-MPU6050_getExternalShadowDelayEnabled
 7966              		.section	.text.MPU6050_setExternalShadowDelayEnabled,"ax",%progbits
 7967              		.align	2
 7968              		.global	MPU6050_setExternalShadowDelayEnabled
 7969              		.code	16
 7970              		.thumb_func
 7971              		.type	MPU6050_setExternalShadowDelayEnabled, %function
 7972              	MPU6050_setExternalShadowDelayEnabled:
 7973              	.LFB160:
2189:mpu6050.c     **** /** Set external data shadow delay enabled status.
2190:mpu6050.c     ****  * @param enabled New external data shadow delay enabled status.
2191:mpu6050.c     ****  * @see getExternalShadowDelayEnabled()
2192:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2193:mpu6050.c     ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2194:mpu6050.c     ****  */
2195:mpu6050.c     **** void MPU6050_setExternalShadowDelayEnabled(bool enabled) {
 7974              		.loc 1 2195 0
 7975              		.cfi_startproc
 7976              		@ args = 0, pretend = 0, frame = 8
 7977              		@ frame_needed = 1, uses_anonymous_args = 0
 7978 0000 80B5     		push	{r7, lr}
 7979              		.cfi_def_cfa_offset 8
 7980              		.cfi_offset 7, -8
 7981              		.cfi_offset 14, -4
 7982 0002 82B0     		sub	sp, sp, #8
 7983              		.cfi_def_cfa_offset 16
 7984 0004 00AF     		add	r7, sp, #0
 7985              		.cfi_def_cfa_register 7
 7986 0006 0200     		movs	r2, r0
 7987 0008 FB1D     		adds	r3, r7, #7
 7988 000a 1A70     		strb	r2, [r3]
2196:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, enab
 7989              		.loc 1 2196 0
 7990 000c 054B     		ldr	r3, .L601
 7991 000e 1878     		ldrb	r0, [r3]
 7992 0010 FB1D     		adds	r3, r7, #7
 7993 0012 1B78     		ldrb	r3, [r3]
 7994 0014 0722     		movs	r2, #7
 7995 0016 6721     		movs	r1, #103
 7996 0018 FFF7FEFF 		bl	I2CWriteBit
2197:mpu6050.c     **** }
 7997              		.loc 1 2197 0
 7998 001c C046     		nop
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 180


 7999 001e BD46     		mov	sp, r7
 8000 0020 02B0     		add	sp, sp, #8
 8001              		@ sp needed
 8002 0022 80BD     		pop	{r7, pc}
 8003              	.L602:
 8004              		.align	2
 8005              	.L601:
 8006 0024 00000000 		.word	devAddr
 8007              		.cfi_endproc
 8008              	.LFE160:
 8009              		.size	MPU6050_setExternalShadowDelayEnabled, .-MPU6050_setExternalShadowDelayEnabled
 8010              		.section	.text.MPU6050_getSlaveDelayEnabled,"ax",%progbits
 8011              		.align	2
 8012              		.global	MPU6050_getSlaveDelayEnabled
 8013              		.code	16
 8014              		.thumb_func
 8015              		.type	MPU6050_getSlaveDelayEnabled, %function
 8016              	MPU6050_getSlaveDelayEnabled:
 8017              	.LFB161:
2198:mpu6050.c     **** /** Get slave delay enabled status.
2199:mpu6050.c     ****  * When a particular slave delay is enabled, the rate of access for the that
2200:mpu6050.c     ****  * slave device is reduced. When a slave's access rate is decreased relative to
2201:mpu6050.c     ****  * the Sample Rate, the slave is accessed every:
2202:mpu6050.c     ****  *
2203:mpu6050.c     ****  *     1 / (1 + I2C_MST_DLY) Samples
2204:mpu6050.c     ****  *
2205:mpu6050.c     ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register  * 25)
2206:mpu6050.c     ****  * and DLPF_CFG (register 26).
2207:mpu6050.c     ****  *
2208:mpu6050.c     ****  * For further information regarding I2C_MST_DLY, please refer to register 52.
2209:mpu6050.c     ****  * For further information regarding the Sample Rate, please refer to register 25.
2210:mpu6050.c     ****  *
2211:mpu6050.c     ****  * @param num Slave number (0-4)
2212:mpu6050.c     ****  * @return Current slave delay enabled status.
2213:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2214:mpu6050.c     ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2215:mpu6050.c     ****  */
2216:mpu6050.c     **** bool MPU6050_getSlaveDelayEnabled(uint8_t num) {
 8018              		.loc 1 2216 0
 8019              		.cfi_startproc
 8020              		@ args = 0, pretend = 0, frame = 8
 8021              		@ frame_needed = 1, uses_anonymous_args = 0
 8022 0000 80B5     		push	{r7, lr}
 8023              		.cfi_def_cfa_offset 8
 8024              		.cfi_offset 7, -8
 8025              		.cfi_offset 14, -4
 8026 0002 82B0     		sub	sp, sp, #8
 8027              		.cfi_def_cfa_offset 16
 8028 0004 00AF     		add	r7, sp, #0
 8029              		.cfi_def_cfa_register 7
 8030 0006 0200     		movs	r2, r0
 8031 0008 FB1D     		adds	r3, r7, #7
 8032 000a 1A70     		strb	r2, [r3]
2217:mpu6050.c     ****     // MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT is 4, SLV3 is 3, etc.
2218:mpu6050.c     ****     if (num > 4) return 0;
 8033              		.loc 1 2218 0
 8034 000c FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 181


 8035 000e 1B78     		ldrb	r3, [r3]
 8036 0010 042B     		cmp	r3, #4
 8037 0012 01D9     		bls	.L604
 8038              		.loc 1 2218 0 is_stmt 0 discriminator 1
 8039 0014 0023     		movs	r3, #0
 8040 0016 0DE0     		b	.L605
 8041              	.L604:
2219:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, buffer);
 8042              		.loc 1 2219 0 is_stmt 1
 8043 0018 084B     		ldr	r3, .L606
 8044 001a 1878     		ldrb	r0, [r3]
 8045 001c 0849     		ldr	r1, .L606+4
 8046 001e FB1D     		adds	r3, r7, #7
 8047 0020 1A78     		ldrb	r2, [r3]
 8048 0022 0B00     		movs	r3, r1
 8049 0024 6721     		movs	r1, #103
 8050 0026 FFF7FEFF 		bl	I2CReadBit
2220:mpu6050.c     ****     return buffer[0];
 8051              		.loc 1 2220 0
 8052 002a 054B     		ldr	r3, .L606+4
 8053 002c 1B78     		ldrb	r3, [r3]
 8054 002e 5A1E     		subs	r2, r3, #1
 8055 0030 9341     		sbcs	r3, r3, r2
 8056 0032 DBB2     		uxtb	r3, r3
 8057              	.L605:
2221:mpu6050.c     **** }
 8058              		.loc 1 2221 0
 8059 0034 1800     		movs	r0, r3
 8060 0036 BD46     		mov	sp, r7
 8061 0038 02B0     		add	sp, sp, #8
 8062              		@ sp needed
 8063 003a 80BD     		pop	{r7, pc}
 8064              	.L607:
 8065              		.align	2
 8066              	.L606:
 8067 003c 00000000 		.word	devAddr
 8068 0040 00000000 		.word	buffer
 8069              		.cfi_endproc
 8070              	.LFE161:
 8071              		.size	MPU6050_getSlaveDelayEnabled, .-MPU6050_getSlaveDelayEnabled
 8072              		.section	.text.MPU6050_setSlaveDelayEnabled,"ax",%progbits
 8073              		.align	2
 8074              		.global	MPU6050_setSlaveDelayEnabled
 8075              		.code	16
 8076              		.thumb_func
 8077              		.type	MPU6050_setSlaveDelayEnabled, %function
 8078              	MPU6050_setSlaveDelayEnabled:
 8079              	.LFB162:
2222:mpu6050.c     **** /** Set slave delay enabled status.
2223:mpu6050.c     ****  * @param num Slave number (0-4)
2224:mpu6050.c     ****  * @param enabled New slave delay enabled status.
2225:mpu6050.c     ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2226:mpu6050.c     ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2227:mpu6050.c     ****  */
2228:mpu6050.c     **** void MPU6050_setSlaveDelayEnabled(uint8_t num, bool enabled) {
 8080              		.loc 1 2228 0
 8081              		.cfi_startproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 182


 8082              		@ args = 0, pretend = 0, frame = 8
 8083              		@ frame_needed = 1, uses_anonymous_args = 0
 8084 0000 80B5     		push	{r7, lr}
 8085              		.cfi_def_cfa_offset 8
 8086              		.cfi_offset 7, -8
 8087              		.cfi_offset 14, -4
 8088 0002 82B0     		sub	sp, sp, #8
 8089              		.cfi_def_cfa_offset 16
 8090 0004 00AF     		add	r7, sp, #0
 8091              		.cfi_def_cfa_register 7
 8092 0006 0200     		movs	r2, r0
 8093 0008 FB1D     		adds	r3, r7, #7
 8094 000a 1A70     		strb	r2, [r3]
 8095 000c BB1D     		adds	r3, r7, #6
 8096 000e 0A1C     		adds	r2, r1, #0
 8097 0010 1A70     		strb	r2, [r3]
2229:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, enabled);
 8098              		.loc 1 2229 0
 8099 0012 074B     		ldr	r3, .L609
 8100 0014 1878     		ldrb	r0, [r3]
 8101 0016 BB1D     		adds	r3, r7, #6
 8102 0018 1978     		ldrb	r1, [r3]
 8103 001a FB1D     		adds	r3, r7, #7
 8104 001c 1A78     		ldrb	r2, [r3]
 8105 001e 0B00     		movs	r3, r1
 8106 0020 6721     		movs	r1, #103
 8107 0022 FFF7FEFF 		bl	I2CWriteBit
2230:mpu6050.c     **** }
 8108              		.loc 1 2230 0
 8109 0026 C046     		nop
 8110 0028 BD46     		mov	sp, r7
 8111 002a 02B0     		add	sp, sp, #8
 8112              		@ sp needed
 8113 002c 80BD     		pop	{r7, pc}
 8114              	.L610:
 8115 002e C046     		.align	2
 8116              	.L609:
 8117 0030 00000000 		.word	devAddr
 8118              		.cfi_endproc
 8119              	.LFE162:
 8120              		.size	MPU6050_setSlaveDelayEnabled, .-MPU6050_setSlaveDelayEnabled
 8121              		.section	.text.MPU6050_resetGyroscopePath,"ax",%progbits
 8122              		.align	2
 8123              		.global	MPU6050_resetGyroscopePath
 8124              		.code	16
 8125              		.thumb_func
 8126              		.type	MPU6050_resetGyroscopePath, %function
 8127              	MPU6050_resetGyroscopePath:
 8128              	.LFB163:
2231:mpu6050.c     **** 
2232:mpu6050.c     **** // SIGNAL_PATH_RESET register
2233:mpu6050.c     **** 
2234:mpu6050.c     **** /** Reset gyroscope signal path.
2235:mpu6050.c     ****  * The reset will revert the signal path analog to digital converters and
2236:mpu6050.c     ****  * filters to their power up configurations.
2237:mpu6050.c     ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2238:mpu6050.c     ****  * @see MPU6050_PATHRESET_GYRO_RESET_BIT
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 183


2239:mpu6050.c     ****  */
2240:mpu6050.c     **** void MPU6050_resetGyroscopePath() {
 8129              		.loc 1 2240 0
 8130              		.cfi_startproc
 8131              		@ args = 0, pretend = 0, frame = 0
 8132              		@ frame_needed = 1, uses_anonymous_args = 0
 8133 0000 80B5     		push	{r7, lr}
 8134              		.cfi_def_cfa_offset 8
 8135              		.cfi_offset 7, -8
 8136              		.cfi_offset 14, -4
 8137 0002 00AF     		add	r7, sp, #0
 8138              		.cfi_def_cfa_register 7
2241:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_GYRO_RESET_BIT, true);
 8139              		.loc 1 2241 0
 8140 0004 044B     		ldr	r3, .L612
 8141 0006 1878     		ldrb	r0, [r3]
 8142 0008 0123     		movs	r3, #1
 8143 000a 0222     		movs	r2, #2
 8144 000c 6821     		movs	r1, #104
 8145 000e FFF7FEFF 		bl	I2CWriteBit
2242:mpu6050.c     **** }
 8146              		.loc 1 2242 0
 8147 0012 C046     		nop
 8148 0014 BD46     		mov	sp, r7
 8149              		@ sp needed
 8150 0016 80BD     		pop	{r7, pc}
 8151              	.L613:
 8152              		.align	2
 8153              	.L612:
 8154 0018 00000000 		.word	devAddr
 8155              		.cfi_endproc
 8156              	.LFE163:
 8157              		.size	MPU6050_resetGyroscopePath, .-MPU6050_resetGyroscopePath
 8158              		.section	.text.MPU6050_resetAccelerometerPath,"ax",%progbits
 8159              		.align	2
 8160              		.global	MPU6050_resetAccelerometerPath
 8161              		.code	16
 8162              		.thumb_func
 8163              		.type	MPU6050_resetAccelerometerPath, %function
 8164              	MPU6050_resetAccelerometerPath:
 8165              	.LFB164:
2243:mpu6050.c     **** /** Reset accelerometer signal path.
2244:mpu6050.c     ****  * The reset will revert the signal path analog to digital converters and
2245:mpu6050.c     ****  * filters to their power up configurations.
2246:mpu6050.c     ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2247:mpu6050.c     ****  * @see MPU6050_PATHRESET_ACCEL_RESET_BIT
2248:mpu6050.c     ****  */
2249:mpu6050.c     **** void MPU6050_resetAccelerometerPath() {
 8166              		.loc 1 2249 0
 8167              		.cfi_startproc
 8168              		@ args = 0, pretend = 0, frame = 0
 8169              		@ frame_needed = 1, uses_anonymous_args = 0
 8170 0000 80B5     		push	{r7, lr}
 8171              		.cfi_def_cfa_offset 8
 8172              		.cfi_offset 7, -8
 8173              		.cfi_offset 14, -4
 8174 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 184


 8175              		.cfi_def_cfa_register 7
2250:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_ACCEL_RESET_BIT, true);
 8176              		.loc 1 2250 0
 8177 0004 044B     		ldr	r3, .L615
 8178 0006 1878     		ldrb	r0, [r3]
 8179 0008 0123     		movs	r3, #1
 8180 000a 0122     		movs	r2, #1
 8181 000c 6821     		movs	r1, #104
 8182 000e FFF7FEFF 		bl	I2CWriteBit
2251:mpu6050.c     **** }
 8183              		.loc 1 2251 0
 8184 0012 C046     		nop
 8185 0014 BD46     		mov	sp, r7
 8186              		@ sp needed
 8187 0016 80BD     		pop	{r7, pc}
 8188              	.L616:
 8189              		.align	2
 8190              	.L615:
 8191 0018 00000000 		.word	devAddr
 8192              		.cfi_endproc
 8193              	.LFE164:
 8194              		.size	MPU6050_resetAccelerometerPath, .-MPU6050_resetAccelerometerPath
 8195              		.section	.text.MPU6050_resetTemperaturePath,"ax",%progbits
 8196              		.align	2
 8197              		.global	MPU6050_resetTemperaturePath
 8198              		.code	16
 8199              		.thumb_func
 8200              		.type	MPU6050_resetTemperaturePath, %function
 8201              	MPU6050_resetTemperaturePath:
 8202              	.LFB165:
2252:mpu6050.c     **** /** Reset temperature sensor signal path.
2253:mpu6050.c     ****  * The reset will revert the signal path analog to digital converters and
2254:mpu6050.c     ****  * filters to their power up configurations.
2255:mpu6050.c     ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2256:mpu6050.c     ****  * @see MPU6050_PATHRESET_TEMP_RESET_BIT
2257:mpu6050.c     ****  */
2258:mpu6050.c     **** void MPU6050_resetTemperaturePath() {
 8203              		.loc 1 2258 0
 8204              		.cfi_startproc
 8205              		@ args = 0, pretend = 0, frame = 0
 8206              		@ frame_needed = 1, uses_anonymous_args = 0
 8207 0000 80B5     		push	{r7, lr}
 8208              		.cfi_def_cfa_offset 8
 8209              		.cfi_offset 7, -8
 8210              		.cfi_offset 14, -4
 8211 0002 00AF     		add	r7, sp, #0
 8212              		.cfi_def_cfa_register 7
2259:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_TEMP_RESET_BIT, true);
 8213              		.loc 1 2259 0
 8214 0004 044B     		ldr	r3, .L618
 8215 0006 1878     		ldrb	r0, [r3]
 8216 0008 0123     		movs	r3, #1
 8217 000a 0022     		movs	r2, #0
 8218 000c 6821     		movs	r1, #104
 8219 000e FFF7FEFF 		bl	I2CWriteBit
2260:mpu6050.c     **** }
 8220              		.loc 1 2260 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 185


 8221 0012 C046     		nop
 8222 0014 BD46     		mov	sp, r7
 8223              		@ sp needed
 8224 0016 80BD     		pop	{r7, pc}
 8225              	.L619:
 8226              		.align	2
 8227              	.L618:
 8228 0018 00000000 		.word	devAddr
 8229              		.cfi_endproc
 8230              	.LFE165:
 8231              		.size	MPU6050_resetTemperaturePath, .-MPU6050_resetTemperaturePath
 8232              		.section	.text.MPU6050_getAccelerometerPowerOnDelay,"ax",%progbits
 8233              		.align	2
 8234              		.global	MPU6050_getAccelerometerPowerOnDelay
 8235              		.code	16
 8236              		.thumb_func
 8237              		.type	MPU6050_getAccelerometerPowerOnDelay, %function
 8238              	MPU6050_getAccelerometerPowerOnDelay:
 8239              	.LFB166:
2261:mpu6050.c     **** 
2262:mpu6050.c     **** // MOT_DETECT_CTRL register
2263:mpu6050.c     **** 
2264:mpu6050.c     **** /** Get accelerometer power-on delay.
2265:mpu6050.c     ****  * The accelerometer data path provides samples to the sensor registers, Motion
2266:mpu6050.c     ****  * detection, Zero Motion detection, and Free Fall detection modules. The
2267:mpu6050.c     ****  * signal path contains filters which must be flushed on wake-up with new
2268:mpu6050.c     ****  * samples before the detection modules begin operations. The default wake-up
2269:mpu6050.c     ****  * delay, of 4ms can be lengthened by up to 3ms. This additional delay is
2270:mpu6050.c     ****  * specified in ACCEL_ON_DELAY in units of 1 LSB = 1 ms. The user may select
2271:mpu6050.c     ****  * any value above zero unless instructed otherwise by InvenSense. Please refer
2272:mpu6050.c     ****  * to Section 8 of the MPU-6000/MPU-6050 Product Specification document for
2273:mpu6050.c     ****  * further information regarding the detection modules.
2274:mpu6050.c     ****  * @return Current accelerometer power-on delay
2275:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2276:mpu6050.c     ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2277:mpu6050.c     ****  */
2278:mpu6050.c     **** uint8_t MPU6050_getAccelerometerPowerOnDelay() {
 8240              		.loc 1 2278 0
 8241              		.cfi_startproc
 8242              		@ args = 0, pretend = 0, frame = 0
 8243              		@ frame_needed = 1, uses_anonymous_args = 0
 8244 0000 80B5     		push	{r7, lr}
 8245              		.cfi_def_cfa_offset 8
 8246              		.cfi_offset 7, -8
 8247              		.cfi_offset 14, -4
 8248 0002 82B0     		sub	sp, sp, #8
 8249              		.cfi_def_cfa_offset 16
 8250 0004 02AF     		add	r7, sp, #8
 8251              		.cfi_def_cfa 7, 8
2279:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DET
 8252              		.loc 1 2279 0
 8253 0006 074B     		ldr	r3, .L622
 8254 0008 1878     		ldrb	r0, [r3]
 8255 000a 074B     		ldr	r3, .L622+4
 8256 000c 0093     		str	r3, [sp]
 8257 000e 0223     		movs	r3, #2
 8258 0010 0522     		movs	r2, #5
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 186


 8259 0012 6921     		movs	r1, #105
 8260 0014 FFF7FEFF 		bl	I2CReadBits
2280:mpu6050.c     ****     return buffer[0];
 8261              		.loc 1 2280 0
 8262 0018 034B     		ldr	r3, .L622+4
 8263 001a 1B78     		ldrb	r3, [r3]
2281:mpu6050.c     **** }
 8264              		.loc 1 2281 0
 8265 001c 1800     		movs	r0, r3
 8266 001e BD46     		mov	sp, r7
 8267              		@ sp needed
 8268 0020 80BD     		pop	{r7, pc}
 8269              	.L623:
 8270 0022 C046     		.align	2
 8271              	.L622:
 8272 0024 00000000 		.word	devAddr
 8273 0028 00000000 		.word	buffer
 8274              		.cfi_endproc
 8275              	.LFE166:
 8276              		.size	MPU6050_getAccelerometerPowerOnDelay, .-MPU6050_getAccelerometerPowerOnDelay
 8277              		.section	.text.MPU6050_setAccelerometerPowerOnDelay,"ax",%progbits
 8278              		.align	2
 8279              		.global	MPU6050_setAccelerometerPowerOnDelay
 8280              		.code	16
 8281              		.thumb_func
 8282              		.type	MPU6050_setAccelerometerPowerOnDelay, %function
 8283              	MPU6050_setAccelerometerPowerOnDelay:
 8284              	.LFB167:
2282:mpu6050.c     **** /** Set accelerometer power-on delay.
2283:mpu6050.c     ****  * @param delay New accelerometer power-on delay (0-3)
2284:mpu6050.c     ****  * @see getAccelerometerPowerOnDelay()
2285:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2286:mpu6050.c     ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2287:mpu6050.c     ****  */
2288:mpu6050.c     **** void MPU6050_setAccelerometerPowerOnDelay(uint8_t delay) {
 8285              		.loc 1 2288 0
 8286              		.cfi_startproc
 8287              		@ args = 0, pretend = 0, frame = 8
 8288              		@ frame_needed = 1, uses_anonymous_args = 0
 8289 0000 80B5     		push	{r7, lr}
 8290              		.cfi_def_cfa_offset 8
 8291              		.cfi_offset 7, -8
 8292              		.cfi_offset 14, -4
 8293 0002 84B0     		sub	sp, sp, #16
 8294              		.cfi_def_cfa_offset 24
 8295 0004 02AF     		add	r7, sp, #8
 8296              		.cfi_def_cfa 7, 16
 8297 0006 0200     		movs	r2, r0
 8298 0008 FB1D     		adds	r3, r7, #7
 8299 000a 1A70     		strb	r2, [r3]
2289:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DE
 8300              		.loc 1 2289 0
 8301 000c 064B     		ldr	r3, .L625
 8302 000e 1878     		ldrb	r0, [r3]
 8303 0010 FB1D     		adds	r3, r7, #7
 8304 0012 1B78     		ldrb	r3, [r3]
 8305 0014 0093     		str	r3, [sp]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 187


 8306 0016 0223     		movs	r3, #2
 8307 0018 0522     		movs	r2, #5
 8308 001a 6921     		movs	r1, #105
 8309 001c FFF7FEFF 		bl	I2CWriteBits
2290:mpu6050.c     **** }
 8310              		.loc 1 2290 0
 8311 0020 C046     		nop
 8312 0022 BD46     		mov	sp, r7
 8313 0024 02B0     		add	sp, sp, #8
 8314              		@ sp needed
 8315 0026 80BD     		pop	{r7, pc}
 8316              	.L626:
 8317              		.align	2
 8318              	.L625:
 8319 0028 00000000 		.word	devAddr
 8320              		.cfi_endproc
 8321              	.LFE167:
 8322              		.size	MPU6050_setAccelerometerPowerOnDelay, .-MPU6050_setAccelerometerPowerOnDelay
 8323              		.section	.text.MPU6050_getFreefallDetectionCounterDecrement,"ax",%progbits
 8324              		.align	2
 8325              		.global	MPU6050_getFreefallDetectionCounterDecrement
 8326              		.code	16
 8327              		.thumb_func
 8328              		.type	MPU6050_getFreefallDetectionCounterDecrement, %function
 8329              	MPU6050_getFreefallDetectionCounterDecrement:
 8330              	.LFB168:
2291:mpu6050.c     **** /** Get Free Fall detection counter decrement configuration.
2292:mpu6050.c     ****  * Detection is registered by the Free Fall detection module after accelerometer
2293:mpu6050.c     ****  * measurements meet their respective threshold conditions over a specified
2294:mpu6050.c     ****  * number of samples. When the threshold conditions are met, the corresponding
2295:mpu6050.c     ****  * detection counter increments by 1. The user may control the rate at which the
2296:mpu6050.c     ****  * detection counter decrements when the threshold condition is not met by
2297:mpu6050.c     ****  * configuring FF_COUNT. The decrement rate can be set according to the
2298:mpu6050.c     ****  * following table:
2299:mpu6050.c     ****  *
2300:mpu6050.c     ****  * <pre>
2301:mpu6050.c     ****  * FF_COUNT | Counter Decrement
2302:mpu6050.c     ****  * ---------+------------------
2303:mpu6050.c     ****  * 0        | Reset
2304:mpu6050.c     ****  * 1        | 1
2305:mpu6050.c     ****  * 2        | 2
2306:mpu6050.c     ****  * 3        | 4
2307:mpu6050.c     ****  * </pre>
2308:mpu6050.c     ****  *
2309:mpu6050.c     ****  * When FF_COUNT is configured to 0 (reset), any non-qualifying sample will
2310:mpu6050.c     ****  * reset the counter to 0. For further information on Free Fall detection,
2311:mpu6050.c     ****  * please refer to Registers 29 to 32.
2312:mpu6050.c     ****  *
2313:mpu6050.c     ****  * @return Current decrement configuration
2314:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2315:mpu6050.c     ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2316:mpu6050.c     ****  */
2317:mpu6050.c     **** uint8_t MPU6050_getFreefallDetectionCounterDecrement() {
 8331              		.loc 1 2317 0
 8332              		.cfi_startproc
 8333              		@ args = 0, pretend = 0, frame = 0
 8334              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 188


 8335 0000 80B5     		push	{r7, lr}
 8336              		.cfi_def_cfa_offset 8
 8337              		.cfi_offset 7, -8
 8338              		.cfi_offset 14, -4
 8339 0002 82B0     		sub	sp, sp, #8
 8340              		.cfi_def_cfa_offset 16
 8341 0004 02AF     		add	r7, sp, #8
 8342              		.cfi_def_cfa 7, 8
2318:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_FF
 8343              		.loc 1 2318 0
 8344 0006 074B     		ldr	r3, .L629
 8345 0008 1878     		ldrb	r0, [r3]
 8346 000a 074B     		ldr	r3, .L629+4
 8347 000c 0093     		str	r3, [sp]
 8348 000e 0223     		movs	r3, #2
 8349 0010 0322     		movs	r2, #3
 8350 0012 6921     		movs	r1, #105
 8351 0014 FFF7FEFF 		bl	I2CReadBits
2319:mpu6050.c     ****     return buffer[0];
 8352              		.loc 1 2319 0
 8353 0018 034B     		ldr	r3, .L629+4
 8354 001a 1B78     		ldrb	r3, [r3]
2320:mpu6050.c     **** }
 8355              		.loc 1 2320 0
 8356 001c 1800     		movs	r0, r3
 8357 001e BD46     		mov	sp, r7
 8358              		@ sp needed
 8359 0020 80BD     		pop	{r7, pc}
 8360              	.L630:
 8361 0022 C046     		.align	2
 8362              	.L629:
 8363 0024 00000000 		.word	devAddr
 8364 0028 00000000 		.word	buffer
 8365              		.cfi_endproc
 8366              	.LFE168:
 8367              		.size	MPU6050_getFreefallDetectionCounterDecrement, .-MPU6050_getFreefallDetectionCounterDecrement
 8368              		.section	.text.MPU6050_setFreefallDetectionCounterDecrement,"ax",%progbits
 8369              		.align	2
 8370              		.global	MPU6050_setFreefallDetectionCounterDecrement
 8371              		.code	16
 8372              		.thumb_func
 8373              		.type	MPU6050_setFreefallDetectionCounterDecrement, %function
 8374              	MPU6050_setFreefallDetectionCounterDecrement:
 8375              	.LFB169:
2321:mpu6050.c     **** /** Set Free Fall detection counter decrement configuration.
2322:mpu6050.c     ****  * @param decrement New decrement configuration value
2323:mpu6050.c     ****  * @see getFreefallDetectionCounterDecrement()
2324:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2325:mpu6050.c     ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2326:mpu6050.c     ****  */
2327:mpu6050.c     **** void MPU6050_setFreefallDetectionCounterDecrement(uint8_t decrement) {
 8376              		.loc 1 2327 0
 8377              		.cfi_startproc
 8378              		@ args = 0, pretend = 0, frame = 8
 8379              		@ frame_needed = 1, uses_anonymous_args = 0
 8380 0000 80B5     		push	{r7, lr}
 8381              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 189


 8382              		.cfi_offset 7, -8
 8383              		.cfi_offset 14, -4
 8384 0002 84B0     		sub	sp, sp, #16
 8385              		.cfi_def_cfa_offset 24
 8386 0004 02AF     		add	r7, sp, #8
 8387              		.cfi_def_cfa 7, 16
 8388 0006 0200     		movs	r2, r0
 8389 0008 FB1D     		adds	r3, r7, #7
 8390 000a 1A70     		strb	r2, [r3]
2328:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_F
 8391              		.loc 1 2328 0
 8392 000c 064B     		ldr	r3, .L632
 8393 000e 1878     		ldrb	r0, [r3]
 8394 0010 FB1D     		adds	r3, r7, #7
 8395 0012 1B78     		ldrb	r3, [r3]
 8396 0014 0093     		str	r3, [sp]
 8397 0016 0223     		movs	r3, #2
 8398 0018 0322     		movs	r2, #3
 8399 001a 6921     		movs	r1, #105
 8400 001c FFF7FEFF 		bl	I2CWriteBits
2329:mpu6050.c     **** }
 8401              		.loc 1 2329 0
 8402 0020 C046     		nop
 8403 0022 BD46     		mov	sp, r7
 8404 0024 02B0     		add	sp, sp, #8
 8405              		@ sp needed
 8406 0026 80BD     		pop	{r7, pc}
 8407              	.L633:
 8408              		.align	2
 8409              	.L632:
 8410 0028 00000000 		.word	devAddr
 8411              		.cfi_endproc
 8412              	.LFE169:
 8413              		.size	MPU6050_setFreefallDetectionCounterDecrement, .-MPU6050_setFreefallDetectionCounterDecrement
 8414              		.section	.text.MPU6050_getMotionDetectionCounterDecrement,"ax",%progbits
 8415              		.align	2
 8416              		.global	MPU6050_getMotionDetectionCounterDecrement
 8417              		.code	16
 8418              		.thumb_func
 8419              		.type	MPU6050_getMotionDetectionCounterDecrement, %function
 8420              	MPU6050_getMotionDetectionCounterDecrement:
 8421              	.LFB170:
2330:mpu6050.c     **** /** Get Motion detection counter decrement configuration.
2331:mpu6050.c     ****  * Detection is registered by the Motion detection module after accelerometer
2332:mpu6050.c     ****  * measurements meet their respective threshold conditions over a specified
2333:mpu6050.c     ****  * number of samples. When the threshold conditions are met, the corresponding
2334:mpu6050.c     ****  * detection counter increments by 1. The user may control the rate at which the
2335:mpu6050.c     ****  * detection counter decrements when the threshold condition is not met by
2336:mpu6050.c     ****  * configuring MOT_COUNT. The decrement rate can be set according to the
2337:mpu6050.c     ****  * following table:
2338:mpu6050.c     ****  *
2339:mpu6050.c     ****  * <pre>
2340:mpu6050.c     ****  * MOT_COUNT | Counter Decrement
2341:mpu6050.c     ****  * ----------+------------------
2342:mpu6050.c     ****  * 0         | Reset
2343:mpu6050.c     ****  * 1         | 1
2344:mpu6050.c     ****  * 2         | 2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 190


2345:mpu6050.c     ****  * 3         | 4
2346:mpu6050.c     ****  * </pre>
2347:mpu6050.c     ****  *
2348:mpu6050.c     ****  * When MOT_COUNT is configured to 0 (reset), any non-qualifying sample will
2349:mpu6050.c     ****  * reset the counter to 0. For further information on Motion detection,
2350:mpu6050.c     ****  * please refer to Registers 29 to 32.
2351:mpu6050.c     ****  *
2352:mpu6050.c     ****  */
2353:mpu6050.c     **** uint8_t MPU6050_getMotionDetectionCounterDecrement() {
 8422              		.loc 1 2353 0
 8423              		.cfi_startproc
 8424              		@ args = 0, pretend = 0, frame = 0
 8425              		@ frame_needed = 1, uses_anonymous_args = 0
 8426 0000 80B5     		push	{r7, lr}
 8427              		.cfi_def_cfa_offset 8
 8428              		.cfi_offset 7, -8
 8429              		.cfi_offset 14, -4
 8430 0002 82B0     		sub	sp, sp, #8
 8431              		.cfi_def_cfa_offset 16
 8432 0004 02AF     		add	r7, sp, #8
 8433              		.cfi_def_cfa 7, 8
2354:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_M
 8434              		.loc 1 2354 0
 8435 0006 074B     		ldr	r3, .L636
 8436 0008 1878     		ldrb	r0, [r3]
 8437 000a 074B     		ldr	r3, .L636+4
 8438 000c 0093     		str	r3, [sp]
 8439 000e 0223     		movs	r3, #2
 8440 0010 0122     		movs	r2, #1
 8441 0012 6921     		movs	r1, #105
 8442 0014 FFF7FEFF 		bl	I2CReadBits
2355:mpu6050.c     ****     return buffer[0];
 8443              		.loc 1 2355 0
 8444 0018 034B     		ldr	r3, .L636+4
 8445 001a 1B78     		ldrb	r3, [r3]
2356:mpu6050.c     **** }
 8446              		.loc 1 2356 0
 8447 001c 1800     		movs	r0, r3
 8448 001e BD46     		mov	sp, r7
 8449              		@ sp needed
 8450 0020 80BD     		pop	{r7, pc}
 8451              	.L637:
 8452 0022 C046     		.align	2
 8453              	.L636:
 8454 0024 00000000 		.word	devAddr
 8455 0028 00000000 		.word	buffer
 8456              		.cfi_endproc
 8457              	.LFE170:
 8458              		.size	MPU6050_getMotionDetectionCounterDecrement, .-MPU6050_getMotionDetectionCounterDecrement
 8459              		.section	.text.MPU6050_setMotionDetectionCounterDecrement,"ax",%progbits
 8460              		.align	2
 8461              		.global	MPU6050_setMotionDetectionCounterDecrement
 8462              		.code	16
 8463              		.thumb_func
 8464              		.type	MPU6050_setMotionDetectionCounterDecrement, %function
 8465              	MPU6050_setMotionDetectionCounterDecrement:
 8466              	.LFB171:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 191


2357:mpu6050.c     **** /** Set Motion detection counter decrement configuration.
2358:mpu6050.c     ****  * @param decrement New decrement configuration value
2359:mpu6050.c     ****  * @see getMotionDetectionCounterDecrement()
2360:mpu6050.c     ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2361:mpu6050.c     ****  * @see MPU6050_DETECT_MOT_COUNT_BIT
2362:mpu6050.c     ****  */
2363:mpu6050.c     **** void MPU6050_setMotionDetectionCounterDecrement(uint8_t decrement) {
 8467              		.loc 1 2363 0
 8468              		.cfi_startproc
 8469              		@ args = 0, pretend = 0, frame = 8
 8470              		@ frame_needed = 1, uses_anonymous_args = 0
 8471 0000 80B5     		push	{r7, lr}
 8472              		.cfi_def_cfa_offset 8
 8473              		.cfi_offset 7, -8
 8474              		.cfi_offset 14, -4
 8475 0002 84B0     		sub	sp, sp, #16
 8476              		.cfi_def_cfa_offset 24
 8477 0004 02AF     		add	r7, sp, #8
 8478              		.cfi_def_cfa 7, 16
 8479 0006 0200     		movs	r2, r0
 8480 0008 FB1D     		adds	r3, r7, #7
 8481 000a 1A70     		strb	r2, [r3]
2364:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_
 8482              		.loc 1 2364 0
 8483 000c 064B     		ldr	r3, .L639
 8484 000e 1878     		ldrb	r0, [r3]
 8485 0010 FB1D     		adds	r3, r7, #7
 8486 0012 1B78     		ldrb	r3, [r3]
 8487 0014 0093     		str	r3, [sp]
 8488 0016 0223     		movs	r3, #2
 8489 0018 0122     		movs	r2, #1
 8490 001a 6921     		movs	r1, #105
 8491 001c FFF7FEFF 		bl	I2CWriteBits
2365:mpu6050.c     **** }
 8492              		.loc 1 2365 0
 8493 0020 C046     		nop
 8494 0022 BD46     		mov	sp, r7
 8495 0024 02B0     		add	sp, sp, #8
 8496              		@ sp needed
 8497 0026 80BD     		pop	{r7, pc}
 8498              	.L640:
 8499              		.align	2
 8500              	.L639:
 8501 0028 00000000 		.word	devAddr
 8502              		.cfi_endproc
 8503              	.LFE171:
 8504              		.size	MPU6050_setMotionDetectionCounterDecrement, .-MPU6050_setMotionDetectionCounterDecrement
 8505              		.section	.text.MPU6050_getFIFOEnabled,"ax",%progbits
 8506              		.align	2
 8507              		.global	MPU6050_getFIFOEnabled
 8508              		.code	16
 8509              		.thumb_func
 8510              		.type	MPU6050_getFIFOEnabled, %function
 8511              	MPU6050_getFIFOEnabled:
 8512              	.LFB172:
2366:mpu6050.c     **** 
2367:mpu6050.c     **** // USER_CTRL register
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 192


2368:mpu6050.c     **** 
2369:mpu6050.c     **** /** Get FIFO enabled status.
2370:mpu6050.c     ****  * When this bit is set to 0, the FIFO buffer is disabled. The FIFO buffer
2371:mpu6050.c     ****  * cannot be written to or read from while disabled. The FIFO buffer's state
2372:mpu6050.c     ****  * does not change unless the MPU-60X0 is power cycled.
2373:mpu6050.c     ****  * @return Current FIFO enabled status
2374:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2375:mpu6050.c     ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
2376:mpu6050.c     ****  */
2377:mpu6050.c     **** bool MPU6050_getFIFOEnabled() {
 8513              		.loc 1 2377 0
 8514              		.cfi_startproc
 8515              		@ args = 0, pretend = 0, frame = 0
 8516              		@ frame_needed = 1, uses_anonymous_args = 0
 8517 0000 80B5     		push	{r7, lr}
 8518              		.cfi_def_cfa_offset 8
 8519              		.cfi_offset 7, -8
 8520              		.cfi_offset 14, -4
 8521 0002 00AF     		add	r7, sp, #0
 8522              		.cfi_def_cfa_register 7
2378:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, buffer);
 8523              		.loc 1 2378 0
 8524 0004 074B     		ldr	r3, .L643
 8525 0006 1878     		ldrb	r0, [r3]
 8526 0008 074B     		ldr	r3, .L643+4
 8527 000a 0622     		movs	r2, #6
 8528 000c 6A21     		movs	r1, #106
 8529 000e FFF7FEFF 		bl	I2CReadBit
2379:mpu6050.c     ****     return buffer[0];
 8530              		.loc 1 2379 0
 8531 0012 054B     		ldr	r3, .L643+4
 8532 0014 1B78     		ldrb	r3, [r3]
 8533 0016 5A1E     		subs	r2, r3, #1
 8534 0018 9341     		sbcs	r3, r3, r2
 8535 001a DBB2     		uxtb	r3, r3
2380:mpu6050.c     **** }
 8536              		.loc 1 2380 0
 8537 001c 1800     		movs	r0, r3
 8538 001e BD46     		mov	sp, r7
 8539              		@ sp needed
 8540 0020 80BD     		pop	{r7, pc}
 8541              	.L644:
 8542 0022 C046     		.align	2
 8543              	.L643:
 8544 0024 00000000 		.word	devAddr
 8545 0028 00000000 		.word	buffer
 8546              		.cfi_endproc
 8547              	.LFE172:
 8548              		.size	MPU6050_getFIFOEnabled, .-MPU6050_getFIFOEnabled
 8549              		.section	.text.MPU6050_setFIFOEnabled,"ax",%progbits
 8550              		.align	2
 8551              		.global	MPU6050_setFIFOEnabled
 8552              		.code	16
 8553              		.thumb_func
 8554              		.type	MPU6050_setFIFOEnabled, %function
 8555              	MPU6050_setFIFOEnabled:
 8556              	.LFB173:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 193


2381:mpu6050.c     **** /** Set FIFO enabled status.
2382:mpu6050.c     ****  * @param enabled New FIFO enabled status
2383:mpu6050.c     ****  * @see getFIFOEnabled()
2384:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2385:mpu6050.c     ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
2386:mpu6050.c     ****  */
2387:mpu6050.c     **** void MPU6050_setFIFOEnabled(bool enabled) {
 8557              		.loc 1 2387 0
 8558              		.cfi_startproc
 8559              		@ args = 0, pretend = 0, frame = 8
 8560              		@ frame_needed = 1, uses_anonymous_args = 0
 8561 0000 80B5     		push	{r7, lr}
 8562              		.cfi_def_cfa_offset 8
 8563              		.cfi_offset 7, -8
 8564              		.cfi_offset 14, -4
 8565 0002 82B0     		sub	sp, sp, #8
 8566              		.cfi_def_cfa_offset 16
 8567 0004 00AF     		add	r7, sp, #0
 8568              		.cfi_def_cfa_register 7
 8569 0006 0200     		movs	r2, r0
 8570 0008 FB1D     		adds	r3, r7, #7
 8571 000a 1A70     		strb	r2, [r3]
2388:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8572              		.loc 1 2388 0
 8573 000c 054B     		ldr	r3, .L646
 8574 000e 1878     		ldrb	r0, [r3]
 8575 0010 FB1D     		adds	r3, r7, #7
 8576 0012 1B78     		ldrb	r3, [r3]
 8577 0014 0622     		movs	r2, #6
 8578 0016 6A21     		movs	r1, #106
 8579 0018 FFF7FEFF 		bl	I2CWriteBit
2389:mpu6050.c     **** }
 8580              		.loc 1 2389 0
 8581 001c C046     		nop
 8582 001e BD46     		mov	sp, r7
 8583 0020 02B0     		add	sp, sp, #8
 8584              		@ sp needed
 8585 0022 80BD     		pop	{r7, pc}
 8586              	.L647:
 8587              		.align	2
 8588              	.L646:
 8589 0024 00000000 		.word	devAddr
 8590              		.cfi_endproc
 8591              	.LFE173:
 8592              		.size	MPU6050_setFIFOEnabled, .-MPU6050_setFIFOEnabled
 8593              		.section	.text.MPU6050_getI2CMasterModeEnabled,"ax",%progbits
 8594              		.align	2
 8595              		.global	MPU6050_getI2CMasterModeEnabled
 8596              		.code	16
 8597              		.thumb_func
 8598              		.type	MPU6050_getI2CMasterModeEnabled, %function
 8599              	MPU6050_getI2CMasterModeEnabled:
 8600              	.LFB174:
2390:mpu6050.c     **** /** Get I2C Master Mode enabled status.
2391:mpu6050.c     ****  * When this mode is enabled, the MPU-60X0 acts as the I2C Master to the
2392:mpu6050.c     ****  * external sensor slave devices on the auxiliary I2C bus. When this bit is
2393:mpu6050.c     ****  * cleared to 0, the auxiliary I2C bus lines (AUX_DA and AUX_CL) are logically
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 194


2394:mpu6050.c     ****  * driven by the primary I2C bus (SDA and SCL). This is a precondition to
2395:mpu6050.c     ****  * enabling Bypass Mode. For further information regarding Bypass Mode, please
2396:mpu6050.c     ****  * refer to Register 55.
2397:mpu6050.c     ****  * @return Current I2C Master Mode enabled status
2398:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2399:mpu6050.c     ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2400:mpu6050.c     ****  */
2401:mpu6050.c     **** bool MPU6050_getI2CMasterModeEnabled() {
 8601              		.loc 1 2401 0
 8602              		.cfi_startproc
 8603              		@ args = 0, pretend = 0, frame = 0
 8604              		@ frame_needed = 1, uses_anonymous_args = 0
 8605 0000 80B5     		push	{r7, lr}
 8606              		.cfi_def_cfa_offset 8
 8607              		.cfi_offset 7, -8
 8608              		.cfi_offset 14, -4
 8609 0002 00AF     		add	r7, sp, #0
 8610              		.cfi_def_cfa_register 7
2402:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, buffer);
 8611              		.loc 1 2402 0
 8612 0004 074B     		ldr	r3, .L650
 8613 0006 1878     		ldrb	r0, [r3]
 8614 0008 074B     		ldr	r3, .L650+4
 8615 000a 0522     		movs	r2, #5
 8616 000c 6A21     		movs	r1, #106
 8617 000e FFF7FEFF 		bl	I2CReadBit
2403:mpu6050.c     ****     return buffer[0];
 8618              		.loc 1 2403 0
 8619 0012 054B     		ldr	r3, .L650+4
 8620 0014 1B78     		ldrb	r3, [r3]
 8621 0016 5A1E     		subs	r2, r3, #1
 8622 0018 9341     		sbcs	r3, r3, r2
 8623 001a DBB2     		uxtb	r3, r3
2404:mpu6050.c     **** }
 8624              		.loc 1 2404 0
 8625 001c 1800     		movs	r0, r3
 8626 001e BD46     		mov	sp, r7
 8627              		@ sp needed
 8628 0020 80BD     		pop	{r7, pc}
 8629              	.L651:
 8630 0022 C046     		.align	2
 8631              	.L650:
 8632 0024 00000000 		.word	devAddr
 8633 0028 00000000 		.word	buffer
 8634              		.cfi_endproc
 8635              	.LFE174:
 8636              		.size	MPU6050_getI2CMasterModeEnabled, .-MPU6050_getI2CMasterModeEnabled
 8637              		.section	.text.MPU6050_setI2CMasterModeEnabled,"ax",%progbits
 8638              		.align	2
 8639              		.global	MPU6050_setI2CMasterModeEnabled
 8640              		.code	16
 8641              		.thumb_func
 8642              		.type	MPU6050_setI2CMasterModeEnabled, %function
 8643              	MPU6050_setI2CMasterModeEnabled:
 8644              	.LFB175:
2405:mpu6050.c     **** /** Set I2C Master Mode enabled status.
2406:mpu6050.c     ****  * @param enabled New I2C Master Mode enabled status
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 195


2407:mpu6050.c     ****  * @see getI2CMasterModeEnabled()
2408:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2409:mpu6050.c     ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2410:mpu6050.c     ****  */
2411:mpu6050.c     **** void MPU6050_setI2CMasterModeEnabled(bool enabled) {
 8645              		.loc 1 2411 0
 8646              		.cfi_startproc
 8647              		@ args = 0, pretend = 0, frame = 8
 8648              		@ frame_needed = 1, uses_anonymous_args = 0
 8649 0000 80B5     		push	{r7, lr}
 8650              		.cfi_def_cfa_offset 8
 8651              		.cfi_offset 7, -8
 8652              		.cfi_offset 14, -4
 8653 0002 82B0     		sub	sp, sp, #8
 8654              		.cfi_def_cfa_offset 16
 8655 0004 00AF     		add	r7, sp, #0
 8656              		.cfi_def_cfa_register 7
 8657 0006 0200     		movs	r2, r0
 8658 0008 FB1D     		adds	r3, r7, #7
 8659 000a 1A70     		strb	r2, [r3]
2412:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8660              		.loc 1 2412 0
 8661 000c 054B     		ldr	r3, .L653
 8662 000e 1878     		ldrb	r0, [r3]
 8663 0010 FB1D     		adds	r3, r7, #7
 8664 0012 1B78     		ldrb	r3, [r3]
 8665 0014 0522     		movs	r2, #5
 8666 0016 6A21     		movs	r1, #106
 8667 0018 FFF7FEFF 		bl	I2CWriteBit
2413:mpu6050.c     **** }
 8668              		.loc 1 2413 0
 8669 001c C046     		nop
 8670 001e BD46     		mov	sp, r7
 8671 0020 02B0     		add	sp, sp, #8
 8672              		@ sp needed
 8673 0022 80BD     		pop	{r7, pc}
 8674              	.L654:
 8675              		.align	2
 8676              	.L653:
 8677 0024 00000000 		.word	devAddr
 8678              		.cfi_endproc
 8679              	.LFE175:
 8680              		.size	MPU6050_setI2CMasterModeEnabled, .-MPU6050_setI2CMasterModeEnabled
 8681              		.section	.text.MPU6050_switchSPIEnabled,"ax",%progbits
 8682              		.align	2
 8683              		.global	MPU6050_switchSPIEnabled
 8684              		.code	16
 8685              		.thumb_func
 8686              		.type	MPU6050_switchSPIEnabled, %function
 8687              	MPU6050_switchSPIEnabled:
 8688              	.LFB176:
2414:mpu6050.c     **** /** Switch from I2C to SPI mode (MPU-6000 only)
2415:mpu6050.c     ****  * If this is set, the primary SPI interface will be enabled in place of the
2416:mpu6050.c     ****  * disabled primary I2C interface.
2417:mpu6050.c     ****  */
2418:mpu6050.c     **** void MPU6050_switchSPIEnabled(bool enabled) {
 8689              		.loc 1 2418 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 196


 8690              		.cfi_startproc
 8691              		@ args = 0, pretend = 0, frame = 8
 8692              		@ frame_needed = 1, uses_anonymous_args = 0
 8693 0000 80B5     		push	{r7, lr}
 8694              		.cfi_def_cfa_offset 8
 8695              		.cfi_offset 7, -8
 8696              		.cfi_offset 14, -4
 8697 0002 82B0     		sub	sp, sp, #8
 8698              		.cfi_def_cfa_offset 16
 8699 0004 00AF     		add	r7, sp, #0
 8700              		.cfi_def_cfa_register 7
 8701 0006 0200     		movs	r2, r0
 8702 0008 FB1D     		adds	r3, r7, #7
 8703 000a 1A70     		strb	r2, [r3]
2419:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_IF_DIS_BIT, enabled);
 8704              		.loc 1 2419 0
 8705 000c 054B     		ldr	r3, .L656
 8706 000e 1878     		ldrb	r0, [r3]
 8707 0010 FB1D     		adds	r3, r7, #7
 8708 0012 1B78     		ldrb	r3, [r3]
 8709 0014 0422     		movs	r2, #4
 8710 0016 6A21     		movs	r1, #106
 8711 0018 FFF7FEFF 		bl	I2CWriteBit
2420:mpu6050.c     **** }
 8712              		.loc 1 2420 0
 8713 001c C046     		nop
 8714 001e BD46     		mov	sp, r7
 8715 0020 02B0     		add	sp, sp, #8
 8716              		@ sp needed
 8717 0022 80BD     		pop	{r7, pc}
 8718              	.L657:
 8719              		.align	2
 8720              	.L656:
 8721 0024 00000000 		.word	devAddr
 8722              		.cfi_endproc
 8723              	.LFE176:
 8724              		.size	MPU6050_switchSPIEnabled, .-MPU6050_switchSPIEnabled
 8725              		.section	.text.MPU6050_resetFIFO,"ax",%progbits
 8726              		.align	2
 8727              		.global	MPU6050_resetFIFO
 8728              		.code	16
 8729              		.thumb_func
 8730              		.type	MPU6050_resetFIFO, %function
 8731              	MPU6050_resetFIFO:
 8732              	.LFB177:
2421:mpu6050.c     **** /** Reset the FIFO.
2422:mpu6050.c     ****  * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
2423:mpu6050.c     ****  * bit automatically clears to 0 after the reset has been triggered.
2424:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2425:mpu6050.c     ****  * @see MPU6050_USERCTRL_FIFO_RESET_BIT
2426:mpu6050.c     ****  */
2427:mpu6050.c     **** void MPU6050_resetFIFO() {
 8733              		.loc 1 2427 0
 8734              		.cfi_startproc
 8735              		@ args = 0, pretend = 0, frame = 0
 8736              		@ frame_needed = 1, uses_anonymous_args = 0
 8737 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 197


 8738              		.cfi_def_cfa_offset 8
 8739              		.cfi_offset 7, -8
 8740              		.cfi_offset 14, -4
 8741 0002 00AF     		add	r7, sp, #0
 8742              		.cfi_def_cfa_register 7
2428:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8743              		.loc 1 2428 0
 8744 0004 044B     		ldr	r3, .L659
 8745 0006 1878     		ldrb	r0, [r3]
 8746 0008 0123     		movs	r3, #1
 8747 000a 0222     		movs	r2, #2
 8748 000c 6A21     		movs	r1, #106
 8749 000e FFF7FEFF 		bl	I2CWriteBit
2429:mpu6050.c     **** }
 8750              		.loc 1 2429 0
 8751 0012 C046     		nop
 8752 0014 BD46     		mov	sp, r7
 8753              		@ sp needed
 8754 0016 80BD     		pop	{r7, pc}
 8755              	.L660:
 8756              		.align	2
 8757              	.L659:
 8758 0018 00000000 		.word	devAddr
 8759              		.cfi_endproc
 8760              	.LFE177:
 8761              		.size	MPU6050_resetFIFO, .-MPU6050_resetFIFO
 8762              		.section	.text.MPU6050_resetI2CMaster,"ax",%progbits
 8763              		.align	2
 8764              		.global	MPU6050_resetI2CMaster
 8765              		.code	16
 8766              		.thumb_func
 8767              		.type	MPU6050_resetI2CMaster, %function
 8768              	MPU6050_resetI2CMaster:
 8769              	.LFB178:
2430:mpu6050.c     **** /** Reset the I2C Master.
2431:mpu6050.c     ****  * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
2432:mpu6050.c     ****  * This bit automatically clears to 0 after the reset has been triggered.
2433:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2434:mpu6050.c     ****  * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
2435:mpu6050.c     ****  */
2436:mpu6050.c     **** void MPU6050_resetI2CMaster() {
 8770              		.loc 1 2436 0
 8771              		.cfi_startproc
 8772              		@ args = 0, pretend = 0, frame = 0
 8773              		@ frame_needed = 1, uses_anonymous_args = 0
 8774 0000 80B5     		push	{r7, lr}
 8775              		.cfi_def_cfa_offset 8
 8776              		.cfi_offset 7, -8
 8777              		.cfi_offset 14, -4
 8778 0002 00AF     		add	r7, sp, #0
 8779              		.cfi_def_cfa_register 7
2437:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8780              		.loc 1 2437 0
 8781 0004 044B     		ldr	r3, .L662
 8782 0006 1878     		ldrb	r0, [r3]
 8783 0008 0123     		movs	r3, #1
 8784 000a 0122     		movs	r2, #1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 198


 8785 000c 6A21     		movs	r1, #106
 8786 000e FFF7FEFF 		bl	I2CWriteBit
2438:mpu6050.c     **** }
 8787              		.loc 1 2438 0
 8788 0012 C046     		nop
 8789 0014 BD46     		mov	sp, r7
 8790              		@ sp needed
 8791 0016 80BD     		pop	{r7, pc}
 8792              	.L663:
 8793              		.align	2
 8794              	.L662:
 8795 0018 00000000 		.word	devAddr
 8796              		.cfi_endproc
 8797              	.LFE178:
 8798              		.size	MPU6050_resetI2CMaster, .-MPU6050_resetI2CMaster
 8799              		.section	.text.MPU6050_resetSensors,"ax",%progbits
 8800              		.align	2
 8801              		.global	MPU6050_resetSensors
 8802              		.code	16
 8803              		.thumb_func
 8804              		.type	MPU6050_resetSensors, %function
 8805              	MPU6050_resetSensors:
 8806              	.LFB179:
2439:mpu6050.c     **** /** Reset all sensor registers and signal paths.
2440:mpu6050.c     ****  * When set to 1, this bit resets the signal paths for all sensors (gyroscopes,
2441:mpu6050.c     ****  * accelerometers, and temperature sensor). This operation will also clear the
2442:mpu6050.c     ****  * sensor registers. This bit automatically clears to 0 after the reset has been
2443:mpu6050.c     ****  * triggered.
2444:mpu6050.c     ****  *
2445:mpu6050.c     ****  * When resetting only the signal path (and not the sensor registers), please
2446:mpu6050.c     ****  * use Register 104, SIGNAL_PATH_RESET.
2447:mpu6050.c     ****  *
2448:mpu6050.c     ****  * @see MPU6050_RA_USER_CTRL
2449:mpu6050.c     ****  * @see MPU6050_USERCTRL_SIG_COND_RESET_BIT
2450:mpu6050.c     ****  */
2451:mpu6050.c     **** void MPU6050_resetSensors() {
 8807              		.loc 1 2451 0
 8808              		.cfi_startproc
 8809              		@ args = 0, pretend = 0, frame = 0
 8810              		@ frame_needed = 1, uses_anonymous_args = 0
 8811 0000 80B5     		push	{r7, lr}
 8812              		.cfi_def_cfa_offset 8
 8813              		.cfi_offset 7, -8
 8814              		.cfi_offset 14, -4
 8815 0002 00AF     		add	r7, sp, #0
 8816              		.cfi_def_cfa_register 7
2452:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_SIG_COND_RESET_BIT, true);
 8817              		.loc 1 2452 0
 8818 0004 044B     		ldr	r3, .L665
 8819 0006 1878     		ldrb	r0, [r3]
 8820 0008 0123     		movs	r3, #1
 8821 000a 0022     		movs	r2, #0
 8822 000c 6A21     		movs	r1, #106
 8823 000e FFF7FEFF 		bl	I2CWriteBit
2453:mpu6050.c     **** }
 8824              		.loc 1 2453 0
 8825 0012 C046     		nop
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 199


 8826 0014 BD46     		mov	sp, r7
 8827              		@ sp needed
 8828 0016 80BD     		pop	{r7, pc}
 8829              	.L666:
 8830              		.align	2
 8831              	.L665:
 8832 0018 00000000 		.word	devAddr
 8833              		.cfi_endproc
 8834              	.LFE179:
 8835              		.size	MPU6050_resetSensors, .-MPU6050_resetSensors
 8836              		.section	.text.MPU6050_reset,"ax",%progbits
 8837              		.align	2
 8838              		.global	MPU6050_reset
 8839              		.code	16
 8840              		.thumb_func
 8841              		.type	MPU6050_reset, %function
 8842              	MPU6050_reset:
 8843              	.LFB180:
2454:mpu6050.c     **** 
2455:mpu6050.c     **** // PWR_MGMT_1 register
2456:mpu6050.c     **** 
2457:mpu6050.c     **** /** Trigger a full device reset.
2458:mpu6050.c     ****  * A small delay of ~50ms may be desirable after triggering a reset.
2459:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2460:mpu6050.c     ****  * @see MPU6050_PWR1_DEVICE_RESET_BIT
2461:mpu6050.c     ****  */
2462:mpu6050.c     **** void MPU6050_reset() {
 8844              		.loc 1 2462 0
 8845              		.cfi_startproc
 8846              		@ args = 0, pretend = 0, frame = 0
 8847              		@ frame_needed = 1, uses_anonymous_args = 0
 8848 0000 80B5     		push	{r7, lr}
 8849              		.cfi_def_cfa_offset 8
 8850              		.cfi_offset 7, -8
 8851              		.cfi_offset 14, -4
 8852 0002 00AF     		add	r7, sp, #0
 8853              		.cfi_def_cfa_register 7
2463:mpu6050.c     **** 	//todo consider writing byte 0x80 without reading the register before since it is reset anyways
2464:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8854              		.loc 1 2464 0
 8855 0004 044B     		ldr	r3, .L668
 8856 0006 1878     		ldrb	r0, [r3]
 8857 0008 0123     		movs	r3, #1
 8858 000a 0722     		movs	r2, #7
 8859 000c 6B21     		movs	r1, #107
 8860 000e FFF7FEFF 		bl	I2CWriteBit
2465:mpu6050.c     **** }
 8861              		.loc 1 2465 0
 8862 0012 C046     		nop
 8863 0014 BD46     		mov	sp, r7
 8864              		@ sp needed
 8865 0016 80BD     		pop	{r7, pc}
 8866              	.L669:
 8867              		.align	2
 8868              	.L668:
 8869 0018 00000000 		.word	devAddr
 8870              		.cfi_endproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 200


 8871              	.LFE180:
 8872              		.size	MPU6050_reset, .-MPU6050_reset
 8873              		.section	.text.MPU6050_getSleepEnabled,"ax",%progbits
 8874              		.align	2
 8875              		.global	MPU6050_getSleepEnabled
 8876              		.code	16
 8877              		.thumb_func
 8878              		.type	MPU6050_getSleepEnabled, %function
 8879              	MPU6050_getSleepEnabled:
 8880              	.LFB181:
2466:mpu6050.c     **** /** Get sleep mode status.
2467:mpu6050.c     ****  * Setting the SLEEP bit in the register puts the device into very low power
2468:mpu6050.c     ****  * sleep mode. In this mode, only the serial interface and internal registers
2469:mpu6050.c     ****  * remain active, allowing for a very low standby current. Clearing this bit
2470:mpu6050.c     ****  * puts the device back into normal mode. To save power, the individual standby
2471:mpu6050.c     ****  * selections for each of the gyros should be used if any gyro axis is not used
2472:mpu6050.c     ****  * by the application.
2473:mpu6050.c     ****  * @return Current sleep mode enabled status
2474:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2475:mpu6050.c     ****  * @see MPU6050_PWR1_SLEEP_BIT
2476:mpu6050.c     ****  */
2477:mpu6050.c     **** bool MPU6050_getSleepEnabled() {
 8881              		.loc 1 2477 0
 8882              		.cfi_startproc
 8883              		@ args = 0, pretend = 0, frame = 0
 8884              		@ frame_needed = 1, uses_anonymous_args = 0
 8885 0000 80B5     		push	{r7, lr}
 8886              		.cfi_def_cfa_offset 8
 8887              		.cfi_offset 7, -8
 8888              		.cfi_offset 14, -4
 8889 0002 00AF     		add	r7, sp, #0
 8890              		.cfi_def_cfa_register 7
2478:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);
 8891              		.loc 1 2478 0
 8892 0004 074B     		ldr	r3, .L672
 8893 0006 1878     		ldrb	r0, [r3]
 8894 0008 074B     		ldr	r3, .L672+4
 8895 000a 0622     		movs	r2, #6
 8896 000c 6B21     		movs	r1, #107
 8897 000e FFF7FEFF 		bl	I2CReadBit
2479:mpu6050.c     ****     return buffer[0];
 8898              		.loc 1 2479 0
 8899 0012 054B     		ldr	r3, .L672+4
 8900 0014 1B78     		ldrb	r3, [r3]
 8901 0016 5A1E     		subs	r2, r3, #1
 8902 0018 9341     		sbcs	r3, r3, r2
 8903 001a DBB2     		uxtb	r3, r3
2480:mpu6050.c     **** }
 8904              		.loc 1 2480 0
 8905 001c 1800     		movs	r0, r3
 8906 001e BD46     		mov	sp, r7
 8907              		@ sp needed
 8908 0020 80BD     		pop	{r7, pc}
 8909              	.L673:
 8910 0022 C046     		.align	2
 8911              	.L672:
 8912 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 201


 8913 0028 00000000 		.word	buffer
 8914              		.cfi_endproc
 8915              	.LFE181:
 8916              		.size	MPU6050_getSleepEnabled, .-MPU6050_getSleepEnabled
 8917              		.section	.text.MPU6050_setSleepEnabled,"ax",%progbits
 8918              		.align	2
 8919              		.global	MPU6050_setSleepEnabled
 8920              		.code	16
 8921              		.thumb_func
 8922              		.type	MPU6050_setSleepEnabled, %function
 8923              	MPU6050_setSleepEnabled:
 8924              	.LFB182:
2481:mpu6050.c     **** /** Set sleep mode status.
2482:mpu6050.c     ****  * @param enabled New sleep mode enabled status
2483:mpu6050.c     ****  * @see getSleepEnabled()
2484:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2485:mpu6050.c     ****  * @see MPU6050_PWR1_SLEEP_BIT
2486:mpu6050.c     ****  */
2487:mpu6050.c     **** void MPU6050_setSleepEnabled(bool enabled) {
 8925              		.loc 1 2487 0
 8926              		.cfi_startproc
 8927              		@ args = 0, pretend = 0, frame = 8
 8928              		@ frame_needed = 1, uses_anonymous_args = 0
 8929 0000 80B5     		push	{r7, lr}
 8930              		.cfi_def_cfa_offset 8
 8931              		.cfi_offset 7, -8
 8932              		.cfi_offset 14, -4
 8933 0002 82B0     		sub	sp, sp, #8
 8934              		.cfi_def_cfa_offset 16
 8935 0004 00AF     		add	r7, sp, #0
 8936              		.cfi_def_cfa_register 7
 8937 0006 0200     		movs	r2, r0
 8938 0008 FB1D     		adds	r3, r7, #7
 8939 000a 1A70     		strb	r2, [r3]
2488:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8940              		.loc 1 2488 0
 8941 000c 054B     		ldr	r3, .L675
 8942 000e 1878     		ldrb	r0, [r3]
 8943 0010 FB1D     		adds	r3, r7, #7
 8944 0012 1B78     		ldrb	r3, [r3]
 8945 0014 0622     		movs	r2, #6
 8946 0016 6B21     		movs	r1, #107
 8947 0018 FFF7FEFF 		bl	I2CWriteBit
2489:mpu6050.c     **** }
 8948              		.loc 1 2489 0
 8949 001c C046     		nop
 8950 001e BD46     		mov	sp, r7
 8951 0020 02B0     		add	sp, sp, #8
 8952              		@ sp needed
 8953 0022 80BD     		pop	{r7, pc}
 8954              	.L676:
 8955              		.align	2
 8956              	.L675:
 8957 0024 00000000 		.word	devAddr
 8958              		.cfi_endproc
 8959              	.LFE182:
 8960              		.size	MPU6050_setSleepEnabled, .-MPU6050_setSleepEnabled
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 202


 8961              		.section	.text.MPU6050_getWakeCycleEnabled,"ax",%progbits
 8962              		.align	2
 8963              		.global	MPU6050_getWakeCycleEnabled
 8964              		.code	16
 8965              		.thumb_func
 8966              		.type	MPU6050_getWakeCycleEnabled, %function
 8967              	MPU6050_getWakeCycleEnabled:
 8968              	.LFB183:
2490:mpu6050.c     **** /** Get wake cycle enabled status.
2491:mpu6050.c     ****  * When this bit is set to 1 and SLEEP is disabled, the MPU-60X0 will cycle
2492:mpu6050.c     ****  * between sleep mode and waking up to take a single sample of data from active
2493:mpu6050.c     ****  * sensors at a rate determined by LP_WAKE_CTRL (register 108).
2494:mpu6050.c     ****  * @return Current sleep mode enabled status
2495:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2496:mpu6050.c     ****  * @see MPU6050_PWR1_CYCLE_BIT
2497:mpu6050.c     ****  */
2498:mpu6050.c     **** bool MPU6050_getWakeCycleEnabled() {
 8969              		.loc 1 2498 0
 8970              		.cfi_startproc
 8971              		@ args = 0, pretend = 0, frame = 0
 8972              		@ frame_needed = 1, uses_anonymous_args = 0
 8973 0000 80B5     		push	{r7, lr}
 8974              		.cfi_def_cfa_offset 8
 8975              		.cfi_offset 7, -8
 8976              		.cfi_offset 14, -4
 8977 0002 00AF     		add	r7, sp, #0
 8978              		.cfi_def_cfa_register 7
2499:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, buffer);
 8979              		.loc 1 2499 0
 8980 0004 074B     		ldr	r3, .L679
 8981 0006 1878     		ldrb	r0, [r3]
 8982 0008 074B     		ldr	r3, .L679+4
 8983 000a 0522     		movs	r2, #5
 8984 000c 6B21     		movs	r1, #107
 8985 000e FFF7FEFF 		bl	I2CReadBit
2500:mpu6050.c     ****     return buffer[0];
 8986              		.loc 1 2500 0
 8987 0012 054B     		ldr	r3, .L679+4
 8988 0014 1B78     		ldrb	r3, [r3]
 8989 0016 5A1E     		subs	r2, r3, #1
 8990 0018 9341     		sbcs	r3, r3, r2
 8991 001a DBB2     		uxtb	r3, r3
2501:mpu6050.c     **** }
 8992              		.loc 1 2501 0
 8993 001c 1800     		movs	r0, r3
 8994 001e BD46     		mov	sp, r7
 8995              		@ sp needed
 8996 0020 80BD     		pop	{r7, pc}
 8997              	.L680:
 8998 0022 C046     		.align	2
 8999              	.L679:
 9000 0024 00000000 		.word	devAddr
 9001 0028 00000000 		.word	buffer
 9002              		.cfi_endproc
 9003              	.LFE183:
 9004              		.size	MPU6050_getWakeCycleEnabled, .-MPU6050_getWakeCycleEnabled
 9005              		.section	.text.MPU6050_setWakeCycleEnabled,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 203


 9006              		.align	2
 9007              		.global	MPU6050_setWakeCycleEnabled
 9008              		.code	16
 9009              		.thumb_func
 9010              		.type	MPU6050_setWakeCycleEnabled, %function
 9011              	MPU6050_setWakeCycleEnabled:
 9012              	.LFB184:
2502:mpu6050.c     **** /** Set wake cycle enabled status.
2503:mpu6050.c     ****  * @param enabled New sleep mode enabled status
2504:mpu6050.c     ****  * @see getWakeCycleEnabled()
2505:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2506:mpu6050.c     ****  * @see MPU6050_PWR1_CYCLE_BIT
2507:mpu6050.c     ****  */
2508:mpu6050.c     **** void MPU6050_setWakeCycleEnabled(bool enabled) {
 9013              		.loc 1 2508 0
 9014              		.cfi_startproc
 9015              		@ args = 0, pretend = 0, frame = 8
 9016              		@ frame_needed = 1, uses_anonymous_args = 0
 9017 0000 80B5     		push	{r7, lr}
 9018              		.cfi_def_cfa_offset 8
 9019              		.cfi_offset 7, -8
 9020              		.cfi_offset 14, -4
 9021 0002 82B0     		sub	sp, sp, #8
 9022              		.cfi_def_cfa_offset 16
 9023 0004 00AF     		add	r7, sp, #0
 9024              		.cfi_def_cfa_register 7
 9025 0006 0200     		movs	r2, r0
 9026 0008 FB1D     		adds	r3, r7, #7
 9027 000a 1A70     		strb	r2, [r3]
2509:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, enabled);
 9028              		.loc 1 2509 0
 9029 000c 054B     		ldr	r3, .L682
 9030 000e 1878     		ldrb	r0, [r3]
 9031 0010 FB1D     		adds	r3, r7, #7
 9032 0012 1B78     		ldrb	r3, [r3]
 9033 0014 0522     		movs	r2, #5
 9034 0016 6B21     		movs	r1, #107
 9035 0018 FFF7FEFF 		bl	I2CWriteBit
2510:mpu6050.c     **** }
 9036              		.loc 1 2510 0
 9037 001c C046     		nop
 9038 001e BD46     		mov	sp, r7
 9039 0020 02B0     		add	sp, sp, #8
 9040              		@ sp needed
 9041 0022 80BD     		pop	{r7, pc}
 9042              	.L683:
 9043              		.align	2
 9044              	.L682:
 9045 0024 00000000 		.word	devAddr
 9046              		.cfi_endproc
 9047              	.LFE184:
 9048              		.size	MPU6050_setWakeCycleEnabled, .-MPU6050_setWakeCycleEnabled
 9049              		.section	.text.MPU6050_getTempSensorEnabled,"ax",%progbits
 9050              		.align	2
 9051              		.global	MPU6050_getTempSensorEnabled
 9052              		.code	16
 9053              		.thumb_func
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 204


 9054              		.type	MPU6050_getTempSensorEnabled, %function
 9055              	MPU6050_getTempSensorEnabled:
 9056              	.LFB185:
2511:mpu6050.c     **** /** Get temperature sensor enabled status.
2512:mpu6050.c     ****  * Control the usage of the internal temperature sensor.
2513:mpu6050.c     ****  *
2514:mpu6050.c     ****  * Note: this register stores the *disabled* value, but for consistency with the
2515:mpu6050.c     ****  * rest of the code, the function is named and used with standard true/false
2516:mpu6050.c     ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2517:mpu6050.c     ****  *
2518:mpu6050.c     ****  * @return Current temperature sensor enabled status
2519:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2520:mpu6050.c     ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2521:mpu6050.c     ****  */
2522:mpu6050.c     **** bool MPU6050_getTempSensorEnabled() {
 9057              		.loc 1 2522 0
 9058              		.cfi_startproc
 9059              		@ args = 0, pretend = 0, frame = 0
 9060              		@ frame_needed = 1, uses_anonymous_args = 0
 9061 0000 80B5     		push	{r7, lr}
 9062              		.cfi_def_cfa_offset 8
 9063              		.cfi_offset 7, -8
 9064              		.cfi_offset 14, -4
 9065 0002 00AF     		add	r7, sp, #0
 9066              		.cfi_def_cfa_register 7
2523:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, buffer);
 9067              		.loc 1 2523 0
 9068 0004 074B     		ldr	r3, .L686
 9069 0006 1878     		ldrb	r0, [r3]
 9070 0008 074B     		ldr	r3, .L686+4
 9071 000a 0322     		movs	r2, #3
 9072 000c 6B21     		movs	r1, #107
 9073 000e FFF7FEFF 		bl	I2CReadBit
2524:mpu6050.c     ****     return buffer[0] == 0; // 1 is actually disabled here
 9074              		.loc 1 2524 0
 9075 0012 054B     		ldr	r3, .L686+4
 9076 0014 1B78     		ldrb	r3, [r3]
 9077 0016 5A42     		rsbs	r2, r3, #0
 9078 0018 5341     		adcs	r3, r3, r2
 9079 001a DBB2     		uxtb	r3, r3
2525:mpu6050.c     **** }
 9080              		.loc 1 2525 0
 9081 001c 1800     		movs	r0, r3
 9082 001e BD46     		mov	sp, r7
 9083              		@ sp needed
 9084 0020 80BD     		pop	{r7, pc}
 9085              	.L687:
 9086 0022 C046     		.align	2
 9087              	.L686:
 9088 0024 00000000 		.word	devAddr
 9089 0028 00000000 		.word	buffer
 9090              		.cfi_endproc
 9091              	.LFE185:
 9092              		.size	MPU6050_getTempSensorEnabled, .-MPU6050_getTempSensorEnabled
 9093              		.section	.text.MPU6050_setTempSensorEnabled,"ax",%progbits
 9094              		.align	2
 9095              		.global	MPU6050_setTempSensorEnabled
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 205


 9096              		.code	16
 9097              		.thumb_func
 9098              		.type	MPU6050_setTempSensorEnabled, %function
 9099              	MPU6050_setTempSensorEnabled:
 9100              	.LFB186:
2526:mpu6050.c     **** /** Set temperature sensor enabled status.
2527:mpu6050.c     ****  * Note: this register stores the *disabled* value, but for consistency with the
2528:mpu6050.c     ****  * rest of the code, the function is named and used with standard true/false
2529:mpu6050.c     ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2530:mpu6050.c     ****  *
2531:mpu6050.c     ****  * @param enabled New temperature sensor enabled status
2532:mpu6050.c     ****  * @see getTempSensorEnabled()
2533:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2534:mpu6050.c     ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2535:mpu6050.c     ****  */
2536:mpu6050.c     **** void MPU6050_setTempSensorEnabled(bool enabled) {
 9101              		.loc 1 2536 0
 9102              		.cfi_startproc
 9103              		@ args = 0, pretend = 0, frame = 8
 9104              		@ frame_needed = 1, uses_anonymous_args = 0
 9105 0000 80B5     		push	{r7, lr}
 9106              		.cfi_def_cfa_offset 8
 9107              		.cfi_offset 7, -8
 9108              		.cfi_offset 14, -4
 9109 0002 82B0     		sub	sp, sp, #8
 9110              		.cfi_def_cfa_offset 16
 9111 0004 00AF     		add	r7, sp, #0
 9112              		.cfi_def_cfa_register 7
 9113 0006 0200     		movs	r2, r0
 9114 0008 FB1D     		adds	r3, r7, #7
 9115 000a 1A70     		strb	r2, [r3]
2537:mpu6050.c     ****     // 1 is actually disabled here
2538:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 9116              		.loc 1 2538 0
 9117 000c 074B     		ldr	r3, .L689
 9118 000e 1878     		ldrb	r0, [r3]
 9119 0010 FB1D     		adds	r3, r7, #7
 9120 0012 1B78     		ldrb	r3, [r3]
 9121 0014 0122     		movs	r2, #1
 9122 0016 5340     		eors	r3, r2
 9123 0018 DBB2     		uxtb	r3, r3
 9124 001a 0322     		movs	r2, #3
 9125 001c 6B21     		movs	r1, #107
 9126 001e FFF7FEFF 		bl	I2CWriteBit
2539:mpu6050.c     **** }
 9127              		.loc 1 2539 0
 9128 0022 C046     		nop
 9129 0024 BD46     		mov	sp, r7
 9130 0026 02B0     		add	sp, sp, #8
 9131              		@ sp needed
 9132 0028 80BD     		pop	{r7, pc}
 9133              	.L690:
 9134 002a C046     		.align	2
 9135              	.L689:
 9136 002c 00000000 		.word	devAddr
 9137              		.cfi_endproc
 9138              	.LFE186:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 206


 9139              		.size	MPU6050_setTempSensorEnabled, .-MPU6050_setTempSensorEnabled
 9140              		.section	.text.MPU6050_getClockSource,"ax",%progbits
 9141              		.align	2
 9142              		.global	MPU6050_getClockSource
 9143              		.code	16
 9144              		.thumb_func
 9145              		.type	MPU6050_getClockSource, %function
 9146              	MPU6050_getClockSource:
 9147              	.LFB187:
2540:mpu6050.c     **** /** Get clock source setting.
2541:mpu6050.c     ****  * @return Current clock source setting
2542:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2543:mpu6050.c     ****  * @see MPU6050_PWR1_CLKSEL_BIT
2544:mpu6050.c     ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2545:mpu6050.c     ****  */
2546:mpu6050.c     **** uint8_t MPU6050_getClockSource() {
 9148              		.loc 1 2546 0
 9149              		.cfi_startproc
 9150              		@ args = 0, pretend = 0, frame = 0
 9151              		@ frame_needed = 1, uses_anonymous_args = 0
 9152 0000 80B5     		push	{r7, lr}
 9153              		.cfi_def_cfa_offset 8
 9154              		.cfi_offset 7, -8
 9155              		.cfi_offset 14, -4
 9156 0002 82B0     		sub	sp, sp, #8
 9157              		.cfi_def_cfa_offset 16
 9158 0004 02AF     		add	r7, sp, #8
 9159              		.cfi_def_cfa 7, 8
2547:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH
 9160              		.loc 1 2547 0
 9161 0006 074B     		ldr	r3, .L693
 9162 0008 1878     		ldrb	r0, [r3]
 9163 000a 074B     		ldr	r3, .L693+4
 9164 000c 0093     		str	r3, [sp]
 9165 000e 0323     		movs	r3, #3
 9166 0010 0222     		movs	r2, #2
 9167 0012 6B21     		movs	r1, #107
 9168 0014 FFF7FEFF 		bl	I2CReadBits
2548:mpu6050.c     ****     return buffer[0];
 9169              		.loc 1 2548 0
 9170 0018 034B     		ldr	r3, .L693+4
 9171 001a 1B78     		ldrb	r3, [r3]
2549:mpu6050.c     **** }
 9172              		.loc 1 2549 0
 9173 001c 1800     		movs	r0, r3
 9174 001e BD46     		mov	sp, r7
 9175              		@ sp needed
 9176 0020 80BD     		pop	{r7, pc}
 9177              	.L694:
 9178 0022 C046     		.align	2
 9179              	.L693:
 9180 0024 00000000 		.word	devAddr
 9181 0028 00000000 		.word	buffer
 9182              		.cfi_endproc
 9183              	.LFE187:
 9184              		.size	MPU6050_getClockSource, .-MPU6050_getClockSource
 9185              		.section	.text.MPU6050_setClockSource,"ax",%progbits
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 207


 9186              		.align	2
 9187              		.global	MPU6050_setClockSource
 9188              		.code	16
 9189              		.thumb_func
 9190              		.type	MPU6050_setClockSource, %function
 9191              	MPU6050_setClockSource:
 9192              	.LFB188:
2550:mpu6050.c     **** /** Set clock source setting.
2551:mpu6050.c     ****  * An internal 8MHz oscillator, gyroscope based clock, or external sources can
2552:mpu6050.c     ****  * be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator
2553:mpu6050.c     ****  * or an external source is chosen as the clock source, the MPU-60X0 can operate
2554:mpu6050.c     ****  * in low power modes with the gyroscopes disabled.
2555:mpu6050.c     ****  *
2556:mpu6050.c     ****  * Upon power up, the MPU-60X0 clock source defaults to the internal oscillator.
2557:mpu6050.c     ****  * However, it is highly recommended that the device be configured to use one of
2558:mpu6050.c     ****  * the gyroscopes (or an external clock source) as the clock reference for
2559:mpu6050.c     ****  * improved stability. The clock source can be selected according to the following table:
2560:mpu6050.c     ****  *
2561:mpu6050.c     ****  * <pre>
2562:mpu6050.c     ****  * CLK_SEL | Clock Source
2563:mpu6050.c     ****  * --------+--------------------------------------
2564:mpu6050.c     ****  * 0       | Internal oscillator
2565:mpu6050.c     ****  * 1       | PLL with X Gyro reference
2566:mpu6050.c     ****  * 2       | PLL with Y Gyro reference
2567:mpu6050.c     ****  * 3       | PLL with Z Gyro reference
2568:mpu6050.c     ****  * 4       | PLL with external 32.768kHz reference
2569:mpu6050.c     ****  * 5       | PLL with external 19.2MHz reference
2570:mpu6050.c     ****  * 6       | Reserved
2571:mpu6050.c     ****  * 7       | Stops the clock and keeps the timing generator in reset
2572:mpu6050.c     ****  * </pre>
2573:mpu6050.c     ****  *
2574:mpu6050.c     ****  * @param source New clock source setting
2575:mpu6050.c     ****  * @see getClockSource()
2576:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_1
2577:mpu6050.c     ****  * @see MPU6050_PWR1_CLKSEL_BIT
2578:mpu6050.c     ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2579:mpu6050.c     ****  */
2580:mpu6050.c     **** void MPU6050_setClockSource(uint8_t source) {
 9193              		.loc 1 2580 0
 9194              		.cfi_startproc
 9195              		@ args = 0, pretend = 0, frame = 8
 9196              		@ frame_needed = 1, uses_anonymous_args = 0
 9197 0000 80B5     		push	{r7, lr}
 9198              		.cfi_def_cfa_offset 8
 9199              		.cfi_offset 7, -8
 9200              		.cfi_offset 14, -4
 9201 0002 84B0     		sub	sp, sp, #16
 9202              		.cfi_def_cfa_offset 24
 9203 0004 02AF     		add	r7, sp, #8
 9204              		.cfi_def_cfa 7, 16
 9205 0006 0200     		movs	r2, r0
 9206 0008 FB1D     		adds	r3, r7, #7
 9207 000a 1A70     		strb	r2, [r3]
2581:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGT
 9208              		.loc 1 2581 0
 9209 000c 064B     		ldr	r3, .L696
 9210 000e 1878     		ldrb	r0, [r3]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 208


 9211 0010 FB1D     		adds	r3, r7, #7
 9212 0012 1B78     		ldrb	r3, [r3]
 9213 0014 0093     		str	r3, [sp]
 9214 0016 0323     		movs	r3, #3
 9215 0018 0222     		movs	r2, #2
 9216 001a 6B21     		movs	r1, #107
 9217 001c FFF7FEFF 		bl	I2CWriteBits
2582:mpu6050.c     **** }
 9218              		.loc 1 2582 0
 9219 0020 C046     		nop
 9220 0022 BD46     		mov	sp, r7
 9221 0024 02B0     		add	sp, sp, #8
 9222              		@ sp needed
 9223 0026 80BD     		pop	{r7, pc}
 9224              	.L697:
 9225              		.align	2
 9226              	.L696:
 9227 0028 00000000 		.word	devAddr
 9228              		.cfi_endproc
 9229              	.LFE188:
 9230              		.size	MPU6050_setClockSource, .-MPU6050_setClockSource
 9231              		.section	.text.MPU6050_getWakeFrequency,"ax",%progbits
 9232              		.align	2
 9233              		.global	MPU6050_getWakeFrequency
 9234              		.code	16
 9235              		.thumb_func
 9236              		.type	MPU6050_getWakeFrequency, %function
 9237              	MPU6050_getWakeFrequency:
 9238              	.LFB189:
2583:mpu6050.c     **** 
2584:mpu6050.c     **** // PWR_MGMT_2 register
2585:mpu6050.c     **** 
2586:mpu6050.c     **** /** Get wake frequency in Accel-Only Low Power Mode.
2587:mpu6050.c     ****  * The MPU-60X0 can be put into Accerlerometer Only Low Power Mode by setting
2588:mpu6050.c     ****  * PWRSEL to 1 in the Power Management 1 register (Register 107). In this mode,
2589:mpu6050.c     ****  * the device will power off all devices except for the primary I2C interface,
2590:mpu6050.c     ****  * waking only the accelerometer at fixed intervals to take a single
2591:mpu6050.c     ****  * measurement. The frequency of wake-ups can be configured with LP_WAKE_CTRL
2592:mpu6050.c     ****  * as shown below:
2593:mpu6050.c     ****  *
2594:mpu6050.c     ****  * <pre>
2595:mpu6050.c     ****  * LP_WAKE_CTRL | Wake-up Frequency
2596:mpu6050.c     ****  * -------------+------------------
2597:mpu6050.c     ****  * 0            | 1.25 Hz
2598:mpu6050.c     ****  * 1            | 2.5 Hz
2599:mpu6050.c     ****  * 2            | 5 Hz
2600:mpu6050.c     ****  * 3            | 10 Hz
2601:mpu6050.c     ****  * <pre>
2602:mpu6050.c     ****  *
2603:mpu6050.c     ****  * For further information regarding the MPU-60X0's power modes, please refer to
2604:mpu6050.c     ****  * Register 107.
2605:mpu6050.c     ****  *
2606:mpu6050.c     ****  * @return Current wake frequency
2607:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2608:mpu6050.c     ****  */
2609:mpu6050.c     **** uint8_t MPU6050_getWakeFrequency() {
 9239              		.loc 1 2609 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 209


 9240              		.cfi_startproc
 9241              		@ args = 0, pretend = 0, frame = 0
 9242              		@ frame_needed = 1, uses_anonymous_args = 0
 9243 0000 80B5     		push	{r7, lr}
 9244              		.cfi_def_cfa_offset 8
 9245              		.cfi_offset 7, -8
 9246              		.cfi_offset 14, -4
 9247 0002 82B0     		sub	sp, sp, #8
 9248              		.cfi_def_cfa_offset 16
 9249 0004 02AF     		add	r7, sp, #8
 9250              		.cfi_def_cfa 7, 8
2610:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE
 9251              		.loc 1 2610 0
 9252 0006 074B     		ldr	r3, .L700
 9253 0008 1878     		ldrb	r0, [r3]
 9254 000a 074B     		ldr	r3, .L700+4
 9255 000c 0093     		str	r3, [sp]
 9256 000e 0223     		movs	r3, #2
 9257 0010 0722     		movs	r2, #7
 9258 0012 6C21     		movs	r1, #108
 9259 0014 FFF7FEFF 		bl	I2CReadBits
2611:mpu6050.c     ****     return buffer[0];
 9260              		.loc 1 2611 0
 9261 0018 034B     		ldr	r3, .L700+4
 9262 001a 1B78     		ldrb	r3, [r3]
2612:mpu6050.c     **** }
 9263              		.loc 1 2612 0
 9264 001c 1800     		movs	r0, r3
 9265 001e BD46     		mov	sp, r7
 9266              		@ sp needed
 9267 0020 80BD     		pop	{r7, pc}
 9268              	.L701:
 9269 0022 C046     		.align	2
 9270              	.L700:
 9271 0024 00000000 		.word	devAddr
 9272 0028 00000000 		.word	buffer
 9273              		.cfi_endproc
 9274              	.LFE189:
 9275              		.size	MPU6050_getWakeFrequency, .-MPU6050_getWakeFrequency
 9276              		.section	.text.MPU6050_setWakeFrequency,"ax",%progbits
 9277              		.align	2
 9278              		.global	MPU6050_setWakeFrequency
 9279              		.code	16
 9280              		.thumb_func
 9281              		.type	MPU6050_setWakeFrequency, %function
 9282              	MPU6050_setWakeFrequency:
 9283              	.LFB190:
2613:mpu6050.c     **** /** Set wake frequency in Accel-Only Low Power Mode.
2614:mpu6050.c     ****  * @param frequency New wake frequency
2615:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2616:mpu6050.c     ****  */
2617:mpu6050.c     **** void MPU6050_setWakeFrequency(uint8_t frequency) {
 9284              		.loc 1 2617 0
 9285              		.cfi_startproc
 9286              		@ args = 0, pretend = 0, frame = 8
 9287              		@ frame_needed = 1, uses_anonymous_args = 0
 9288 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 210


 9289              		.cfi_def_cfa_offset 8
 9290              		.cfi_offset 7, -8
 9291              		.cfi_offset 14, -4
 9292 0002 84B0     		sub	sp, sp, #16
 9293              		.cfi_def_cfa_offset 24
 9294 0004 02AF     		add	r7, sp, #8
 9295              		.cfi_def_cfa 7, 16
 9296 0006 0200     		movs	r2, r0
 9297 0008 FB1D     		adds	r3, r7, #7
 9298 000a 1A70     		strb	r2, [r3]
2618:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAK
 9299              		.loc 1 2618 0
 9300 000c 064B     		ldr	r3, .L703
 9301 000e 1878     		ldrb	r0, [r3]
 9302 0010 FB1D     		adds	r3, r7, #7
 9303 0012 1B78     		ldrb	r3, [r3]
 9304 0014 0093     		str	r3, [sp]
 9305 0016 0223     		movs	r3, #2
 9306 0018 0722     		movs	r2, #7
 9307 001a 6C21     		movs	r1, #108
 9308 001c FFF7FEFF 		bl	I2CWriteBits
2619:mpu6050.c     **** }
 9309              		.loc 1 2619 0
 9310 0020 C046     		nop
 9311 0022 BD46     		mov	sp, r7
 9312 0024 02B0     		add	sp, sp, #8
 9313              		@ sp needed
 9314 0026 80BD     		pop	{r7, pc}
 9315              	.L704:
 9316              		.align	2
 9317              	.L703:
 9318 0028 00000000 		.word	devAddr
 9319              		.cfi_endproc
 9320              	.LFE190:
 9321              		.size	MPU6050_setWakeFrequency, .-MPU6050_setWakeFrequency
 9322              		.section	.text.MPU6050_getStandbyXAccelEnabled,"ax",%progbits
 9323              		.align	2
 9324              		.global	MPU6050_getStandbyXAccelEnabled
 9325              		.code	16
 9326              		.thumb_func
 9327              		.type	MPU6050_getStandbyXAccelEnabled, %function
 9328              	MPU6050_getStandbyXAccelEnabled:
 9329              	.LFB191:
2620:mpu6050.c     **** 
2621:mpu6050.c     **** /** Get X-axis accelerometer standby enabled status.
2622:mpu6050.c     ****  * If enabled, the X-axis will not gather or report data (or use power).
2623:mpu6050.c     ****  * @return Current X-axis standby enabled status
2624:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2625:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_XA_BIT
2626:mpu6050.c     ****  */
2627:mpu6050.c     **** bool MPU6050_getStandbyXAccelEnabled() {
 9330              		.loc 1 2627 0
 9331              		.cfi_startproc
 9332              		@ args = 0, pretend = 0, frame = 0
 9333              		@ frame_needed = 1, uses_anonymous_args = 0
 9334 0000 80B5     		push	{r7, lr}
 9335              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 211


 9336              		.cfi_offset 7, -8
 9337              		.cfi_offset 14, -4
 9338 0002 00AF     		add	r7, sp, #0
 9339              		.cfi_def_cfa_register 7
2628:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, buffer);
 9340              		.loc 1 2628 0
 9341 0004 074B     		ldr	r3, .L707
 9342 0006 1878     		ldrb	r0, [r3]
 9343 0008 074B     		ldr	r3, .L707+4
 9344 000a 0522     		movs	r2, #5
 9345 000c 6C21     		movs	r1, #108
 9346 000e FFF7FEFF 		bl	I2CReadBit
2629:mpu6050.c     ****     return buffer[0];
 9347              		.loc 1 2629 0
 9348 0012 054B     		ldr	r3, .L707+4
 9349 0014 1B78     		ldrb	r3, [r3]
 9350 0016 5A1E     		subs	r2, r3, #1
 9351 0018 9341     		sbcs	r3, r3, r2
 9352 001a DBB2     		uxtb	r3, r3
2630:mpu6050.c     **** }
 9353              		.loc 1 2630 0
 9354 001c 1800     		movs	r0, r3
 9355 001e BD46     		mov	sp, r7
 9356              		@ sp needed
 9357 0020 80BD     		pop	{r7, pc}
 9358              	.L708:
 9359 0022 C046     		.align	2
 9360              	.L707:
 9361 0024 00000000 		.word	devAddr
 9362 0028 00000000 		.word	buffer
 9363              		.cfi_endproc
 9364              	.LFE191:
 9365              		.size	MPU6050_getStandbyXAccelEnabled, .-MPU6050_getStandbyXAccelEnabled
 9366              		.section	.text.MPU6050_setStandbyXAccelEnabled,"ax",%progbits
 9367              		.align	2
 9368              		.global	MPU6050_setStandbyXAccelEnabled
 9369              		.code	16
 9370              		.thumb_func
 9371              		.type	MPU6050_setStandbyXAccelEnabled, %function
 9372              	MPU6050_setStandbyXAccelEnabled:
 9373              	.LFB192:
2631:mpu6050.c     **** /** Set X-axis accelerometer standby enabled status.
2632:mpu6050.c     ****  * @param New X-axis standby enabled status
2633:mpu6050.c     ****  * @see getStandbyXAccelEnabled()
2634:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2635:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_XA_BIT
2636:mpu6050.c     ****  */
2637:mpu6050.c     **** void MPU6050_setStandbyXAccelEnabled(bool enabled) {
 9374              		.loc 1 2637 0
 9375              		.cfi_startproc
 9376              		@ args = 0, pretend = 0, frame = 8
 9377              		@ frame_needed = 1, uses_anonymous_args = 0
 9378 0000 80B5     		push	{r7, lr}
 9379              		.cfi_def_cfa_offset 8
 9380              		.cfi_offset 7, -8
 9381              		.cfi_offset 14, -4
 9382 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 212


 9383              		.cfi_def_cfa_offset 16
 9384 0004 00AF     		add	r7, sp, #0
 9385              		.cfi_def_cfa_register 7
 9386 0006 0200     		movs	r2, r0
 9387 0008 FB1D     		adds	r3, r7, #7
 9388 000a 1A70     		strb	r2, [r3]
2638:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, enabled);
 9389              		.loc 1 2638 0
 9390 000c 054B     		ldr	r3, .L710
 9391 000e 1878     		ldrb	r0, [r3]
 9392 0010 FB1D     		adds	r3, r7, #7
 9393 0012 1B78     		ldrb	r3, [r3]
 9394 0014 0522     		movs	r2, #5
 9395 0016 6C21     		movs	r1, #108
 9396 0018 FFF7FEFF 		bl	I2CWriteBit
2639:mpu6050.c     **** }
 9397              		.loc 1 2639 0
 9398 001c C046     		nop
 9399 001e BD46     		mov	sp, r7
 9400 0020 02B0     		add	sp, sp, #8
 9401              		@ sp needed
 9402 0022 80BD     		pop	{r7, pc}
 9403              	.L711:
 9404              		.align	2
 9405              	.L710:
 9406 0024 00000000 		.word	devAddr
 9407              		.cfi_endproc
 9408              	.LFE192:
 9409              		.size	MPU6050_setStandbyXAccelEnabled, .-MPU6050_setStandbyXAccelEnabled
 9410              		.section	.text.MPU6050_getStandbyYAccelEnabled,"ax",%progbits
 9411              		.align	2
 9412              		.global	MPU6050_getStandbyYAccelEnabled
 9413              		.code	16
 9414              		.thumb_func
 9415              		.type	MPU6050_getStandbyYAccelEnabled, %function
 9416              	MPU6050_getStandbyYAccelEnabled:
 9417              	.LFB193:
2640:mpu6050.c     **** /** Get Y-axis accelerometer standby enabled status.
2641:mpu6050.c     ****  * If enabled, the Y-axis will not gather or report data (or use power).
2642:mpu6050.c     ****  * @return Current Y-axis standby enabled status
2643:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2644:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_YA_BIT
2645:mpu6050.c     ****  */
2646:mpu6050.c     **** bool MPU6050_getStandbyYAccelEnabled() {
 9418              		.loc 1 2646 0
 9419              		.cfi_startproc
 9420              		@ args = 0, pretend = 0, frame = 0
 9421              		@ frame_needed = 1, uses_anonymous_args = 0
 9422 0000 80B5     		push	{r7, lr}
 9423              		.cfi_def_cfa_offset 8
 9424              		.cfi_offset 7, -8
 9425              		.cfi_offset 14, -4
 9426 0002 00AF     		add	r7, sp, #0
 9427              		.cfi_def_cfa_register 7
2647:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, buffer);
 9428              		.loc 1 2647 0
 9429 0004 074B     		ldr	r3, .L714
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 213


 9430 0006 1878     		ldrb	r0, [r3]
 9431 0008 074B     		ldr	r3, .L714+4
 9432 000a 0422     		movs	r2, #4
 9433 000c 6C21     		movs	r1, #108
 9434 000e FFF7FEFF 		bl	I2CReadBit
2648:mpu6050.c     ****     return buffer[0];
 9435              		.loc 1 2648 0
 9436 0012 054B     		ldr	r3, .L714+4
 9437 0014 1B78     		ldrb	r3, [r3]
 9438 0016 5A1E     		subs	r2, r3, #1
 9439 0018 9341     		sbcs	r3, r3, r2
 9440 001a DBB2     		uxtb	r3, r3
2649:mpu6050.c     **** }
 9441              		.loc 1 2649 0
 9442 001c 1800     		movs	r0, r3
 9443 001e BD46     		mov	sp, r7
 9444              		@ sp needed
 9445 0020 80BD     		pop	{r7, pc}
 9446              	.L715:
 9447 0022 C046     		.align	2
 9448              	.L714:
 9449 0024 00000000 		.word	devAddr
 9450 0028 00000000 		.word	buffer
 9451              		.cfi_endproc
 9452              	.LFE193:
 9453              		.size	MPU6050_getStandbyYAccelEnabled, .-MPU6050_getStandbyYAccelEnabled
 9454              		.section	.text.MPU6050_setStandbyYAccelEnabled,"ax",%progbits
 9455              		.align	2
 9456              		.global	MPU6050_setStandbyYAccelEnabled
 9457              		.code	16
 9458              		.thumb_func
 9459              		.type	MPU6050_setStandbyYAccelEnabled, %function
 9460              	MPU6050_setStandbyYAccelEnabled:
 9461              	.LFB194:
2650:mpu6050.c     **** /** Set Y-axis accelerometer standby enabled status.
2651:mpu6050.c     ****  * @param New Y-axis standby enabled status
2652:mpu6050.c     ****  * @see getStandbyYAccelEnabled()
2653:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2654:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_YA_BIT
2655:mpu6050.c     ****  */
2656:mpu6050.c     **** void MPU6050_setStandbyYAccelEnabled(bool enabled) {
 9462              		.loc 1 2656 0
 9463              		.cfi_startproc
 9464              		@ args = 0, pretend = 0, frame = 8
 9465              		@ frame_needed = 1, uses_anonymous_args = 0
 9466 0000 80B5     		push	{r7, lr}
 9467              		.cfi_def_cfa_offset 8
 9468              		.cfi_offset 7, -8
 9469              		.cfi_offset 14, -4
 9470 0002 82B0     		sub	sp, sp, #8
 9471              		.cfi_def_cfa_offset 16
 9472 0004 00AF     		add	r7, sp, #0
 9473              		.cfi_def_cfa_register 7
 9474 0006 0200     		movs	r2, r0
 9475 0008 FB1D     		adds	r3, r7, #7
 9476 000a 1A70     		strb	r2, [r3]
2657:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, enabled);
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 214


 9477              		.loc 1 2657 0
 9478 000c 054B     		ldr	r3, .L717
 9479 000e 1878     		ldrb	r0, [r3]
 9480 0010 FB1D     		adds	r3, r7, #7
 9481 0012 1B78     		ldrb	r3, [r3]
 9482 0014 0422     		movs	r2, #4
 9483 0016 6C21     		movs	r1, #108
 9484 0018 FFF7FEFF 		bl	I2CWriteBit
2658:mpu6050.c     **** }
 9485              		.loc 1 2658 0
 9486 001c C046     		nop
 9487 001e BD46     		mov	sp, r7
 9488 0020 02B0     		add	sp, sp, #8
 9489              		@ sp needed
 9490 0022 80BD     		pop	{r7, pc}
 9491              	.L718:
 9492              		.align	2
 9493              	.L717:
 9494 0024 00000000 		.word	devAddr
 9495              		.cfi_endproc
 9496              	.LFE194:
 9497              		.size	MPU6050_setStandbyYAccelEnabled, .-MPU6050_setStandbyYAccelEnabled
 9498              		.section	.text.MPU6050_getStandbyZAccelEnabled,"ax",%progbits
 9499              		.align	2
 9500              		.global	MPU6050_getStandbyZAccelEnabled
 9501              		.code	16
 9502              		.thumb_func
 9503              		.type	MPU6050_getStandbyZAccelEnabled, %function
 9504              	MPU6050_getStandbyZAccelEnabled:
 9505              	.LFB195:
2659:mpu6050.c     **** /** Get Z-axis accelerometer standby enabled status.
2660:mpu6050.c     ****  * If enabled, the Z-axis will not gather or report data (or use power).
2661:mpu6050.c     ****  * @return Current Z-axis standby enabled status
2662:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2663:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2664:mpu6050.c     ****  */
2665:mpu6050.c     **** bool MPU6050_getStandbyZAccelEnabled() {
 9506              		.loc 1 2665 0
 9507              		.cfi_startproc
 9508              		@ args = 0, pretend = 0, frame = 0
 9509              		@ frame_needed = 1, uses_anonymous_args = 0
 9510 0000 80B5     		push	{r7, lr}
 9511              		.cfi_def_cfa_offset 8
 9512              		.cfi_offset 7, -8
 9513              		.cfi_offset 14, -4
 9514 0002 00AF     		add	r7, sp, #0
 9515              		.cfi_def_cfa_register 7
2666:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, buffer);
 9516              		.loc 1 2666 0
 9517 0004 074B     		ldr	r3, .L721
 9518 0006 1878     		ldrb	r0, [r3]
 9519 0008 074B     		ldr	r3, .L721+4
 9520 000a 0322     		movs	r2, #3
 9521 000c 6C21     		movs	r1, #108
 9522 000e FFF7FEFF 		bl	I2CReadBit
2667:mpu6050.c     ****     return buffer[0];
 9523              		.loc 1 2667 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 215


 9524 0012 054B     		ldr	r3, .L721+4
 9525 0014 1B78     		ldrb	r3, [r3]
 9526 0016 5A1E     		subs	r2, r3, #1
 9527 0018 9341     		sbcs	r3, r3, r2
 9528 001a DBB2     		uxtb	r3, r3
2668:mpu6050.c     **** }
 9529              		.loc 1 2668 0
 9530 001c 1800     		movs	r0, r3
 9531 001e BD46     		mov	sp, r7
 9532              		@ sp needed
 9533 0020 80BD     		pop	{r7, pc}
 9534              	.L722:
 9535 0022 C046     		.align	2
 9536              	.L721:
 9537 0024 00000000 		.word	devAddr
 9538 0028 00000000 		.word	buffer
 9539              		.cfi_endproc
 9540              	.LFE195:
 9541              		.size	MPU6050_getStandbyZAccelEnabled, .-MPU6050_getStandbyZAccelEnabled
 9542              		.section	.text.MPU6050_setStandbyZAccelEnabled,"ax",%progbits
 9543              		.align	2
 9544              		.global	MPU6050_setStandbyZAccelEnabled
 9545              		.code	16
 9546              		.thumb_func
 9547              		.type	MPU6050_setStandbyZAccelEnabled, %function
 9548              	MPU6050_setStandbyZAccelEnabled:
 9549              	.LFB196:
2669:mpu6050.c     **** /** Set Z-axis accelerometer standby enabled status.
2670:mpu6050.c     ****  * @param New Z-axis standby enabled status
2671:mpu6050.c     ****  * @see getStandbyZAccelEnabled()
2672:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2673:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2674:mpu6050.c     ****  */
2675:mpu6050.c     **** void MPU6050_setStandbyZAccelEnabled(bool enabled) {
 9550              		.loc 1 2675 0
 9551              		.cfi_startproc
 9552              		@ args = 0, pretend = 0, frame = 8
 9553              		@ frame_needed = 1, uses_anonymous_args = 0
 9554 0000 80B5     		push	{r7, lr}
 9555              		.cfi_def_cfa_offset 8
 9556              		.cfi_offset 7, -8
 9557              		.cfi_offset 14, -4
 9558 0002 82B0     		sub	sp, sp, #8
 9559              		.cfi_def_cfa_offset 16
 9560 0004 00AF     		add	r7, sp, #0
 9561              		.cfi_def_cfa_register 7
 9562 0006 0200     		movs	r2, r0
 9563 0008 FB1D     		adds	r3, r7, #7
 9564 000a 1A70     		strb	r2, [r3]
2676:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, enabled);
 9565              		.loc 1 2676 0
 9566 000c 054B     		ldr	r3, .L724
 9567 000e 1878     		ldrb	r0, [r3]
 9568 0010 FB1D     		adds	r3, r7, #7
 9569 0012 1B78     		ldrb	r3, [r3]
 9570 0014 0322     		movs	r2, #3
 9571 0016 6C21     		movs	r1, #108
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 216


 9572 0018 FFF7FEFF 		bl	I2CWriteBit
2677:mpu6050.c     **** }
 9573              		.loc 1 2677 0
 9574 001c C046     		nop
 9575 001e BD46     		mov	sp, r7
 9576 0020 02B0     		add	sp, sp, #8
 9577              		@ sp needed
 9578 0022 80BD     		pop	{r7, pc}
 9579              	.L725:
 9580              		.align	2
 9581              	.L724:
 9582 0024 00000000 		.word	devAddr
 9583              		.cfi_endproc
 9584              	.LFE196:
 9585              		.size	MPU6050_setStandbyZAccelEnabled, .-MPU6050_setStandbyZAccelEnabled
 9586              		.section	.text.MPU6050_getStandbyXGyroEnabled,"ax",%progbits
 9587              		.align	2
 9588              		.global	MPU6050_getStandbyXGyroEnabled
 9589              		.code	16
 9590              		.thumb_func
 9591              		.type	MPU6050_getStandbyXGyroEnabled, %function
 9592              	MPU6050_getStandbyXGyroEnabled:
 9593              	.LFB197:
2678:mpu6050.c     **** /** Get X-axis gyroscope standby enabled status.
2679:mpu6050.c     ****  * If enabled, the X-axis will not gather or report data (or use power).
2680:mpu6050.c     ****  * @return Current X-axis standby enabled status
2681:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2682:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_XG_BIT
2683:mpu6050.c     ****  */
2684:mpu6050.c     **** bool MPU6050_getStandbyXGyroEnabled() {
 9594              		.loc 1 2684 0
 9595              		.cfi_startproc
 9596              		@ args = 0, pretend = 0, frame = 0
 9597              		@ frame_needed = 1, uses_anonymous_args = 0
 9598 0000 80B5     		push	{r7, lr}
 9599              		.cfi_def_cfa_offset 8
 9600              		.cfi_offset 7, -8
 9601              		.cfi_offset 14, -4
 9602 0002 00AF     		add	r7, sp, #0
 9603              		.cfi_def_cfa_register 7
2685:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, buffer);
 9604              		.loc 1 2685 0
 9605 0004 074B     		ldr	r3, .L728
 9606 0006 1878     		ldrb	r0, [r3]
 9607 0008 074B     		ldr	r3, .L728+4
 9608 000a 0222     		movs	r2, #2
 9609 000c 6C21     		movs	r1, #108
 9610 000e FFF7FEFF 		bl	I2CReadBit
2686:mpu6050.c     ****     return buffer[0];
 9611              		.loc 1 2686 0
 9612 0012 054B     		ldr	r3, .L728+4
 9613 0014 1B78     		ldrb	r3, [r3]
 9614 0016 5A1E     		subs	r2, r3, #1
 9615 0018 9341     		sbcs	r3, r3, r2
 9616 001a DBB2     		uxtb	r3, r3
2687:mpu6050.c     **** }
 9617              		.loc 1 2687 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 217


 9618 001c 1800     		movs	r0, r3
 9619 001e BD46     		mov	sp, r7
 9620              		@ sp needed
 9621 0020 80BD     		pop	{r7, pc}
 9622              	.L729:
 9623 0022 C046     		.align	2
 9624              	.L728:
 9625 0024 00000000 		.word	devAddr
 9626 0028 00000000 		.word	buffer
 9627              		.cfi_endproc
 9628              	.LFE197:
 9629              		.size	MPU6050_getStandbyXGyroEnabled, .-MPU6050_getStandbyXGyroEnabled
 9630              		.section	.text.MPU6050_setStandbyXGyroEnabled,"ax",%progbits
 9631              		.align	2
 9632              		.global	MPU6050_setStandbyXGyroEnabled
 9633              		.code	16
 9634              		.thumb_func
 9635              		.type	MPU6050_setStandbyXGyroEnabled, %function
 9636              	MPU6050_setStandbyXGyroEnabled:
 9637              	.LFB198:
2688:mpu6050.c     **** /** Set X-axis gyroscope standby enabled status.
2689:mpu6050.c     ****  * @param New X-axis standby enabled status
2690:mpu6050.c     ****  * @see getStandbyXGyroEnabled()
2691:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2692:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_XG_BIT
2693:mpu6050.c     ****  */
2694:mpu6050.c     **** void MPU6050_setStandbyXGyroEnabled(bool enabled) {
 9638              		.loc 1 2694 0
 9639              		.cfi_startproc
 9640              		@ args = 0, pretend = 0, frame = 8
 9641              		@ frame_needed = 1, uses_anonymous_args = 0
 9642 0000 80B5     		push	{r7, lr}
 9643              		.cfi_def_cfa_offset 8
 9644              		.cfi_offset 7, -8
 9645              		.cfi_offset 14, -4
 9646 0002 82B0     		sub	sp, sp, #8
 9647              		.cfi_def_cfa_offset 16
 9648 0004 00AF     		add	r7, sp, #0
 9649              		.cfi_def_cfa_register 7
 9650 0006 0200     		movs	r2, r0
 9651 0008 FB1D     		adds	r3, r7, #7
 9652 000a 1A70     		strb	r2, [r3]
2695:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, enabled);
 9653              		.loc 1 2695 0
 9654 000c 054B     		ldr	r3, .L731
 9655 000e 1878     		ldrb	r0, [r3]
 9656 0010 FB1D     		adds	r3, r7, #7
 9657 0012 1B78     		ldrb	r3, [r3]
 9658 0014 0222     		movs	r2, #2
 9659 0016 6C21     		movs	r1, #108
 9660 0018 FFF7FEFF 		bl	I2CWriteBit
2696:mpu6050.c     **** }
 9661              		.loc 1 2696 0
 9662 001c C046     		nop
 9663 001e BD46     		mov	sp, r7
 9664 0020 02B0     		add	sp, sp, #8
 9665              		@ sp needed
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 218


 9666 0022 80BD     		pop	{r7, pc}
 9667              	.L732:
 9668              		.align	2
 9669              	.L731:
 9670 0024 00000000 		.word	devAddr
 9671              		.cfi_endproc
 9672              	.LFE198:
 9673              		.size	MPU6050_setStandbyXGyroEnabled, .-MPU6050_setStandbyXGyroEnabled
 9674              		.section	.text.MPU6050_getStandbyYGyroEnabled,"ax",%progbits
 9675              		.align	2
 9676              		.global	MPU6050_getStandbyYGyroEnabled
 9677              		.code	16
 9678              		.thumb_func
 9679              		.type	MPU6050_getStandbyYGyroEnabled, %function
 9680              	MPU6050_getStandbyYGyroEnabled:
 9681              	.LFB199:
2697:mpu6050.c     **** /** Get Y-axis gyroscope standby enabled status.
2698:mpu6050.c     ****  * If enabled, the Y-axis will not gather or report data (or use power).
2699:mpu6050.c     ****  * @return Current Y-axis standby enabled status
2700:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2701:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_YG_BIT
2702:mpu6050.c     ****  */
2703:mpu6050.c     **** bool MPU6050_getStandbyYGyroEnabled() {
 9682              		.loc 1 2703 0
 9683              		.cfi_startproc
 9684              		@ args = 0, pretend = 0, frame = 0
 9685              		@ frame_needed = 1, uses_anonymous_args = 0
 9686 0000 80B5     		push	{r7, lr}
 9687              		.cfi_def_cfa_offset 8
 9688              		.cfi_offset 7, -8
 9689              		.cfi_offset 14, -4
 9690 0002 00AF     		add	r7, sp, #0
 9691              		.cfi_def_cfa_register 7
2704:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, buffer);
 9692              		.loc 1 2704 0
 9693 0004 074B     		ldr	r3, .L735
 9694 0006 1878     		ldrb	r0, [r3]
 9695 0008 074B     		ldr	r3, .L735+4
 9696 000a 0122     		movs	r2, #1
 9697 000c 6C21     		movs	r1, #108
 9698 000e FFF7FEFF 		bl	I2CReadBit
2705:mpu6050.c     ****     return buffer[0];
 9699              		.loc 1 2705 0
 9700 0012 054B     		ldr	r3, .L735+4
 9701 0014 1B78     		ldrb	r3, [r3]
 9702 0016 5A1E     		subs	r2, r3, #1
 9703 0018 9341     		sbcs	r3, r3, r2
 9704 001a DBB2     		uxtb	r3, r3
2706:mpu6050.c     **** }
 9705              		.loc 1 2706 0
 9706 001c 1800     		movs	r0, r3
 9707 001e BD46     		mov	sp, r7
 9708              		@ sp needed
 9709 0020 80BD     		pop	{r7, pc}
 9710              	.L736:
 9711 0022 C046     		.align	2
 9712              	.L735:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 219


 9713 0024 00000000 		.word	devAddr
 9714 0028 00000000 		.word	buffer
 9715              		.cfi_endproc
 9716              	.LFE199:
 9717              		.size	MPU6050_getStandbyYGyroEnabled, .-MPU6050_getStandbyYGyroEnabled
 9718              		.section	.text.MPU6050_setStandbyYGyroEnabled,"ax",%progbits
 9719              		.align	2
 9720              		.global	MPU6050_setStandbyYGyroEnabled
 9721              		.code	16
 9722              		.thumb_func
 9723              		.type	MPU6050_setStandbyYGyroEnabled, %function
 9724              	MPU6050_setStandbyYGyroEnabled:
 9725              	.LFB200:
2707:mpu6050.c     **** /** Set Y-axis gyroscope standby enabled status.
2708:mpu6050.c     ****  * @param New Y-axis standby enabled status
2709:mpu6050.c     ****  * @see getStandbyYGyroEnabled()
2710:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2711:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_YG_BIT
2712:mpu6050.c     ****  */
2713:mpu6050.c     **** void MPU6050_setStandbyYGyroEnabled(bool enabled) {
 9726              		.loc 1 2713 0
 9727              		.cfi_startproc
 9728              		@ args = 0, pretend = 0, frame = 8
 9729              		@ frame_needed = 1, uses_anonymous_args = 0
 9730 0000 80B5     		push	{r7, lr}
 9731              		.cfi_def_cfa_offset 8
 9732              		.cfi_offset 7, -8
 9733              		.cfi_offset 14, -4
 9734 0002 82B0     		sub	sp, sp, #8
 9735              		.cfi_def_cfa_offset 16
 9736 0004 00AF     		add	r7, sp, #0
 9737              		.cfi_def_cfa_register 7
 9738 0006 0200     		movs	r2, r0
 9739 0008 FB1D     		adds	r3, r7, #7
 9740 000a 1A70     		strb	r2, [r3]
2714:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, enabled);
 9741              		.loc 1 2714 0
 9742 000c 054B     		ldr	r3, .L738
 9743 000e 1878     		ldrb	r0, [r3]
 9744 0010 FB1D     		adds	r3, r7, #7
 9745 0012 1B78     		ldrb	r3, [r3]
 9746 0014 0122     		movs	r2, #1
 9747 0016 6C21     		movs	r1, #108
 9748 0018 FFF7FEFF 		bl	I2CWriteBit
2715:mpu6050.c     **** }
 9749              		.loc 1 2715 0
 9750 001c C046     		nop
 9751 001e BD46     		mov	sp, r7
 9752 0020 02B0     		add	sp, sp, #8
 9753              		@ sp needed
 9754 0022 80BD     		pop	{r7, pc}
 9755              	.L739:
 9756              		.align	2
 9757              	.L738:
 9758 0024 00000000 		.word	devAddr
 9759              		.cfi_endproc
 9760              	.LFE200:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 220


 9761              		.size	MPU6050_setStandbyYGyroEnabled, .-MPU6050_setStandbyYGyroEnabled
 9762              		.section	.text.MPU6050_getStandbyZGyroEnabled,"ax",%progbits
 9763              		.align	2
 9764              		.global	MPU6050_getStandbyZGyroEnabled
 9765              		.code	16
 9766              		.thumb_func
 9767              		.type	MPU6050_getStandbyZGyroEnabled, %function
 9768              	MPU6050_getStandbyZGyroEnabled:
 9769              	.LFB201:
2716:mpu6050.c     **** /** Get Z-axis gyroscope standby enabled status.
2717:mpu6050.c     ****  * If enabled, the Z-axis will not gather or report data (or use power).
2718:mpu6050.c     ****  * @return Current Z-axis standby enabled status
2719:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2720:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2721:mpu6050.c     ****  */
2722:mpu6050.c     **** bool MPU6050_getStandbyZGyroEnabled() {
 9770              		.loc 1 2722 0
 9771              		.cfi_startproc
 9772              		@ args = 0, pretend = 0, frame = 0
 9773              		@ frame_needed = 1, uses_anonymous_args = 0
 9774 0000 80B5     		push	{r7, lr}
 9775              		.cfi_def_cfa_offset 8
 9776              		.cfi_offset 7, -8
 9777              		.cfi_offset 14, -4
 9778 0002 00AF     		add	r7, sp, #0
 9779              		.cfi_def_cfa_register 7
2723:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, buffer);
 9780              		.loc 1 2723 0
 9781 0004 074B     		ldr	r3, .L742
 9782 0006 1878     		ldrb	r0, [r3]
 9783 0008 074B     		ldr	r3, .L742+4
 9784 000a 0022     		movs	r2, #0
 9785 000c 6C21     		movs	r1, #108
 9786 000e FFF7FEFF 		bl	I2CReadBit
2724:mpu6050.c     ****     return buffer[0];
 9787              		.loc 1 2724 0
 9788 0012 054B     		ldr	r3, .L742+4
 9789 0014 1B78     		ldrb	r3, [r3]
 9790 0016 5A1E     		subs	r2, r3, #1
 9791 0018 9341     		sbcs	r3, r3, r2
 9792 001a DBB2     		uxtb	r3, r3
2725:mpu6050.c     **** }
 9793              		.loc 1 2725 0
 9794 001c 1800     		movs	r0, r3
 9795 001e BD46     		mov	sp, r7
 9796              		@ sp needed
 9797 0020 80BD     		pop	{r7, pc}
 9798              	.L743:
 9799 0022 C046     		.align	2
 9800              	.L742:
 9801 0024 00000000 		.word	devAddr
 9802 0028 00000000 		.word	buffer
 9803              		.cfi_endproc
 9804              	.LFE201:
 9805              		.size	MPU6050_getStandbyZGyroEnabled, .-MPU6050_getStandbyZGyroEnabled
 9806              		.section	.text.MPU6050_setStandbyZGyroEnabled,"ax",%progbits
 9807              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 221


 9808              		.global	MPU6050_setStandbyZGyroEnabled
 9809              		.code	16
 9810              		.thumb_func
 9811              		.type	MPU6050_setStandbyZGyroEnabled, %function
 9812              	MPU6050_setStandbyZGyroEnabled:
 9813              	.LFB202:
2726:mpu6050.c     **** /** Set Z-axis gyroscope standby enabled status.
2727:mpu6050.c     ****  * @param New Z-axis standby enabled status
2728:mpu6050.c     ****  * @see getStandbyZGyroEnabled()
2729:mpu6050.c     ****  * @see MPU6050_RA_PWR_MGMT_2
2730:mpu6050.c     ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2731:mpu6050.c     ****  */
2732:mpu6050.c     **** void MPU6050_setStandbyZGyroEnabled(bool enabled) {
 9814              		.loc 1 2732 0
 9815              		.cfi_startproc
 9816              		@ args = 0, pretend = 0, frame = 8
 9817              		@ frame_needed = 1, uses_anonymous_args = 0
 9818 0000 80B5     		push	{r7, lr}
 9819              		.cfi_def_cfa_offset 8
 9820              		.cfi_offset 7, -8
 9821              		.cfi_offset 14, -4
 9822 0002 82B0     		sub	sp, sp, #8
 9823              		.cfi_def_cfa_offset 16
 9824 0004 00AF     		add	r7, sp, #0
 9825              		.cfi_def_cfa_register 7
 9826 0006 0200     		movs	r2, r0
 9827 0008 FB1D     		adds	r3, r7, #7
 9828 000a 1A70     		strb	r2, [r3]
2733:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, enabled);
 9829              		.loc 1 2733 0
 9830 000c 054B     		ldr	r3, .L745
 9831 000e 1878     		ldrb	r0, [r3]
 9832 0010 FB1D     		adds	r3, r7, #7
 9833 0012 1B78     		ldrb	r3, [r3]
 9834 0014 0022     		movs	r2, #0
 9835 0016 6C21     		movs	r1, #108
 9836 0018 FFF7FEFF 		bl	I2CWriteBit
2734:mpu6050.c     **** }
 9837              		.loc 1 2734 0
 9838 001c C046     		nop
 9839 001e BD46     		mov	sp, r7
 9840 0020 02B0     		add	sp, sp, #8
 9841              		@ sp needed
 9842 0022 80BD     		pop	{r7, pc}
 9843              	.L746:
 9844              		.align	2
 9845              	.L745:
 9846 0024 00000000 		.word	devAddr
 9847              		.cfi_endproc
 9848              	.LFE202:
 9849              		.size	MPU6050_setStandbyZGyroEnabled, .-MPU6050_setStandbyZGyroEnabled
 9850              		.section	.text.MPU6050_getFIFOCount,"ax",%progbits
 9851              		.align	2
 9852              		.global	MPU6050_getFIFOCount
 9853              		.code	16
 9854              		.thumb_func
 9855              		.type	MPU6050_getFIFOCount, %function
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 222


 9856              	MPU6050_getFIFOCount:
 9857              	.LFB203:
2735:mpu6050.c     **** 
2736:mpu6050.c     **** // FIFO_COUNT* registers
2737:mpu6050.c     **** 
2738:mpu6050.c     **** /** Get current FIFO buffer size.
2739:mpu6050.c     ****  * This value indicates the number of bytes stored in the FIFO buffer. This
2740:mpu6050.c     ****  * number is in turn the number of bytes that can be read from the FIFO buffer
2741:mpu6050.c     ****  * and it is directly proportional to the number of samples available given the
2742:mpu6050.c     ****  * set of sensor data bound to be stored in the FIFO (register 35 and 36).
2743:mpu6050.c     ****  * @return Current FIFO buffer size
2744:mpu6050.c     ****  */
2745:mpu6050.c     **** uint16_t MPU6050_getFIFOCount() {
 9858              		.loc 1 2745 0
 9859              		.cfi_startproc
 9860              		@ args = 0, pretend = 0, frame = 0
 9861              		@ frame_needed = 1, uses_anonymous_args = 0
 9862 0000 80B5     		push	{r7, lr}
 9863              		.cfi_def_cfa_offset 8
 9864              		.cfi_offset 7, -8
 9865              		.cfi_offset 14, -4
 9866 0002 00AF     		add	r7, sp, #0
 9867              		.cfi_def_cfa_register 7
2746:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 9868              		.loc 1 2746 0
 9869 0004 094B     		ldr	r3, .L749
 9870 0006 1878     		ldrb	r0, [r3]
 9871 0008 094B     		ldr	r3, .L749+4
 9872 000a 0222     		movs	r2, #2
 9873 000c 7221     		movs	r1, #114
 9874 000e FFF7FEFF 		bl	I2CReadBytes
2747:mpu6050.c     ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 9875              		.loc 1 2747 0
 9876 0012 074B     		ldr	r3, .L749+4
 9877 0014 1B78     		ldrb	r3, [r3]
 9878 0016 1B02     		lsls	r3, r3, #8
 9879 0018 1AB2     		sxth	r2, r3
 9880 001a 054B     		ldr	r3, .L749+4
 9881 001c 5B78     		ldrb	r3, [r3, #1]
 9882 001e 1BB2     		sxth	r3, r3
 9883 0020 1343     		orrs	r3, r2
 9884 0022 1BB2     		sxth	r3, r3
 9885 0024 9BB2     		uxth	r3, r3
2748:mpu6050.c     **** }
 9886              		.loc 1 2748 0
 9887 0026 1800     		movs	r0, r3
 9888 0028 BD46     		mov	sp, r7
 9889              		@ sp needed
 9890 002a 80BD     		pop	{r7, pc}
 9891              	.L750:
 9892              		.align	2
 9893              	.L749:
 9894 002c 00000000 		.word	devAddr
 9895 0030 00000000 		.word	buffer
 9896              		.cfi_endproc
 9897              	.LFE203:
 9898              		.size	MPU6050_getFIFOCount, .-MPU6050_getFIFOCount
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 223


 9899              		.section	.text.MPU6050_getFIFOByte,"ax",%progbits
 9900              		.align	2
 9901              		.global	MPU6050_getFIFOByte
 9902              		.code	16
 9903              		.thumb_func
 9904              		.type	MPU6050_getFIFOByte, %function
 9905              	MPU6050_getFIFOByte:
 9906              	.LFB204:
2749:mpu6050.c     **** 
2750:mpu6050.c     **** // FIFO_R_W register
2751:mpu6050.c     **** 
2752:mpu6050.c     **** /** Get byte from FIFO buffer.
2753:mpu6050.c     ****  * This register is used to read and write data from the FIFO buffer. Data is
2754:mpu6050.c     ****  * written to the FIFO in order of register number (from lowest to highest). If
2755:mpu6050.c     ****  * all the FIFO enable flags (see below) are enabled and all External Sensor
2756:mpu6050.c     ****  * Data registers (Registers 73 to 96) are associated with a Slave device, the
2757:mpu6050.c     ****  * contents of registers 59 through 96 will be written in order at the Sample
2758:mpu6050.c     ****  * Rate.
2759:mpu6050.c     ****  *
2760:mpu6050.c     ****  * The contents of the sensor data registers (Registers 59 to 96) are written
2761:mpu6050.c     ****  * into the FIFO buffer when their corresponding FIFO enable flags are set to 1
2762:mpu6050.c     ****  * in FIFO_EN (Register 35). An additional flag for the sensor data registers
2763:mpu6050.c     ****  * associated with I2C Slave 3 can be found in I2C_MST_CTRL (Register 36).
2764:mpu6050.c     ****  *
2765:mpu6050.c     ****  * If the FIFO buffer has overflowed, the status bit FIFO_OFLOW_INT is
2766:mpu6050.c     ****  * automatically set to 1. This bit is located in INT_STATUS (Register 58).
2767:mpu6050.c     ****  * When the FIFO buffer has overflowed, the oldest data will be lost and new
2768:mpu6050.c     ****  * data will be written to the FIFO.
2769:mpu6050.c     ****  *
2770:mpu6050.c     ****  * If the FIFO buffer is empty, reading this register will return the last byte
2771:mpu6050.c     ****  * that was previously read from the FIFO until new data is available. The user
2772:mpu6050.c     ****  * should check FIFO_COUNT to ensure that the FIFO buffer is not read when
2773:mpu6050.c     ****  * empty.
2774:mpu6050.c     ****  *
2775:mpu6050.c     ****  * @return Byte from FIFO buffer
2776:mpu6050.c     ****  */
2777:mpu6050.c     **** uint8_t MPU6050_getFIFOByte() {
 9907              		.loc 1 2777 0
 9908              		.cfi_startproc
 9909              		@ args = 0, pretend = 0, frame = 0
 9910              		@ frame_needed = 1, uses_anonymous_args = 0
 9911 0000 80B5     		push	{r7, lr}
 9912              		.cfi_def_cfa_offset 8
 9913              		.cfi_offset 7, -8
 9914              		.cfi_offset 14, -4
 9915 0002 00AF     		add	r7, sp, #0
 9916              		.cfi_def_cfa_register 7
2778:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
 9917              		.loc 1 2778 0
 9918 0004 054B     		ldr	r3, .L753
 9919 0006 1B78     		ldrb	r3, [r3]
 9920 0008 054A     		ldr	r2, .L753+4
 9921 000a 7421     		movs	r1, #116
 9922 000c 1800     		movs	r0, r3
 9923 000e FFF7FEFF 		bl	I2CReadByte
2779:mpu6050.c     ****     return buffer[0];
 9924              		.loc 1 2779 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 224


 9925 0012 034B     		ldr	r3, .L753+4
 9926 0014 1B78     		ldrb	r3, [r3]
2780:mpu6050.c     **** }
 9927              		.loc 1 2780 0
 9928 0016 1800     		movs	r0, r3
 9929 0018 BD46     		mov	sp, r7
 9930              		@ sp needed
 9931 001a 80BD     		pop	{r7, pc}
 9932              	.L754:
 9933              		.align	2
 9934              	.L753:
 9935 001c 00000000 		.word	devAddr
 9936 0020 00000000 		.word	buffer
 9937              		.cfi_endproc
 9938              	.LFE204:
 9939              		.size	MPU6050_getFIFOByte, .-MPU6050_getFIFOByte
 9940              		.section	.text.MPU6050_getFIFOBytes,"ax",%progbits
 9941              		.align	2
 9942              		.global	MPU6050_getFIFOBytes
 9943              		.code	16
 9944              		.thumb_func
 9945              		.type	MPU6050_getFIFOBytes, %function
 9946              	MPU6050_getFIFOBytes:
 9947              	.LFB205:
2781:mpu6050.c     **** void MPU6050_getFIFOBytes(uint8_t *data, uint8_t length) {
 9948              		.loc 1 2781 0
 9949              		.cfi_startproc
 9950              		@ args = 0, pretend = 0, frame = 8
 9951              		@ frame_needed = 1, uses_anonymous_args = 0
 9952 0000 80B5     		push	{r7, lr}
 9953              		.cfi_def_cfa_offset 8
 9954              		.cfi_offset 7, -8
 9955              		.cfi_offset 14, -4
 9956 0002 82B0     		sub	sp, sp, #8
 9957              		.cfi_def_cfa_offset 16
 9958 0004 00AF     		add	r7, sp, #0
 9959              		.cfi_def_cfa_register 7
 9960 0006 7860     		str	r0, [r7, #4]
 9961 0008 0A00     		movs	r2, r1
 9962 000a FB1C     		adds	r3, r7, #3
 9963 000c 1A70     		strb	r2, [r3]
2782:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 9964              		.loc 1 2782 0
 9965 000e 064B     		ldr	r3, .L756
 9966 0010 1878     		ldrb	r0, [r3]
 9967 0012 7968     		ldr	r1, [r7, #4]
 9968 0014 FB1C     		adds	r3, r7, #3
 9969 0016 1A78     		ldrb	r2, [r3]
 9970 0018 0B00     		movs	r3, r1
 9971 001a 7421     		movs	r1, #116
 9972 001c FFF7FEFF 		bl	I2CReadBytes
2783:mpu6050.c     **** }
 9973              		.loc 1 2783 0
 9974 0020 C046     		nop
 9975 0022 BD46     		mov	sp, r7
 9976 0024 02B0     		add	sp, sp, #8
 9977              		@ sp needed
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 225


 9978 0026 80BD     		pop	{r7, pc}
 9979              	.L757:
 9980              		.align	2
 9981              	.L756:
 9982 0028 00000000 		.word	devAddr
 9983              		.cfi_endproc
 9984              	.LFE205:
 9985              		.size	MPU6050_getFIFOBytes, .-MPU6050_getFIFOBytes
 9986              		.section	.text.MPU6050_setFIFOByte,"ax",%progbits
 9987              		.align	2
 9988              		.global	MPU6050_setFIFOByte
 9989              		.code	16
 9990              		.thumb_func
 9991              		.type	MPU6050_setFIFOByte, %function
 9992              	MPU6050_setFIFOByte:
 9993              	.LFB206:
2784:mpu6050.c     **** /** Write byte to FIFO buffer.
2785:mpu6050.c     ****  * @see getFIFOByte()
2786:mpu6050.c     ****  * @see MPU6050_RA_FIFO_R_W
2787:mpu6050.c     ****  */
2788:mpu6050.c     **** void MPU6050_setFIFOByte(uint8_t data) {
 9994              		.loc 1 2788 0
 9995              		.cfi_startproc
 9996              		@ args = 0, pretend = 0, frame = 8
 9997              		@ frame_needed = 1, uses_anonymous_args = 0
 9998 0000 80B5     		push	{r7, lr}
 9999              		.cfi_def_cfa_offset 8
 10000              		.cfi_offset 7, -8
 10001              		.cfi_offset 14, -4
 10002 0002 82B0     		sub	sp, sp, #8
 10003              		.cfi_def_cfa_offset 16
 10004 0004 00AF     		add	r7, sp, #0
 10005              		.cfi_def_cfa_register 7
 10006 0006 0200     		movs	r2, r0
 10007 0008 FB1D     		adds	r3, r7, #7
 10008 000a 1A70     		strb	r2, [r3]
2789:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_FIFO_R_W, data);
 10009              		.loc 1 2789 0
 10010 000c 054B     		ldr	r3, .L759
 10011 000e 1878     		ldrb	r0, [r3]
 10012 0010 FB1D     		adds	r3, r7, #7
 10013 0012 1B78     		ldrb	r3, [r3]
 10014 0014 1A00     		movs	r2, r3
 10015 0016 7421     		movs	r1, #116
 10016 0018 FFF7FEFF 		bl	I2CWriteByte
2790:mpu6050.c     **** }
 10017              		.loc 1 2790 0
 10018 001c C046     		nop
 10019 001e BD46     		mov	sp, r7
 10020 0020 02B0     		add	sp, sp, #8
 10021              		@ sp needed
 10022 0022 80BD     		pop	{r7, pc}
 10023              	.L760:
 10024              		.align	2
 10025              	.L759:
 10026 0024 00000000 		.word	devAddr
 10027              		.cfi_endproc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 226


 10028              	.LFE206:
 10029              		.size	MPU6050_setFIFOByte, .-MPU6050_setFIFOByte
 10030              		.section	.text.MPU6050_getDeviceID,"ax",%progbits
 10031              		.align	2
 10032              		.global	MPU6050_getDeviceID
 10033              		.code	16
 10034              		.thumb_func
 10035              		.type	MPU6050_getDeviceID, %function
 10036              	MPU6050_getDeviceID:
 10037              	.LFB207:
2791:mpu6050.c     **** 
2792:mpu6050.c     **** // WHO_AM_I register
2793:mpu6050.c     **** 
2794:mpu6050.c     **** /** Get Device ID.
2795:mpu6050.c     ****  * This register is used to verify the identity of the device (0b110100, 0x34).
2796:mpu6050.c     ****  * @return Device ID (6 bits only! should be 0x34)
2797:mpu6050.c     ****  * @see MPU6050_RA_WHO_AM_I
2798:mpu6050.c     ****  * @see MPU6050_WHO_AM_I_BIT
2799:mpu6050.c     ****  * @see MPU6050_WHO_AM_I_LENGTH
2800:mpu6050.c     ****  */
2801:mpu6050.c     **** uint8_t MPU6050_getDeviceID() {
 10038              		.loc 1 2801 0
 10039              		.cfi_startproc
 10040              		@ args = 0, pretend = 0, frame = 0
 10041              		@ frame_needed = 1, uses_anonymous_args = 0
 10042 0000 80B5     		push	{r7, lr}
 10043              		.cfi_def_cfa_offset 8
 10044              		.cfi_offset 7, -8
 10045              		.cfi_offset 14, -4
 10046 0002 82B0     		sub	sp, sp, #8
 10047              		.cfi_def_cfa_offset 16
 10048 0004 02AF     		add	r7, sp, #8
 10049              		.cfi_def_cfa 7, 8
2802:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer
 10050              		.loc 1 2802 0
 10051 0006 074B     		ldr	r3, .L763
 10052 0008 1878     		ldrb	r0, [r3]
 10053 000a 074B     		ldr	r3, .L763+4
 10054 000c 0093     		str	r3, [sp]
 10055 000e 0623     		movs	r3, #6
 10056 0010 0622     		movs	r2, #6
 10057 0012 7521     		movs	r1, #117
 10058 0014 FFF7FEFF 		bl	I2CReadBits
2803:mpu6050.c     ****     return buffer[0];
 10059              		.loc 1 2803 0
 10060 0018 034B     		ldr	r3, .L763+4
 10061 001a 1B78     		ldrb	r3, [r3]
2804:mpu6050.c     **** }
 10062              		.loc 1 2804 0
 10063 001c 1800     		movs	r0, r3
 10064 001e BD46     		mov	sp, r7
 10065              		@ sp needed
 10066 0020 80BD     		pop	{r7, pc}
 10067              	.L764:
 10068 0022 C046     		.align	2
 10069              	.L763:
 10070 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 227


 10071 0028 00000000 		.word	buffer
 10072              		.cfi_endproc
 10073              	.LFE207:
 10074              		.size	MPU6050_getDeviceID, .-MPU6050_getDeviceID
 10075              		.section	.text.MPU6050_setDeviceID,"ax",%progbits
 10076              		.align	2
 10077              		.global	MPU6050_setDeviceID
 10078              		.code	16
 10079              		.thumb_func
 10080              		.type	MPU6050_setDeviceID, %function
 10081              	MPU6050_setDeviceID:
 10082              	.LFB208:
2805:mpu6050.c     **** /** Set Device ID.
2806:mpu6050.c     ****  * Write a new ID into the WHO_AM_I register (no idea why this should ever be
2807:mpu6050.c     ****  * necessary though).
2808:mpu6050.c     ****  * @param id New device ID to set.
2809:mpu6050.c     ****  * @see getDeviceID()
2810:mpu6050.c     ****  * @see MPU6050_RA_WHO_AM_I
2811:mpu6050.c     ****  * @see MPU6050_WHO_AM_I_BIT
2812:mpu6050.c     ****  * @see MPU6050_WHO_AM_I_LENGTH
2813:mpu6050.c     ****  */
2814:mpu6050.c     **** void MPU6050_setDeviceID(uint8_t id) {
 10083              		.loc 1 2814 0
 10084              		.cfi_startproc
 10085              		@ args = 0, pretend = 0, frame = 8
 10086              		@ frame_needed = 1, uses_anonymous_args = 0
 10087 0000 80B5     		push	{r7, lr}
 10088              		.cfi_def_cfa_offset 8
 10089              		.cfi_offset 7, -8
 10090              		.cfi_offset 14, -4
 10091 0002 84B0     		sub	sp, sp, #16
 10092              		.cfi_def_cfa_offset 24
 10093 0004 02AF     		add	r7, sp, #8
 10094              		.cfi_def_cfa 7, 16
 10095 0006 0200     		movs	r2, r0
 10096 0008 FB1D     		adds	r3, r7, #7
 10097 000a 1A70     		strb	r2, [r3]
2815:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, id);
 10098              		.loc 1 2815 0
 10099 000c 064B     		ldr	r3, .L766
 10100 000e 1878     		ldrb	r0, [r3]
 10101 0010 FB1D     		adds	r3, r7, #7
 10102 0012 1B78     		ldrb	r3, [r3]
 10103 0014 0093     		str	r3, [sp]
 10104 0016 0623     		movs	r3, #6
 10105 0018 0622     		movs	r2, #6
 10106 001a 7521     		movs	r1, #117
 10107 001c FFF7FEFF 		bl	I2CWriteBits
2816:mpu6050.c     **** }
 10108              		.loc 1 2816 0
 10109 0020 C046     		nop
 10110 0022 BD46     		mov	sp, r7
 10111 0024 02B0     		add	sp, sp, #8
 10112              		@ sp needed
 10113 0026 80BD     		pop	{r7, pc}
 10114              	.L767:
 10115              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 228


 10116              	.L766:
 10117 0028 00000000 		.word	devAddr
 10118              		.cfi_endproc
 10119              	.LFE208:
 10120              		.size	MPU6050_setDeviceID, .-MPU6050_setDeviceID
 10121              		.section	.text.MPU6050_getOTPBankValid,"ax",%progbits
 10122              		.align	2
 10123              		.global	MPU6050_getOTPBankValid
 10124              		.code	16
 10125              		.thumb_func
 10126              		.type	MPU6050_getOTPBankValid, %function
 10127              	MPU6050_getOTPBankValid:
 10128              	.LFB209:
2817:mpu6050.c     **** 
2818:mpu6050.c     **** // ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========
2819:mpu6050.c     **** 
2820:mpu6050.c     **** // XG_OFFS_TC register
2821:mpu6050.c     **** 
2822:mpu6050.c     **** uint8_t MPU6050_getOTPBankValid() {
 10129              		.loc 1 2822 0
 10130              		.cfi_startproc
 10131              		@ args = 0, pretend = 0, frame = 0
 10132              		@ frame_needed = 1, uses_anonymous_args = 0
 10133 0000 80B5     		push	{r7, lr}
 10134              		.cfi_def_cfa_offset 8
 10135              		.cfi_offset 7, -8
 10136              		.cfi_offset 14, -4
 10137 0002 00AF     		add	r7, sp, #0
 10138              		.cfi_def_cfa_register 7
2823:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 10139              		.loc 1 2823 0
 10140 0004 054B     		ldr	r3, .L770
 10141 0006 1878     		ldrb	r0, [r3]
 10142 0008 054B     		ldr	r3, .L770+4
 10143 000a 0022     		movs	r2, #0
 10144 000c 0021     		movs	r1, #0
 10145 000e FFF7FEFF 		bl	I2CReadBit
2824:mpu6050.c     ****     return buffer[0];
 10146              		.loc 1 2824 0
 10147 0012 034B     		ldr	r3, .L770+4
 10148 0014 1B78     		ldrb	r3, [r3]
2825:mpu6050.c     **** }
 10149              		.loc 1 2825 0
 10150 0016 1800     		movs	r0, r3
 10151 0018 BD46     		mov	sp, r7
 10152              		@ sp needed
 10153 001a 80BD     		pop	{r7, pc}
 10154              	.L771:
 10155              		.align	2
 10156              	.L770:
 10157 001c 00000000 		.word	devAddr
 10158 0020 00000000 		.word	buffer
 10159              		.cfi_endproc
 10160              	.LFE209:
 10161              		.size	MPU6050_getOTPBankValid, .-MPU6050_getOTPBankValid
 10162              		.section	.text.MPU6050_setOTPBankValid,"ax",%progbits
 10163              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 229


 10164              		.global	MPU6050_setOTPBankValid
 10165              		.code	16
 10166              		.thumb_func
 10167              		.type	MPU6050_setOTPBankValid, %function
 10168              	MPU6050_setOTPBankValid:
 10169              	.LFB210:
2826:mpu6050.c     **** void MPU6050_setOTPBankValid(bool enabled) {
 10170              		.loc 1 2826 0
 10171              		.cfi_startproc
 10172              		@ args = 0, pretend = 0, frame = 8
 10173              		@ frame_needed = 1, uses_anonymous_args = 0
 10174 0000 80B5     		push	{r7, lr}
 10175              		.cfi_def_cfa_offset 8
 10176              		.cfi_offset 7, -8
 10177              		.cfi_offset 14, -4
 10178 0002 82B0     		sub	sp, sp, #8
 10179              		.cfi_def_cfa_offset 16
 10180 0004 00AF     		add	r7, sp, #0
 10181              		.cfi_def_cfa_register 7
 10182 0006 0200     		movs	r2, r0
 10183 0008 FB1D     		adds	r3, r7, #7
 10184 000a 1A70     		strb	r2, [r3]
2827:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 10185              		.loc 1 2827 0
 10186 000c 054B     		ldr	r3, .L773
 10187 000e 1878     		ldrb	r0, [r3]
 10188 0010 FB1D     		adds	r3, r7, #7
 10189 0012 1B78     		ldrb	r3, [r3]
 10190 0014 0022     		movs	r2, #0
 10191 0016 0021     		movs	r1, #0
 10192 0018 FFF7FEFF 		bl	I2CWriteBit
2828:mpu6050.c     **** }
 10193              		.loc 1 2828 0
 10194 001c C046     		nop
 10195 001e BD46     		mov	sp, r7
 10196 0020 02B0     		add	sp, sp, #8
 10197              		@ sp needed
 10198 0022 80BD     		pop	{r7, pc}
 10199              	.L774:
 10200              		.align	2
 10201              	.L773:
 10202 0024 00000000 		.word	devAddr
 10203              		.cfi_endproc
 10204              	.LFE210:
 10205              		.size	MPU6050_setOTPBankValid, .-MPU6050_setOTPBankValid
 10206              		.section	.text.MPU6050_getXGyroOffset,"ax",%progbits
 10207              		.align	2
 10208              		.global	MPU6050_getXGyroOffset
 10209              		.code	16
 10210              		.thumb_func
 10211              		.type	MPU6050_getXGyroOffset, %function
 10212              	MPU6050_getXGyroOffset:
 10213              	.LFB211:
2829:mpu6050.c     **** int8_t MPU6050_getXGyroOffset() {
 10214              		.loc 1 2829 0
 10215              		.cfi_startproc
 10216              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 230


 10217              		@ frame_needed = 1, uses_anonymous_args = 0
 10218 0000 80B5     		push	{r7, lr}
 10219              		.cfi_def_cfa_offset 8
 10220              		.cfi_offset 7, -8
 10221              		.cfi_offset 14, -4
 10222 0002 82B0     		sub	sp, sp, #8
 10223              		.cfi_def_cfa_offset 16
 10224 0004 02AF     		add	r7, sp, #8
 10225              		.cfi_def_cfa 7, 8
2830:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 10226              		.loc 1 2830 0
 10227 0006 074B     		ldr	r3, .L777
 10228 0008 1878     		ldrb	r0, [r3]
 10229 000a 074B     		ldr	r3, .L777+4
 10230 000c 0093     		str	r3, [sp]
 10231 000e 0623     		movs	r3, #6
 10232 0010 0622     		movs	r2, #6
 10233 0012 0021     		movs	r1, #0
 10234 0014 FFF7FEFF 		bl	I2CReadBits
2831:mpu6050.c     ****     return buffer[0];
 10235              		.loc 1 2831 0
 10236 0018 034B     		ldr	r3, .L777+4
 10237 001a 1B78     		ldrb	r3, [r3]
 10238 001c 5BB2     		sxtb	r3, r3
2832:mpu6050.c     **** }
 10239              		.loc 1 2832 0
 10240 001e 1800     		movs	r0, r3
 10241 0020 BD46     		mov	sp, r7
 10242              		@ sp needed
 10243 0022 80BD     		pop	{r7, pc}
 10244              	.L778:
 10245              		.align	2
 10246              	.L777:
 10247 0024 00000000 		.word	devAddr
 10248 0028 00000000 		.word	buffer
 10249              		.cfi_endproc
 10250              	.LFE211:
 10251              		.size	MPU6050_getXGyroOffset, .-MPU6050_getXGyroOffset
 10252              		.section	.text.MPU6050_setXGyroOffset,"ax",%progbits
 10253              		.align	2
 10254              		.global	MPU6050_setXGyroOffset
 10255              		.code	16
 10256              		.thumb_func
 10257              		.type	MPU6050_setXGyroOffset, %function
 10258              	MPU6050_setXGyroOffset:
 10259              	.LFB212:
2833:mpu6050.c     **** void MPU6050_setXGyroOffset(int8_t offset) {
 10260              		.loc 1 2833 0
 10261              		.cfi_startproc
 10262              		@ args = 0, pretend = 0, frame = 8
 10263              		@ frame_needed = 1, uses_anonymous_args = 0
 10264 0000 80B5     		push	{r7, lr}
 10265              		.cfi_def_cfa_offset 8
 10266              		.cfi_offset 7, -8
 10267              		.cfi_offset 14, -4
 10268 0002 84B0     		sub	sp, sp, #16
 10269              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 231


 10270 0004 02AF     		add	r7, sp, #8
 10271              		.cfi_def_cfa 7, 16
 10272 0006 0200     		movs	r2, r0
 10273 0008 FB1D     		adds	r3, r7, #7
 10274 000a 1A70     		strb	r2, [r3]
2834:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 10275              		.loc 1 2834 0
 10276 000c 064B     		ldr	r3, .L780
 10277 000e 1878     		ldrb	r0, [r3]
 10278 0010 FB1D     		adds	r3, r7, #7
 10279 0012 1B78     		ldrb	r3, [r3]
 10280 0014 0093     		str	r3, [sp]
 10281 0016 0623     		movs	r3, #6
 10282 0018 0622     		movs	r2, #6
 10283 001a 0021     		movs	r1, #0
 10284 001c FFF7FEFF 		bl	I2CWriteBits
2835:mpu6050.c     **** }
 10285              		.loc 1 2835 0
 10286 0020 C046     		nop
 10287 0022 BD46     		mov	sp, r7
 10288 0024 02B0     		add	sp, sp, #8
 10289              		@ sp needed
 10290 0026 80BD     		pop	{r7, pc}
 10291              	.L781:
 10292              		.align	2
 10293              	.L780:
 10294 0028 00000000 		.word	devAddr
 10295              		.cfi_endproc
 10296              	.LFE212:
 10297              		.size	MPU6050_setXGyroOffset, .-MPU6050_setXGyroOffset
 10298              		.section	.text.MPU6050_getYGyroOffset,"ax",%progbits
 10299              		.align	2
 10300              		.global	MPU6050_getYGyroOffset
 10301              		.code	16
 10302              		.thumb_func
 10303              		.type	MPU6050_getYGyroOffset, %function
 10304              	MPU6050_getYGyroOffset:
 10305              	.LFB213:
2836:mpu6050.c     **** 
2837:mpu6050.c     **** // YG_OFFS_TC register
2838:mpu6050.c     **** 
2839:mpu6050.c     **** int8_t MPU6050_getYGyroOffset() {
 10306              		.loc 1 2839 0
 10307              		.cfi_startproc
 10308              		@ args = 0, pretend = 0, frame = 0
 10309              		@ frame_needed = 1, uses_anonymous_args = 0
 10310 0000 80B5     		push	{r7, lr}
 10311              		.cfi_def_cfa_offset 8
 10312              		.cfi_offset 7, -8
 10313              		.cfi_offset 14, -4
 10314 0002 82B0     		sub	sp, sp, #8
 10315              		.cfi_def_cfa_offset 16
 10316 0004 02AF     		add	r7, sp, #8
 10317              		.cfi_def_cfa 7, 8
2840:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 10318              		.loc 1 2840 0
 10319 0006 074B     		ldr	r3, .L784
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 232


 10320 0008 1878     		ldrb	r0, [r3]
 10321 000a 074B     		ldr	r3, .L784+4
 10322 000c 0093     		str	r3, [sp]
 10323 000e 0623     		movs	r3, #6
 10324 0010 0622     		movs	r2, #6
 10325 0012 0121     		movs	r1, #1
 10326 0014 FFF7FEFF 		bl	I2CReadBits
2841:mpu6050.c     ****     return buffer[0];
 10327              		.loc 1 2841 0
 10328 0018 034B     		ldr	r3, .L784+4
 10329 001a 1B78     		ldrb	r3, [r3]
 10330 001c 5BB2     		sxtb	r3, r3
2842:mpu6050.c     **** }
 10331              		.loc 1 2842 0
 10332 001e 1800     		movs	r0, r3
 10333 0020 BD46     		mov	sp, r7
 10334              		@ sp needed
 10335 0022 80BD     		pop	{r7, pc}
 10336              	.L785:
 10337              		.align	2
 10338              	.L784:
 10339 0024 00000000 		.word	devAddr
 10340 0028 00000000 		.word	buffer
 10341              		.cfi_endproc
 10342              	.LFE213:
 10343              		.size	MPU6050_getYGyroOffset, .-MPU6050_getYGyroOffset
 10344              		.section	.text.MPU6050_setYGyroOffset,"ax",%progbits
 10345              		.align	2
 10346              		.global	MPU6050_setYGyroOffset
 10347              		.code	16
 10348              		.thumb_func
 10349              		.type	MPU6050_setYGyroOffset, %function
 10350              	MPU6050_setYGyroOffset:
 10351              	.LFB214:
2843:mpu6050.c     **** void MPU6050_setYGyroOffset(int8_t offset) {
 10352              		.loc 1 2843 0
 10353              		.cfi_startproc
 10354              		@ args = 0, pretend = 0, frame = 8
 10355              		@ frame_needed = 1, uses_anonymous_args = 0
 10356 0000 80B5     		push	{r7, lr}
 10357              		.cfi_def_cfa_offset 8
 10358              		.cfi_offset 7, -8
 10359              		.cfi_offset 14, -4
 10360 0002 84B0     		sub	sp, sp, #16
 10361              		.cfi_def_cfa_offset 24
 10362 0004 02AF     		add	r7, sp, #8
 10363              		.cfi_def_cfa 7, 16
 10364 0006 0200     		movs	r2, r0
 10365 0008 FB1D     		adds	r3, r7, #7
 10366 000a 1A70     		strb	r2, [r3]
2844:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 10367              		.loc 1 2844 0
 10368 000c 064B     		ldr	r3, .L787
 10369 000e 1878     		ldrb	r0, [r3]
 10370 0010 FB1D     		adds	r3, r7, #7
 10371 0012 1B78     		ldrb	r3, [r3]
 10372 0014 0093     		str	r3, [sp]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 233


 10373 0016 0623     		movs	r3, #6
 10374 0018 0622     		movs	r2, #6
 10375 001a 0121     		movs	r1, #1
 10376 001c FFF7FEFF 		bl	I2CWriteBits
2845:mpu6050.c     **** }
 10377              		.loc 1 2845 0
 10378 0020 C046     		nop
 10379 0022 BD46     		mov	sp, r7
 10380 0024 02B0     		add	sp, sp, #8
 10381              		@ sp needed
 10382 0026 80BD     		pop	{r7, pc}
 10383              	.L788:
 10384              		.align	2
 10385              	.L787:
 10386 0028 00000000 		.word	devAddr
 10387              		.cfi_endproc
 10388              	.LFE214:
 10389              		.size	MPU6050_setYGyroOffset, .-MPU6050_setYGyroOffset
 10390              		.section	.text.MPU6050_getZGyroOffset,"ax",%progbits
 10391              		.align	2
 10392              		.global	MPU6050_getZGyroOffset
 10393              		.code	16
 10394              		.thumb_func
 10395              		.type	MPU6050_getZGyroOffset, %function
 10396              	MPU6050_getZGyroOffset:
 10397              	.LFB215:
2846:mpu6050.c     **** 
2847:mpu6050.c     **** // ZG_OFFS_TC register
2848:mpu6050.c     **** 
2849:mpu6050.c     **** int8_t MPU6050_getZGyroOffset() {
 10398              		.loc 1 2849 0
 10399              		.cfi_startproc
 10400              		@ args = 0, pretend = 0, frame = 0
 10401              		@ frame_needed = 1, uses_anonymous_args = 0
 10402 0000 80B5     		push	{r7, lr}
 10403              		.cfi_def_cfa_offset 8
 10404              		.cfi_offset 7, -8
 10405              		.cfi_offset 14, -4
 10406 0002 82B0     		sub	sp, sp, #8
 10407              		.cfi_def_cfa_offset 16
 10408 0004 02AF     		add	r7, sp, #8
 10409              		.cfi_def_cfa 7, 8
2850:mpu6050.c     ****     I2CReadBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 10410              		.loc 1 2850 0
 10411 0006 074B     		ldr	r3, .L791
 10412 0008 1878     		ldrb	r0, [r3]
 10413 000a 074B     		ldr	r3, .L791+4
 10414 000c 0093     		str	r3, [sp]
 10415 000e 0623     		movs	r3, #6
 10416 0010 0622     		movs	r2, #6
 10417 0012 0221     		movs	r1, #2
 10418 0014 FFF7FEFF 		bl	I2CReadBits
2851:mpu6050.c     ****     return buffer[0];
 10419              		.loc 1 2851 0
 10420 0018 034B     		ldr	r3, .L791+4
 10421 001a 1B78     		ldrb	r3, [r3]
 10422 001c 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 234


2852:mpu6050.c     **** }
 10423              		.loc 1 2852 0
 10424 001e 1800     		movs	r0, r3
 10425 0020 BD46     		mov	sp, r7
 10426              		@ sp needed
 10427 0022 80BD     		pop	{r7, pc}
 10428              	.L792:
 10429              		.align	2
 10430              	.L791:
 10431 0024 00000000 		.word	devAddr
 10432 0028 00000000 		.word	buffer
 10433              		.cfi_endproc
 10434              	.LFE215:
 10435              		.size	MPU6050_getZGyroOffset, .-MPU6050_getZGyroOffset
 10436              		.section	.text.MPU6050_setZGyroOffset,"ax",%progbits
 10437              		.align	2
 10438              		.global	MPU6050_setZGyroOffset
 10439              		.code	16
 10440              		.thumb_func
 10441              		.type	MPU6050_setZGyroOffset, %function
 10442              	MPU6050_setZGyroOffset:
 10443              	.LFB216:
2853:mpu6050.c     **** void MPU6050_setZGyroOffset(int8_t offset) {
 10444              		.loc 1 2853 0
 10445              		.cfi_startproc
 10446              		@ args = 0, pretend = 0, frame = 8
 10447              		@ frame_needed = 1, uses_anonymous_args = 0
 10448 0000 80B5     		push	{r7, lr}
 10449              		.cfi_def_cfa_offset 8
 10450              		.cfi_offset 7, -8
 10451              		.cfi_offset 14, -4
 10452 0002 84B0     		sub	sp, sp, #16
 10453              		.cfi_def_cfa_offset 24
 10454 0004 02AF     		add	r7, sp, #8
 10455              		.cfi_def_cfa 7, 16
 10456 0006 0200     		movs	r2, r0
 10457 0008 FB1D     		adds	r3, r7, #7
 10458 000a 1A70     		strb	r2, [r3]
2854:mpu6050.c     ****     I2CWriteBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 10459              		.loc 1 2854 0
 10460 000c 064B     		ldr	r3, .L794
 10461 000e 1878     		ldrb	r0, [r3]
 10462 0010 FB1D     		adds	r3, r7, #7
 10463 0012 1B78     		ldrb	r3, [r3]
 10464 0014 0093     		str	r3, [sp]
 10465 0016 0623     		movs	r3, #6
 10466 0018 0622     		movs	r2, #6
 10467 001a 0221     		movs	r1, #2
 10468 001c FFF7FEFF 		bl	I2CWriteBits
2855:mpu6050.c     **** }
 10469              		.loc 1 2855 0
 10470 0020 C046     		nop
 10471 0022 BD46     		mov	sp, r7
 10472 0024 02B0     		add	sp, sp, #8
 10473              		@ sp needed
 10474 0026 80BD     		pop	{r7, pc}
 10475              	.L795:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 235


 10476              		.align	2
 10477              	.L794:
 10478 0028 00000000 		.word	devAddr
 10479              		.cfi_endproc
 10480              	.LFE216:
 10481              		.size	MPU6050_setZGyroOffset, .-MPU6050_setZGyroOffset
 10482              		.section	.text.MPU6050_getXFineGain,"ax",%progbits
 10483              		.align	2
 10484              		.global	MPU6050_getXFineGain
 10485              		.code	16
 10486              		.thumb_func
 10487              		.type	MPU6050_getXFineGain, %function
 10488              	MPU6050_getXFineGain:
 10489              	.LFB217:
2856:mpu6050.c     **** 
2857:mpu6050.c     **** // X_FINE_GAIN register
2858:mpu6050.c     **** 
2859:mpu6050.c     **** int8_t MPU6050_getXFineGain() {
 10490              		.loc 1 2859 0
 10491              		.cfi_startproc
 10492              		@ args = 0, pretend = 0, frame = 0
 10493              		@ frame_needed = 1, uses_anonymous_args = 0
 10494 0000 80B5     		push	{r7, lr}
 10495              		.cfi_def_cfa_offset 8
 10496              		.cfi_offset 7, -8
 10497              		.cfi_offset 14, -4
 10498 0002 00AF     		add	r7, sp, #0
 10499              		.cfi_def_cfa_register 7
2860:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_X_FINE_GAIN, buffer);
 10500              		.loc 1 2860 0
 10501 0004 064B     		ldr	r3, .L798
 10502 0006 1B78     		ldrb	r3, [r3]
 10503 0008 064A     		ldr	r2, .L798+4
 10504 000a 0321     		movs	r1, #3
 10505 000c 1800     		movs	r0, r3
 10506 000e FFF7FEFF 		bl	I2CReadByte
2861:mpu6050.c     ****     return buffer[0];
 10507              		.loc 1 2861 0
 10508 0012 044B     		ldr	r3, .L798+4
 10509 0014 1B78     		ldrb	r3, [r3]
 10510 0016 5BB2     		sxtb	r3, r3
2862:mpu6050.c     **** }
 10511              		.loc 1 2862 0
 10512 0018 1800     		movs	r0, r3
 10513 001a BD46     		mov	sp, r7
 10514              		@ sp needed
 10515 001c 80BD     		pop	{r7, pc}
 10516              	.L799:
 10517 001e C046     		.align	2
 10518              	.L798:
 10519 0020 00000000 		.word	devAddr
 10520 0024 00000000 		.word	buffer
 10521              		.cfi_endproc
 10522              	.LFE217:
 10523              		.size	MPU6050_getXFineGain, .-MPU6050_getXFineGain
 10524              		.section	.text.MPU6050_setXFineGain,"ax",%progbits
 10525              		.align	2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 236


 10526              		.global	MPU6050_setXFineGain
 10527              		.code	16
 10528              		.thumb_func
 10529              		.type	MPU6050_setXFineGain, %function
 10530              	MPU6050_setXFineGain:
 10531              	.LFB218:
2863:mpu6050.c     **** void MPU6050_setXFineGain(int8_t gain) {
 10532              		.loc 1 2863 0
 10533              		.cfi_startproc
 10534              		@ args = 0, pretend = 0, frame = 8
 10535              		@ frame_needed = 1, uses_anonymous_args = 0
 10536 0000 80B5     		push	{r7, lr}
 10537              		.cfi_def_cfa_offset 8
 10538              		.cfi_offset 7, -8
 10539              		.cfi_offset 14, -4
 10540 0002 82B0     		sub	sp, sp, #8
 10541              		.cfi_def_cfa_offset 16
 10542 0004 00AF     		add	r7, sp, #0
 10543              		.cfi_def_cfa_register 7
 10544 0006 0200     		movs	r2, r0
 10545 0008 FB1D     		adds	r3, r7, #7
 10546 000a 1A70     		strb	r2, [r3]
2864:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_X_FINE_GAIN, gain);
 10547              		.loc 1 2864 0
 10548 000c 054B     		ldr	r3, .L801
 10549 000e 1878     		ldrb	r0, [r3]
 10550 0010 FB1D     		adds	r3, r7, #7
 10551 0012 1B78     		ldrb	r3, [r3]
 10552 0014 1A00     		movs	r2, r3
 10553 0016 0321     		movs	r1, #3
 10554 0018 FFF7FEFF 		bl	I2CWriteByte
2865:mpu6050.c     **** }
 10555              		.loc 1 2865 0
 10556 001c C046     		nop
 10557 001e BD46     		mov	sp, r7
 10558 0020 02B0     		add	sp, sp, #8
 10559              		@ sp needed
 10560 0022 80BD     		pop	{r7, pc}
 10561              	.L802:
 10562              		.align	2
 10563              	.L801:
 10564 0024 00000000 		.word	devAddr
 10565              		.cfi_endproc
 10566              	.LFE218:
 10567              		.size	MPU6050_setXFineGain, .-MPU6050_setXFineGain
 10568              		.section	.text.MPU6050_getYFineGain,"ax",%progbits
 10569              		.align	2
 10570              		.global	MPU6050_getYFineGain
 10571              		.code	16
 10572              		.thumb_func
 10573              		.type	MPU6050_getYFineGain, %function
 10574              	MPU6050_getYFineGain:
 10575              	.LFB219:
2866:mpu6050.c     **** 
2867:mpu6050.c     **** // Y_FINE_GAIN register
2868:mpu6050.c     **** 
2869:mpu6050.c     **** int8_t MPU6050_getYFineGain() {
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 237


 10576              		.loc 1 2869 0
 10577              		.cfi_startproc
 10578              		@ args = 0, pretend = 0, frame = 0
 10579              		@ frame_needed = 1, uses_anonymous_args = 0
 10580 0000 80B5     		push	{r7, lr}
 10581              		.cfi_def_cfa_offset 8
 10582              		.cfi_offset 7, -8
 10583              		.cfi_offset 14, -4
 10584 0002 00AF     		add	r7, sp, #0
 10585              		.cfi_def_cfa_register 7
2870:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_Y_FINE_GAIN, buffer);
 10586              		.loc 1 2870 0
 10587 0004 064B     		ldr	r3, .L805
 10588 0006 1B78     		ldrb	r3, [r3]
 10589 0008 064A     		ldr	r2, .L805+4
 10590 000a 0421     		movs	r1, #4
 10591 000c 1800     		movs	r0, r3
 10592 000e FFF7FEFF 		bl	I2CReadByte
2871:mpu6050.c     ****     return buffer[0];
 10593              		.loc 1 2871 0
 10594 0012 044B     		ldr	r3, .L805+4
 10595 0014 1B78     		ldrb	r3, [r3]
 10596 0016 5BB2     		sxtb	r3, r3
2872:mpu6050.c     **** }
 10597              		.loc 1 2872 0
 10598 0018 1800     		movs	r0, r3
 10599 001a BD46     		mov	sp, r7
 10600              		@ sp needed
 10601 001c 80BD     		pop	{r7, pc}
 10602              	.L806:
 10603 001e C046     		.align	2
 10604              	.L805:
 10605 0020 00000000 		.word	devAddr
 10606 0024 00000000 		.word	buffer
 10607              		.cfi_endproc
 10608              	.LFE219:
 10609              		.size	MPU6050_getYFineGain, .-MPU6050_getYFineGain
 10610              		.section	.text.MPU6050_setYFineGain,"ax",%progbits
 10611              		.align	2
 10612              		.global	MPU6050_setYFineGain
 10613              		.code	16
 10614              		.thumb_func
 10615              		.type	MPU6050_setYFineGain, %function
 10616              	MPU6050_setYFineGain:
 10617              	.LFB220:
2873:mpu6050.c     **** void MPU6050_setYFineGain(int8_t gain) {
 10618              		.loc 1 2873 0
 10619              		.cfi_startproc
 10620              		@ args = 0, pretend = 0, frame = 8
 10621              		@ frame_needed = 1, uses_anonymous_args = 0
 10622 0000 80B5     		push	{r7, lr}
 10623              		.cfi_def_cfa_offset 8
 10624              		.cfi_offset 7, -8
 10625              		.cfi_offset 14, -4
 10626 0002 82B0     		sub	sp, sp, #8
 10627              		.cfi_def_cfa_offset 16
 10628 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 238


 10629              		.cfi_def_cfa_register 7
 10630 0006 0200     		movs	r2, r0
 10631 0008 FB1D     		adds	r3, r7, #7
 10632 000a 1A70     		strb	r2, [r3]
2874:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_Y_FINE_GAIN, gain);
 10633              		.loc 1 2874 0
 10634 000c 054B     		ldr	r3, .L808
 10635 000e 1878     		ldrb	r0, [r3]
 10636 0010 FB1D     		adds	r3, r7, #7
 10637 0012 1B78     		ldrb	r3, [r3]
 10638 0014 1A00     		movs	r2, r3
 10639 0016 0421     		movs	r1, #4
 10640 0018 FFF7FEFF 		bl	I2CWriteByte
2875:mpu6050.c     **** }
 10641              		.loc 1 2875 0
 10642 001c C046     		nop
 10643 001e BD46     		mov	sp, r7
 10644 0020 02B0     		add	sp, sp, #8
 10645              		@ sp needed
 10646 0022 80BD     		pop	{r7, pc}
 10647              	.L809:
 10648              		.align	2
 10649              	.L808:
 10650 0024 00000000 		.word	devAddr
 10651              		.cfi_endproc
 10652              	.LFE220:
 10653              		.size	MPU6050_setYFineGain, .-MPU6050_setYFineGain
 10654              		.section	.text.MPU6050_getZFineGain,"ax",%progbits
 10655              		.align	2
 10656              		.global	MPU6050_getZFineGain
 10657              		.code	16
 10658              		.thumb_func
 10659              		.type	MPU6050_getZFineGain, %function
 10660              	MPU6050_getZFineGain:
 10661              	.LFB221:
2876:mpu6050.c     **** 
2877:mpu6050.c     **** // Z_FINE_GAIN register
2878:mpu6050.c     **** 
2879:mpu6050.c     **** int8_t MPU6050_getZFineGain() {
 10662              		.loc 1 2879 0
 10663              		.cfi_startproc
 10664              		@ args = 0, pretend = 0, frame = 0
 10665              		@ frame_needed = 1, uses_anonymous_args = 0
 10666 0000 80B5     		push	{r7, lr}
 10667              		.cfi_def_cfa_offset 8
 10668              		.cfi_offset 7, -8
 10669              		.cfi_offset 14, -4
 10670 0002 00AF     		add	r7, sp, #0
 10671              		.cfi_def_cfa_register 7
2880:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_Z_FINE_GAIN, buffer);
 10672              		.loc 1 2880 0
 10673 0004 064B     		ldr	r3, .L812
 10674 0006 1B78     		ldrb	r3, [r3]
 10675 0008 064A     		ldr	r2, .L812+4
 10676 000a 0521     		movs	r1, #5
 10677 000c 1800     		movs	r0, r3
 10678 000e FFF7FEFF 		bl	I2CReadByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 239


2881:mpu6050.c     ****     return buffer[0];
 10679              		.loc 1 2881 0
 10680 0012 044B     		ldr	r3, .L812+4
 10681 0014 1B78     		ldrb	r3, [r3]
 10682 0016 5BB2     		sxtb	r3, r3
2882:mpu6050.c     **** }
 10683              		.loc 1 2882 0
 10684 0018 1800     		movs	r0, r3
 10685 001a BD46     		mov	sp, r7
 10686              		@ sp needed
 10687 001c 80BD     		pop	{r7, pc}
 10688              	.L813:
 10689 001e C046     		.align	2
 10690              	.L812:
 10691 0020 00000000 		.word	devAddr
 10692 0024 00000000 		.word	buffer
 10693              		.cfi_endproc
 10694              	.LFE221:
 10695              		.size	MPU6050_getZFineGain, .-MPU6050_getZFineGain
 10696              		.section	.text.MPU6050_setZFineGain,"ax",%progbits
 10697              		.align	2
 10698              		.global	MPU6050_setZFineGain
 10699              		.code	16
 10700              		.thumb_func
 10701              		.type	MPU6050_setZFineGain, %function
 10702              	MPU6050_setZFineGain:
 10703              	.LFB222:
2883:mpu6050.c     **** void MPU6050_setZFineGain(int8_t gain) {
 10704              		.loc 1 2883 0
 10705              		.cfi_startproc
 10706              		@ args = 0, pretend = 0, frame = 8
 10707              		@ frame_needed = 1, uses_anonymous_args = 0
 10708 0000 80B5     		push	{r7, lr}
 10709              		.cfi_def_cfa_offset 8
 10710              		.cfi_offset 7, -8
 10711              		.cfi_offset 14, -4
 10712 0002 82B0     		sub	sp, sp, #8
 10713              		.cfi_def_cfa_offset 16
 10714 0004 00AF     		add	r7, sp, #0
 10715              		.cfi_def_cfa_register 7
 10716 0006 0200     		movs	r2, r0
 10717 0008 FB1D     		adds	r3, r7, #7
 10718 000a 1A70     		strb	r2, [r3]
2884:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_Z_FINE_GAIN, gain);
 10719              		.loc 1 2884 0
 10720 000c 054B     		ldr	r3, .L815
 10721 000e 1878     		ldrb	r0, [r3]
 10722 0010 FB1D     		adds	r3, r7, #7
 10723 0012 1B78     		ldrb	r3, [r3]
 10724 0014 1A00     		movs	r2, r3
 10725 0016 0521     		movs	r1, #5
 10726 0018 FFF7FEFF 		bl	I2CWriteByte
2885:mpu6050.c     **** }
 10727              		.loc 1 2885 0
 10728 001c C046     		nop
 10729 001e BD46     		mov	sp, r7
 10730 0020 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 240


 10731              		@ sp needed
 10732 0022 80BD     		pop	{r7, pc}
 10733              	.L816:
 10734              		.align	2
 10735              	.L815:
 10736 0024 00000000 		.word	devAddr
 10737              		.cfi_endproc
 10738              	.LFE222:
 10739              		.size	MPU6050_setZFineGain, .-MPU6050_setZFineGain
 10740              		.section	.text.MPU6050_getXAccelOffset,"ax",%progbits
 10741              		.align	2
 10742              		.global	MPU6050_getXAccelOffset
 10743              		.code	16
 10744              		.thumb_func
 10745              		.type	MPU6050_getXAccelOffset, %function
 10746              	MPU6050_getXAccelOffset:
 10747              	.LFB223:
2886:mpu6050.c     **** 
2887:mpu6050.c     **** // XA_OFFS_* registers
2888:mpu6050.c     **** 
2889:mpu6050.c     **** int16_t MPU6050_getXAccelOffset() {
 10748              		.loc 1 2889 0
 10749              		.cfi_startproc
 10750              		@ args = 0, pretend = 0, frame = 0
 10751              		@ frame_needed = 1, uses_anonymous_args = 0
 10752 0000 80B5     		push	{r7, lr}
 10753              		.cfi_def_cfa_offset 8
 10754              		.cfi_offset 7, -8
 10755              		.cfi_offset 14, -4
 10756 0002 00AF     		add	r7, sp, #0
 10757              		.cfi_def_cfa_register 7
2890:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
 10758              		.loc 1 2890 0
 10759 0004 094B     		ldr	r3, .L819
 10760 0006 1878     		ldrb	r0, [r3]
 10761 0008 094B     		ldr	r3, .L819+4
 10762 000a 0222     		movs	r2, #2
 10763 000c 0621     		movs	r1, #6
 10764 000e FFF7FEFF 		bl	I2CReadBytes
2891:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10765              		.loc 1 2891 0
 10766 0012 074B     		ldr	r3, .L819+4
 10767 0014 1B78     		ldrb	r3, [r3]
 10768 0016 1B02     		lsls	r3, r3, #8
 10769 0018 1AB2     		sxth	r2, r3
 10770 001a 054B     		ldr	r3, .L819+4
 10771 001c 5B78     		ldrb	r3, [r3, #1]
 10772 001e 1BB2     		sxth	r3, r3
 10773 0020 1343     		orrs	r3, r2
 10774 0022 1BB2     		sxth	r3, r3
2892:mpu6050.c     **** }
 10775              		.loc 1 2892 0
 10776 0024 1800     		movs	r0, r3
 10777 0026 BD46     		mov	sp, r7
 10778              		@ sp needed
 10779 0028 80BD     		pop	{r7, pc}
 10780              	.L820:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 241


 10781 002a C046     		.align	2
 10782              	.L819:
 10783 002c 00000000 		.word	devAddr
 10784 0030 00000000 		.word	buffer
 10785              		.cfi_endproc
 10786              	.LFE223:
 10787              		.size	MPU6050_getXAccelOffset, .-MPU6050_getXAccelOffset
 10788              		.section	.text.MPU6050_setXAccelOffset,"ax",%progbits
 10789              		.align	2
 10790              		.global	MPU6050_setXAccelOffset
 10791              		.code	16
 10792              		.thumb_func
 10793              		.type	MPU6050_setXAccelOffset, %function
 10794              	MPU6050_setXAccelOffset:
 10795              	.LFB224:
2893:mpu6050.c     **** void MPU6050_setXAccelOffset(int16_t offset) {
 10796              		.loc 1 2893 0
 10797              		.cfi_startproc
 10798              		@ args = 0, pretend = 0, frame = 8
 10799              		@ frame_needed = 1, uses_anonymous_args = 0
 10800 0000 80B5     		push	{r7, lr}
 10801              		.cfi_def_cfa_offset 8
 10802              		.cfi_offset 7, -8
 10803              		.cfi_offset 14, -4
 10804 0002 82B0     		sub	sp, sp, #8
 10805              		.cfi_def_cfa_offset 16
 10806 0004 00AF     		add	r7, sp, #0
 10807              		.cfi_def_cfa_register 7
 10808 0006 0200     		movs	r2, r0
 10809 0008 BB1D     		adds	r3, r7, #6
 10810 000a 1A80     		strh	r2, [r3]
2894:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 10811              		.loc 1 2894 0
 10812 000c 054B     		ldr	r3, .L822
 10813 000e 1878     		ldrb	r0, [r3]
 10814 0010 BB1D     		adds	r3, r7, #6
 10815 0012 1B88     		ldrh	r3, [r3]
 10816 0014 1A00     		movs	r2, r3
 10817 0016 0621     		movs	r1, #6
 10818 0018 FFF7FEFF 		bl	I2CWriteWord
2895:mpu6050.c     **** }
 10819              		.loc 1 2895 0
 10820 001c C046     		nop
 10821 001e BD46     		mov	sp, r7
 10822 0020 02B0     		add	sp, sp, #8
 10823              		@ sp needed
 10824 0022 80BD     		pop	{r7, pc}
 10825              	.L823:
 10826              		.align	2
 10827              	.L822:
 10828 0024 00000000 		.word	devAddr
 10829              		.cfi_endproc
 10830              	.LFE224:
 10831              		.size	MPU6050_setXAccelOffset, .-MPU6050_setXAccelOffset
 10832              		.section	.text.MPU6050_getYAccelOffset,"ax",%progbits
 10833              		.align	2
 10834              		.global	MPU6050_getYAccelOffset
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 242


 10835              		.code	16
 10836              		.thumb_func
 10837              		.type	MPU6050_getYAccelOffset, %function
 10838              	MPU6050_getYAccelOffset:
 10839              	.LFB225:
2896:mpu6050.c     **** 
2897:mpu6050.c     **** // YA_OFFS_* register
2898:mpu6050.c     **** 
2899:mpu6050.c     **** int16_t MPU6050_getYAccelOffset() {
 10840              		.loc 1 2899 0
 10841              		.cfi_startproc
 10842              		@ args = 0, pretend = 0, frame = 0
 10843              		@ frame_needed = 1, uses_anonymous_args = 0
 10844 0000 80B5     		push	{r7, lr}
 10845              		.cfi_def_cfa_offset 8
 10846              		.cfi_offset 7, -8
 10847              		.cfi_offset 14, -4
 10848 0002 00AF     		add	r7, sp, #0
 10849              		.cfi_def_cfa_register 7
2900:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
 10850              		.loc 1 2900 0
 10851 0004 094B     		ldr	r3, .L826
 10852 0006 1878     		ldrb	r0, [r3]
 10853 0008 094B     		ldr	r3, .L826+4
 10854 000a 0222     		movs	r2, #2
 10855 000c 0821     		movs	r1, #8
 10856 000e FFF7FEFF 		bl	I2CReadBytes
2901:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10857              		.loc 1 2901 0
 10858 0012 074B     		ldr	r3, .L826+4
 10859 0014 1B78     		ldrb	r3, [r3]
 10860 0016 1B02     		lsls	r3, r3, #8
 10861 0018 1AB2     		sxth	r2, r3
 10862 001a 054B     		ldr	r3, .L826+4
 10863 001c 5B78     		ldrb	r3, [r3, #1]
 10864 001e 1BB2     		sxth	r3, r3
 10865 0020 1343     		orrs	r3, r2
 10866 0022 1BB2     		sxth	r3, r3
2902:mpu6050.c     **** }
 10867              		.loc 1 2902 0
 10868 0024 1800     		movs	r0, r3
 10869 0026 BD46     		mov	sp, r7
 10870              		@ sp needed
 10871 0028 80BD     		pop	{r7, pc}
 10872              	.L827:
 10873 002a C046     		.align	2
 10874              	.L826:
 10875 002c 00000000 		.word	devAddr
 10876 0030 00000000 		.word	buffer
 10877              		.cfi_endproc
 10878              	.LFE225:
 10879              		.size	MPU6050_getYAccelOffset, .-MPU6050_getYAccelOffset
 10880              		.section	.text.MPU6050_setYAccelOffset,"ax",%progbits
 10881              		.align	2
 10882              		.global	MPU6050_setYAccelOffset
 10883              		.code	16
 10884              		.thumb_func
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 243


 10885              		.type	MPU6050_setYAccelOffset, %function
 10886              	MPU6050_setYAccelOffset:
 10887              	.LFB226:
2903:mpu6050.c     **** void MPU6050_setYAccelOffset(int16_t offset) {
 10888              		.loc 1 2903 0
 10889              		.cfi_startproc
 10890              		@ args = 0, pretend = 0, frame = 8
 10891              		@ frame_needed = 1, uses_anonymous_args = 0
 10892 0000 80B5     		push	{r7, lr}
 10893              		.cfi_def_cfa_offset 8
 10894              		.cfi_offset 7, -8
 10895              		.cfi_offset 14, -4
 10896 0002 82B0     		sub	sp, sp, #8
 10897              		.cfi_def_cfa_offset 16
 10898 0004 00AF     		add	r7, sp, #0
 10899              		.cfi_def_cfa_register 7
 10900 0006 0200     		movs	r2, r0
 10901 0008 BB1D     		adds	r3, r7, #6
 10902 000a 1A80     		strh	r2, [r3]
2904:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 10903              		.loc 1 2904 0
 10904 000c 054B     		ldr	r3, .L829
 10905 000e 1878     		ldrb	r0, [r3]
 10906 0010 BB1D     		adds	r3, r7, #6
 10907 0012 1B88     		ldrh	r3, [r3]
 10908 0014 1A00     		movs	r2, r3
 10909 0016 0821     		movs	r1, #8
 10910 0018 FFF7FEFF 		bl	I2CWriteWord
2905:mpu6050.c     **** }
 10911              		.loc 1 2905 0
 10912 001c C046     		nop
 10913 001e BD46     		mov	sp, r7
 10914 0020 02B0     		add	sp, sp, #8
 10915              		@ sp needed
 10916 0022 80BD     		pop	{r7, pc}
 10917              	.L830:
 10918              		.align	2
 10919              	.L829:
 10920 0024 00000000 		.word	devAddr
 10921              		.cfi_endproc
 10922              	.LFE226:
 10923              		.size	MPU6050_setYAccelOffset, .-MPU6050_setYAccelOffset
 10924              		.section	.text.MPU6050_getZAccelOffset,"ax",%progbits
 10925              		.align	2
 10926              		.global	MPU6050_getZAccelOffset
 10927              		.code	16
 10928              		.thumb_func
 10929              		.type	MPU6050_getZAccelOffset, %function
 10930              	MPU6050_getZAccelOffset:
 10931              	.LFB227:
2906:mpu6050.c     **** 
2907:mpu6050.c     **** // ZA_OFFS_* register
2908:mpu6050.c     **** 
2909:mpu6050.c     **** int16_t MPU6050_getZAccelOffset() {
 10932              		.loc 1 2909 0
 10933              		.cfi_startproc
 10934              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 244


 10935              		@ frame_needed = 1, uses_anonymous_args = 0
 10936 0000 80B5     		push	{r7, lr}
 10937              		.cfi_def_cfa_offset 8
 10938              		.cfi_offset 7, -8
 10939              		.cfi_offset 14, -4
 10940 0002 00AF     		add	r7, sp, #0
 10941              		.cfi_def_cfa_register 7
2910:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
 10942              		.loc 1 2910 0
 10943 0004 094B     		ldr	r3, .L833
 10944 0006 1878     		ldrb	r0, [r3]
 10945 0008 094B     		ldr	r3, .L833+4
 10946 000a 0222     		movs	r2, #2
 10947 000c 0A21     		movs	r1, #10
 10948 000e FFF7FEFF 		bl	I2CReadBytes
2911:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10949              		.loc 1 2911 0
 10950 0012 074B     		ldr	r3, .L833+4
 10951 0014 1B78     		ldrb	r3, [r3]
 10952 0016 1B02     		lsls	r3, r3, #8
 10953 0018 1AB2     		sxth	r2, r3
 10954 001a 054B     		ldr	r3, .L833+4
 10955 001c 5B78     		ldrb	r3, [r3, #1]
 10956 001e 1BB2     		sxth	r3, r3
 10957 0020 1343     		orrs	r3, r2
 10958 0022 1BB2     		sxth	r3, r3
2912:mpu6050.c     **** }
 10959              		.loc 1 2912 0
 10960 0024 1800     		movs	r0, r3
 10961 0026 BD46     		mov	sp, r7
 10962              		@ sp needed
 10963 0028 80BD     		pop	{r7, pc}
 10964              	.L834:
 10965 002a C046     		.align	2
 10966              	.L833:
 10967 002c 00000000 		.word	devAddr
 10968 0030 00000000 		.word	buffer
 10969              		.cfi_endproc
 10970              	.LFE227:
 10971              		.size	MPU6050_getZAccelOffset, .-MPU6050_getZAccelOffset
 10972              		.section	.text.MPU6050_setZAccelOffset,"ax",%progbits
 10973              		.align	2
 10974              		.global	MPU6050_setZAccelOffset
 10975              		.code	16
 10976              		.thumb_func
 10977              		.type	MPU6050_setZAccelOffset, %function
 10978              	MPU6050_setZAccelOffset:
 10979              	.LFB228:
2913:mpu6050.c     **** void MPU6050_setZAccelOffset(int16_t offset) {
 10980              		.loc 1 2913 0
 10981              		.cfi_startproc
 10982              		@ args = 0, pretend = 0, frame = 8
 10983              		@ frame_needed = 1, uses_anonymous_args = 0
 10984 0000 80B5     		push	{r7, lr}
 10985              		.cfi_def_cfa_offset 8
 10986              		.cfi_offset 7, -8
 10987              		.cfi_offset 14, -4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 245


 10988 0002 82B0     		sub	sp, sp, #8
 10989              		.cfi_def_cfa_offset 16
 10990 0004 00AF     		add	r7, sp, #0
 10991              		.cfi_def_cfa_register 7
 10992 0006 0200     		movs	r2, r0
 10993 0008 BB1D     		adds	r3, r7, #6
 10994 000a 1A80     		strh	r2, [r3]
2914:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 10995              		.loc 1 2914 0
 10996 000c 054B     		ldr	r3, .L836
 10997 000e 1878     		ldrb	r0, [r3]
 10998 0010 BB1D     		adds	r3, r7, #6
 10999 0012 1B88     		ldrh	r3, [r3]
 11000 0014 1A00     		movs	r2, r3
 11001 0016 0A21     		movs	r1, #10
 11002 0018 FFF7FEFF 		bl	I2CWriteWord
2915:mpu6050.c     **** }
 11003              		.loc 1 2915 0
 11004 001c C046     		nop
 11005 001e BD46     		mov	sp, r7
 11006 0020 02B0     		add	sp, sp, #8
 11007              		@ sp needed
 11008 0022 80BD     		pop	{r7, pc}
 11009              	.L837:
 11010              		.align	2
 11011              	.L836:
 11012 0024 00000000 		.word	devAddr
 11013              		.cfi_endproc
 11014              	.LFE228:
 11015              		.size	MPU6050_setZAccelOffset, .-MPU6050_setZAccelOffset
 11016              		.section	.text.MPU6050_getXGyroOffsetUser,"ax",%progbits
 11017              		.align	2
 11018              		.global	MPU6050_getXGyroOffsetUser
 11019              		.code	16
 11020              		.thumb_func
 11021              		.type	MPU6050_getXGyroOffsetUser, %function
 11022              	MPU6050_getXGyroOffsetUser:
 11023              	.LFB229:
2916:mpu6050.c     **** 
2917:mpu6050.c     **** // XG_OFFS_USR* registers
2918:mpu6050.c     **** 
2919:mpu6050.c     **** int16_t MPU6050_getXGyroOffsetUser() {
 11024              		.loc 1 2919 0
 11025              		.cfi_startproc
 11026              		@ args = 0, pretend = 0, frame = 0
 11027              		@ frame_needed = 1, uses_anonymous_args = 0
 11028 0000 80B5     		push	{r7, lr}
 11029              		.cfi_def_cfa_offset 8
 11030              		.cfi_offset 7, -8
 11031              		.cfi_offset 14, -4
 11032 0002 00AF     		add	r7, sp, #0
 11033              		.cfi_def_cfa_register 7
2920:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 11034              		.loc 1 2920 0
 11035 0004 094B     		ldr	r3, .L840
 11036 0006 1878     		ldrb	r0, [r3]
 11037 0008 094B     		ldr	r3, .L840+4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 246


 11038 000a 0222     		movs	r2, #2
 11039 000c 1321     		movs	r1, #19
 11040 000e FFF7FEFF 		bl	I2CReadBytes
2921:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 11041              		.loc 1 2921 0
 11042 0012 074B     		ldr	r3, .L840+4
 11043 0014 1B78     		ldrb	r3, [r3]
 11044 0016 1B02     		lsls	r3, r3, #8
 11045 0018 1AB2     		sxth	r2, r3
 11046 001a 054B     		ldr	r3, .L840+4
 11047 001c 5B78     		ldrb	r3, [r3, #1]
 11048 001e 1BB2     		sxth	r3, r3
 11049 0020 1343     		orrs	r3, r2
 11050 0022 1BB2     		sxth	r3, r3
2922:mpu6050.c     **** }
 11051              		.loc 1 2922 0
 11052 0024 1800     		movs	r0, r3
 11053 0026 BD46     		mov	sp, r7
 11054              		@ sp needed
 11055 0028 80BD     		pop	{r7, pc}
 11056              	.L841:
 11057 002a C046     		.align	2
 11058              	.L840:
 11059 002c 00000000 		.word	devAddr
 11060 0030 00000000 		.word	buffer
 11061              		.cfi_endproc
 11062              	.LFE229:
 11063              		.size	MPU6050_getXGyroOffsetUser, .-MPU6050_getXGyroOffsetUser
 11064              		.section	.text.MPU6050_setXGyroOffsetUser,"ax",%progbits
 11065              		.align	2
 11066              		.global	MPU6050_setXGyroOffsetUser
 11067              		.code	16
 11068              		.thumb_func
 11069              		.type	MPU6050_setXGyroOffsetUser, %function
 11070              	MPU6050_setXGyroOffsetUser:
 11071              	.LFB230:
2923:mpu6050.c     **** void MPU6050_setXGyroOffsetUser(int16_t offset) {
 11072              		.loc 1 2923 0
 11073              		.cfi_startproc
 11074              		@ args = 0, pretend = 0, frame = 8
 11075              		@ frame_needed = 1, uses_anonymous_args = 0
 11076 0000 80B5     		push	{r7, lr}
 11077              		.cfi_def_cfa_offset 8
 11078              		.cfi_offset 7, -8
 11079              		.cfi_offset 14, -4
 11080 0002 82B0     		sub	sp, sp, #8
 11081              		.cfi_def_cfa_offset 16
 11082 0004 00AF     		add	r7, sp, #0
 11083              		.cfi_def_cfa_register 7
 11084 0006 0200     		movs	r2, r0
 11085 0008 BB1D     		adds	r3, r7, #6
 11086 000a 1A80     		strh	r2, [r3]
2924:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 11087              		.loc 1 2924 0
 11088 000c 054B     		ldr	r3, .L843
 11089 000e 1878     		ldrb	r0, [r3]
 11090 0010 BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 247


 11091 0012 1B88     		ldrh	r3, [r3]
 11092 0014 1A00     		movs	r2, r3
 11093 0016 1321     		movs	r1, #19
 11094 0018 FFF7FEFF 		bl	I2CWriteWord
2925:mpu6050.c     **** }
 11095              		.loc 1 2925 0
 11096 001c C046     		nop
 11097 001e BD46     		mov	sp, r7
 11098 0020 02B0     		add	sp, sp, #8
 11099              		@ sp needed
 11100 0022 80BD     		pop	{r7, pc}
 11101              	.L844:
 11102              		.align	2
 11103              	.L843:
 11104 0024 00000000 		.word	devAddr
 11105              		.cfi_endproc
 11106              	.LFE230:
 11107              		.size	MPU6050_setXGyroOffsetUser, .-MPU6050_setXGyroOffsetUser
 11108              		.section	.text.MPU6050_getYGyroOffsetUser,"ax",%progbits
 11109              		.align	2
 11110              		.global	MPU6050_getYGyroOffsetUser
 11111              		.code	16
 11112              		.thumb_func
 11113              		.type	MPU6050_getYGyroOffsetUser, %function
 11114              	MPU6050_getYGyroOffsetUser:
 11115              	.LFB231:
2926:mpu6050.c     **** 
2927:mpu6050.c     **** // YG_OFFS_USR* register
2928:mpu6050.c     **** 
2929:mpu6050.c     **** int16_t MPU6050_getYGyroOffsetUser() {
 11116              		.loc 1 2929 0
 11117              		.cfi_startproc
 11118              		@ args = 0, pretend = 0, frame = 0
 11119              		@ frame_needed = 1, uses_anonymous_args = 0
 11120 0000 80B5     		push	{r7, lr}
 11121              		.cfi_def_cfa_offset 8
 11122              		.cfi_offset 7, -8
 11123              		.cfi_offset 14, -4
 11124 0002 00AF     		add	r7, sp, #0
 11125              		.cfi_def_cfa_register 7
2930:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 11126              		.loc 1 2930 0
 11127 0004 094B     		ldr	r3, .L847
 11128 0006 1878     		ldrb	r0, [r3]
 11129 0008 094B     		ldr	r3, .L847+4
 11130 000a 0222     		movs	r2, #2
 11131 000c 1521     		movs	r1, #21
 11132 000e FFF7FEFF 		bl	I2CReadBytes
2931:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 11133              		.loc 1 2931 0
 11134 0012 074B     		ldr	r3, .L847+4
 11135 0014 1B78     		ldrb	r3, [r3]
 11136 0016 1B02     		lsls	r3, r3, #8
 11137 0018 1AB2     		sxth	r2, r3
 11138 001a 054B     		ldr	r3, .L847+4
 11139 001c 5B78     		ldrb	r3, [r3, #1]
 11140 001e 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 248


 11141 0020 1343     		orrs	r3, r2
 11142 0022 1BB2     		sxth	r3, r3
2932:mpu6050.c     **** }
 11143              		.loc 1 2932 0
 11144 0024 1800     		movs	r0, r3
 11145 0026 BD46     		mov	sp, r7
 11146              		@ sp needed
 11147 0028 80BD     		pop	{r7, pc}
 11148              	.L848:
 11149 002a C046     		.align	2
 11150              	.L847:
 11151 002c 00000000 		.word	devAddr
 11152 0030 00000000 		.word	buffer
 11153              		.cfi_endproc
 11154              	.LFE231:
 11155              		.size	MPU6050_getYGyroOffsetUser, .-MPU6050_getYGyroOffsetUser
 11156              		.section	.text.MPU6050_setYGyroOffsetUser,"ax",%progbits
 11157              		.align	2
 11158              		.global	MPU6050_setYGyroOffsetUser
 11159              		.code	16
 11160              		.thumb_func
 11161              		.type	MPU6050_setYGyroOffsetUser, %function
 11162              	MPU6050_setYGyroOffsetUser:
 11163              	.LFB232:
2933:mpu6050.c     **** void MPU6050_setYGyroOffsetUser(int16_t offset) {
 11164              		.loc 1 2933 0
 11165              		.cfi_startproc
 11166              		@ args = 0, pretend = 0, frame = 8
 11167              		@ frame_needed = 1, uses_anonymous_args = 0
 11168 0000 80B5     		push	{r7, lr}
 11169              		.cfi_def_cfa_offset 8
 11170              		.cfi_offset 7, -8
 11171              		.cfi_offset 14, -4
 11172 0002 82B0     		sub	sp, sp, #8
 11173              		.cfi_def_cfa_offset 16
 11174 0004 00AF     		add	r7, sp, #0
 11175              		.cfi_def_cfa_register 7
 11176 0006 0200     		movs	r2, r0
 11177 0008 BB1D     		adds	r3, r7, #6
 11178 000a 1A80     		strh	r2, [r3]
2934:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 11179              		.loc 1 2934 0
 11180 000c 054B     		ldr	r3, .L850
 11181 000e 1878     		ldrb	r0, [r3]
 11182 0010 BB1D     		adds	r3, r7, #6
 11183 0012 1B88     		ldrh	r3, [r3]
 11184 0014 1A00     		movs	r2, r3
 11185 0016 1521     		movs	r1, #21
 11186 0018 FFF7FEFF 		bl	I2CWriteWord
2935:mpu6050.c     **** }
 11187              		.loc 1 2935 0
 11188 001c C046     		nop
 11189 001e BD46     		mov	sp, r7
 11190 0020 02B0     		add	sp, sp, #8
 11191              		@ sp needed
 11192 0022 80BD     		pop	{r7, pc}
 11193              	.L851:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 249


 11194              		.align	2
 11195              	.L850:
 11196 0024 00000000 		.word	devAddr
 11197              		.cfi_endproc
 11198              	.LFE232:
 11199              		.size	MPU6050_setYGyroOffsetUser, .-MPU6050_setYGyroOffsetUser
 11200              		.section	.text.MPU6050_getZGyroOffsetUser,"ax",%progbits
 11201              		.align	2
 11202              		.global	MPU6050_getZGyroOffsetUser
 11203              		.code	16
 11204              		.thumb_func
 11205              		.type	MPU6050_getZGyroOffsetUser, %function
 11206              	MPU6050_getZGyroOffsetUser:
 11207              	.LFB233:
2936:mpu6050.c     **** 
2937:mpu6050.c     **** // ZG_OFFS_USR* register
2938:mpu6050.c     **** 
2939:mpu6050.c     **** int16_t MPU6050_getZGyroOffsetUser() {
 11208              		.loc 1 2939 0
 11209              		.cfi_startproc
 11210              		@ args = 0, pretend = 0, frame = 0
 11211              		@ frame_needed = 1, uses_anonymous_args = 0
 11212 0000 80B5     		push	{r7, lr}
 11213              		.cfi_def_cfa_offset 8
 11214              		.cfi_offset 7, -8
 11215              		.cfi_offset 14, -4
 11216 0002 00AF     		add	r7, sp, #0
 11217              		.cfi_def_cfa_register 7
2940:mpu6050.c     ****     I2CReadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 11218              		.loc 1 2940 0
 11219 0004 094B     		ldr	r3, .L854
 11220 0006 1878     		ldrb	r0, [r3]
 11221 0008 094B     		ldr	r3, .L854+4
 11222 000a 0222     		movs	r2, #2
 11223 000c 1721     		movs	r1, #23
 11224 000e FFF7FEFF 		bl	I2CReadBytes
2941:mpu6050.c     ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 11225              		.loc 1 2941 0
 11226 0012 074B     		ldr	r3, .L854+4
 11227 0014 1B78     		ldrb	r3, [r3]
 11228 0016 1B02     		lsls	r3, r3, #8
 11229 0018 1AB2     		sxth	r2, r3
 11230 001a 054B     		ldr	r3, .L854+4
 11231 001c 5B78     		ldrb	r3, [r3, #1]
 11232 001e 1BB2     		sxth	r3, r3
 11233 0020 1343     		orrs	r3, r2
 11234 0022 1BB2     		sxth	r3, r3
2942:mpu6050.c     **** }
 11235              		.loc 1 2942 0
 11236 0024 1800     		movs	r0, r3
 11237 0026 BD46     		mov	sp, r7
 11238              		@ sp needed
 11239 0028 80BD     		pop	{r7, pc}
 11240              	.L855:
 11241 002a C046     		.align	2
 11242              	.L854:
 11243 002c 00000000 		.word	devAddr
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 250


 11244 0030 00000000 		.word	buffer
 11245              		.cfi_endproc
 11246              	.LFE233:
 11247              		.size	MPU6050_getZGyroOffsetUser, .-MPU6050_getZGyroOffsetUser
 11248              		.section	.text.MPU6050_setZGyroOffsetUser,"ax",%progbits
 11249              		.align	2
 11250              		.global	MPU6050_setZGyroOffsetUser
 11251              		.code	16
 11252              		.thumb_func
 11253              		.type	MPU6050_setZGyroOffsetUser, %function
 11254              	MPU6050_setZGyroOffsetUser:
 11255              	.LFB234:
2943:mpu6050.c     **** void MPU6050_setZGyroOffsetUser(int16_t offset) {
 11256              		.loc 1 2943 0
 11257              		.cfi_startproc
 11258              		@ args = 0, pretend = 0, frame = 8
 11259              		@ frame_needed = 1, uses_anonymous_args = 0
 11260 0000 80B5     		push	{r7, lr}
 11261              		.cfi_def_cfa_offset 8
 11262              		.cfi_offset 7, -8
 11263              		.cfi_offset 14, -4
 11264 0002 82B0     		sub	sp, sp, #8
 11265              		.cfi_def_cfa_offset 16
 11266 0004 00AF     		add	r7, sp, #0
 11267              		.cfi_def_cfa_register 7
 11268 0006 0200     		movs	r2, r0
 11269 0008 BB1D     		adds	r3, r7, #6
 11270 000a 1A80     		strh	r2, [r3]
2944:mpu6050.c     ****     I2CWriteWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 11271              		.loc 1 2944 0
 11272 000c 054B     		ldr	r3, .L857
 11273 000e 1878     		ldrb	r0, [r3]
 11274 0010 BB1D     		adds	r3, r7, #6
 11275 0012 1B88     		ldrh	r3, [r3]
 11276 0014 1A00     		movs	r2, r3
 11277 0016 1721     		movs	r1, #23
 11278 0018 FFF7FEFF 		bl	I2CWriteWord
2945:mpu6050.c     **** }
 11279              		.loc 1 2945 0
 11280 001c C046     		nop
 11281 001e BD46     		mov	sp, r7
 11282 0020 02B0     		add	sp, sp, #8
 11283              		@ sp needed
 11284 0022 80BD     		pop	{r7, pc}
 11285              	.L858:
 11286              		.align	2
 11287              	.L857:
 11288 0024 00000000 		.word	devAddr
 11289              		.cfi_endproc
 11290              	.LFE234:
 11291              		.size	MPU6050_setZGyroOffsetUser, .-MPU6050_setZGyroOffsetUser
 11292              		.section	.text.MPU6050_getIntPLLReadyEnabled,"ax",%progbits
 11293              		.align	2
 11294              		.global	MPU6050_getIntPLLReadyEnabled
 11295              		.code	16
 11296              		.thumb_func
 11297              		.type	MPU6050_getIntPLLReadyEnabled, %function
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 251


 11298              	MPU6050_getIntPLLReadyEnabled:
 11299              	.LFB235:
2946:mpu6050.c     **** 
2947:mpu6050.c     **** // INT_ENABLE register (DMP functions)
2948:mpu6050.c     **** 
2949:mpu6050.c     **** bool MPU6050_getIntPLLReadyEnabled() {
 11300              		.loc 1 2949 0
 11301              		.cfi_startproc
 11302              		@ args = 0, pretend = 0, frame = 0
 11303              		@ frame_needed = 1, uses_anonymous_args = 0
 11304 0000 80B5     		push	{r7, lr}
 11305              		.cfi_def_cfa_offset 8
 11306              		.cfi_offset 7, -8
 11307              		.cfi_offset 14, -4
 11308 0002 00AF     		add	r7, sp, #0
 11309              		.cfi_def_cfa_register 7
2950:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 11310              		.loc 1 2950 0
 11311 0004 074B     		ldr	r3, .L861
 11312 0006 1878     		ldrb	r0, [r3]
 11313 0008 074B     		ldr	r3, .L861+4
 11314 000a 0222     		movs	r2, #2
 11315 000c 3821     		movs	r1, #56
 11316 000e FFF7FEFF 		bl	I2CReadBit
2951:mpu6050.c     ****     return buffer[0];
 11317              		.loc 1 2951 0
 11318 0012 054B     		ldr	r3, .L861+4
 11319 0014 1B78     		ldrb	r3, [r3]
 11320 0016 5A1E     		subs	r2, r3, #1
 11321 0018 9341     		sbcs	r3, r3, r2
 11322 001a DBB2     		uxtb	r3, r3
2952:mpu6050.c     **** }
 11323              		.loc 1 2952 0
 11324 001c 1800     		movs	r0, r3
 11325 001e BD46     		mov	sp, r7
 11326              		@ sp needed
 11327 0020 80BD     		pop	{r7, pc}
 11328              	.L862:
 11329 0022 C046     		.align	2
 11330              	.L861:
 11331 0024 00000000 		.word	devAddr
 11332 0028 00000000 		.word	buffer
 11333              		.cfi_endproc
 11334              	.LFE235:
 11335              		.size	MPU6050_getIntPLLReadyEnabled, .-MPU6050_getIntPLLReadyEnabled
 11336              		.section	.text.MPU6050_setIntPLLReadyEnabled,"ax",%progbits
 11337              		.align	2
 11338              		.global	MPU6050_setIntPLLReadyEnabled
 11339              		.code	16
 11340              		.thumb_func
 11341              		.type	MPU6050_setIntPLLReadyEnabled, %function
 11342              	MPU6050_setIntPLLReadyEnabled:
 11343              	.LFB236:
2953:mpu6050.c     **** void MPU6050_setIntPLLReadyEnabled(bool enabled) {
 11344              		.loc 1 2953 0
 11345              		.cfi_startproc
 11346              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 252


 11347              		@ frame_needed = 1, uses_anonymous_args = 0
 11348 0000 80B5     		push	{r7, lr}
 11349              		.cfi_def_cfa_offset 8
 11350              		.cfi_offset 7, -8
 11351              		.cfi_offset 14, -4
 11352 0002 82B0     		sub	sp, sp, #8
 11353              		.cfi_def_cfa_offset 16
 11354 0004 00AF     		add	r7, sp, #0
 11355              		.cfi_def_cfa_register 7
 11356 0006 0200     		movs	r2, r0
 11357 0008 FB1D     		adds	r3, r7, #7
 11358 000a 1A70     		strb	r2, [r3]
2954:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, enabled);
 11359              		.loc 1 2954 0
 11360 000c 054B     		ldr	r3, .L864
 11361 000e 1878     		ldrb	r0, [r3]
 11362 0010 FB1D     		adds	r3, r7, #7
 11363 0012 1B78     		ldrb	r3, [r3]
 11364 0014 0222     		movs	r2, #2
 11365 0016 3821     		movs	r1, #56
 11366 0018 FFF7FEFF 		bl	I2CWriteBit
2955:mpu6050.c     **** }
 11367              		.loc 1 2955 0
 11368 001c C046     		nop
 11369 001e BD46     		mov	sp, r7
 11370 0020 02B0     		add	sp, sp, #8
 11371              		@ sp needed
 11372 0022 80BD     		pop	{r7, pc}
 11373              	.L865:
 11374              		.align	2
 11375              	.L864:
 11376 0024 00000000 		.word	devAddr
 11377              		.cfi_endproc
 11378              	.LFE236:
 11379              		.size	MPU6050_setIntPLLReadyEnabled, .-MPU6050_setIntPLLReadyEnabled
 11380              		.section	.text.MPU6050_getIntDMPEnabled,"ax",%progbits
 11381              		.align	2
 11382              		.global	MPU6050_getIntDMPEnabled
 11383              		.code	16
 11384              		.thumb_func
 11385              		.type	MPU6050_getIntDMPEnabled, %function
 11386              	MPU6050_getIntDMPEnabled:
 11387              	.LFB237:
2956:mpu6050.c     **** bool MPU6050_getIntDMPEnabled() {
 11388              		.loc 1 2956 0
 11389              		.cfi_startproc
 11390              		@ args = 0, pretend = 0, frame = 0
 11391              		@ frame_needed = 1, uses_anonymous_args = 0
 11392 0000 80B5     		push	{r7, lr}
 11393              		.cfi_def_cfa_offset 8
 11394              		.cfi_offset 7, -8
 11395              		.cfi_offset 14, -4
 11396 0002 00AF     		add	r7, sp, #0
 11397              		.cfi_def_cfa_register 7
2957:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 11398              		.loc 1 2957 0
 11399 0004 074B     		ldr	r3, .L868
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 253


 11400 0006 1878     		ldrb	r0, [r3]
 11401 0008 074B     		ldr	r3, .L868+4
 11402 000a 0122     		movs	r2, #1
 11403 000c 3821     		movs	r1, #56
 11404 000e FFF7FEFF 		bl	I2CReadBit
2958:mpu6050.c     ****     return buffer[0];
 11405              		.loc 1 2958 0
 11406 0012 054B     		ldr	r3, .L868+4
 11407 0014 1B78     		ldrb	r3, [r3]
 11408 0016 5A1E     		subs	r2, r3, #1
 11409 0018 9341     		sbcs	r3, r3, r2
 11410 001a DBB2     		uxtb	r3, r3
2959:mpu6050.c     **** }
 11411              		.loc 1 2959 0
 11412 001c 1800     		movs	r0, r3
 11413 001e BD46     		mov	sp, r7
 11414              		@ sp needed
 11415 0020 80BD     		pop	{r7, pc}
 11416              	.L869:
 11417 0022 C046     		.align	2
 11418              	.L868:
 11419 0024 00000000 		.word	devAddr
 11420 0028 00000000 		.word	buffer
 11421              		.cfi_endproc
 11422              	.LFE237:
 11423              		.size	MPU6050_getIntDMPEnabled, .-MPU6050_getIntDMPEnabled
 11424              		.section	.text.MPU6050_setIntDMPEnabled,"ax",%progbits
 11425              		.align	2
 11426              		.global	MPU6050_setIntDMPEnabled
 11427              		.code	16
 11428              		.thumb_func
 11429              		.type	MPU6050_setIntDMPEnabled, %function
 11430              	MPU6050_setIntDMPEnabled:
 11431              	.LFB238:
2960:mpu6050.c     **** void MPU6050_setIntDMPEnabled(bool enabled) {
 11432              		.loc 1 2960 0
 11433              		.cfi_startproc
 11434              		@ args = 0, pretend = 0, frame = 8
 11435              		@ frame_needed = 1, uses_anonymous_args = 0
 11436 0000 80B5     		push	{r7, lr}
 11437              		.cfi_def_cfa_offset 8
 11438              		.cfi_offset 7, -8
 11439              		.cfi_offset 14, -4
 11440 0002 82B0     		sub	sp, sp, #8
 11441              		.cfi_def_cfa_offset 16
 11442 0004 00AF     		add	r7, sp, #0
 11443              		.cfi_def_cfa_register 7
 11444 0006 0200     		movs	r2, r0
 11445 0008 FB1D     		adds	r3, r7, #7
 11446 000a 1A70     		strb	r2, [r3]
2961:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, enabled);
 11447              		.loc 1 2961 0
 11448 000c 054B     		ldr	r3, .L871
 11449 000e 1878     		ldrb	r0, [r3]
 11450 0010 FB1D     		adds	r3, r7, #7
 11451 0012 1B78     		ldrb	r3, [r3]
 11452 0014 0122     		movs	r2, #1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 254


 11453 0016 3821     		movs	r1, #56
 11454 0018 FFF7FEFF 		bl	I2CWriteBit
2962:mpu6050.c     **** }
 11455              		.loc 1 2962 0
 11456 001c C046     		nop
 11457 001e BD46     		mov	sp, r7
 11458 0020 02B0     		add	sp, sp, #8
 11459              		@ sp needed
 11460 0022 80BD     		pop	{r7, pc}
 11461              	.L872:
 11462              		.align	2
 11463              	.L871:
 11464 0024 00000000 		.word	devAddr
 11465              		.cfi_endproc
 11466              	.LFE238:
 11467              		.size	MPU6050_setIntDMPEnabled, .-MPU6050_setIntDMPEnabled
 11468              		.section	.text.MPU6050_getDMPInt5Status,"ax",%progbits
 11469              		.align	2
 11470              		.global	MPU6050_getDMPInt5Status
 11471              		.code	16
 11472              		.thumb_func
 11473              		.type	MPU6050_getDMPInt5Status, %function
 11474              	MPU6050_getDMPInt5Status:
 11475              	.LFB239:
2963:mpu6050.c     **** 
2964:mpu6050.c     **** // DMP_INT_STATUS
2965:mpu6050.c     **** 
2966:mpu6050.c     **** bool MPU6050_getDMPInt5Status() {
 11476              		.loc 1 2966 0
 11477              		.cfi_startproc
 11478              		@ args = 0, pretend = 0, frame = 0
 11479              		@ frame_needed = 1, uses_anonymous_args = 0
 11480 0000 80B5     		push	{r7, lr}
 11481              		.cfi_def_cfa_offset 8
 11482              		.cfi_offset 7, -8
 11483              		.cfi_offset 14, -4
 11484 0002 00AF     		add	r7, sp, #0
 11485              		.cfi_def_cfa_register 7
2967:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_5_BIT, buffer);
 11486              		.loc 1 2967 0
 11487 0004 074B     		ldr	r3, .L875
 11488 0006 1878     		ldrb	r0, [r3]
 11489 0008 074B     		ldr	r3, .L875+4
 11490 000a 0522     		movs	r2, #5
 11491 000c 3921     		movs	r1, #57
 11492 000e FFF7FEFF 		bl	I2CReadBit
2968:mpu6050.c     ****     return buffer[0];
 11493              		.loc 1 2968 0
 11494 0012 054B     		ldr	r3, .L875+4
 11495 0014 1B78     		ldrb	r3, [r3]
 11496 0016 5A1E     		subs	r2, r3, #1
 11497 0018 9341     		sbcs	r3, r3, r2
 11498 001a DBB2     		uxtb	r3, r3
2969:mpu6050.c     **** }
 11499              		.loc 1 2969 0
 11500 001c 1800     		movs	r0, r3
 11501 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 255


 11502              		@ sp needed
 11503 0020 80BD     		pop	{r7, pc}
 11504              	.L876:
 11505 0022 C046     		.align	2
 11506              	.L875:
 11507 0024 00000000 		.word	devAddr
 11508 0028 00000000 		.word	buffer
 11509              		.cfi_endproc
 11510              	.LFE239:
 11511              		.size	MPU6050_getDMPInt5Status, .-MPU6050_getDMPInt5Status
 11512              		.section	.text.MPU6050_getDMPInt4Status,"ax",%progbits
 11513              		.align	2
 11514              		.global	MPU6050_getDMPInt4Status
 11515              		.code	16
 11516              		.thumb_func
 11517              		.type	MPU6050_getDMPInt4Status, %function
 11518              	MPU6050_getDMPInt4Status:
 11519              	.LFB240:
2970:mpu6050.c     **** bool MPU6050_getDMPInt4Status() {
 11520              		.loc 1 2970 0
 11521              		.cfi_startproc
 11522              		@ args = 0, pretend = 0, frame = 0
 11523              		@ frame_needed = 1, uses_anonymous_args = 0
 11524 0000 80B5     		push	{r7, lr}
 11525              		.cfi_def_cfa_offset 8
 11526              		.cfi_offset 7, -8
 11527              		.cfi_offset 14, -4
 11528 0002 00AF     		add	r7, sp, #0
 11529              		.cfi_def_cfa_register 7
2971:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_4_BIT, buffer);
 11530              		.loc 1 2971 0
 11531 0004 074B     		ldr	r3, .L879
 11532 0006 1878     		ldrb	r0, [r3]
 11533 0008 074B     		ldr	r3, .L879+4
 11534 000a 0422     		movs	r2, #4
 11535 000c 3921     		movs	r1, #57
 11536 000e FFF7FEFF 		bl	I2CReadBit
2972:mpu6050.c     ****     return buffer[0];
 11537              		.loc 1 2972 0
 11538 0012 054B     		ldr	r3, .L879+4
 11539 0014 1B78     		ldrb	r3, [r3]
 11540 0016 5A1E     		subs	r2, r3, #1
 11541 0018 9341     		sbcs	r3, r3, r2
 11542 001a DBB2     		uxtb	r3, r3
2973:mpu6050.c     **** }
 11543              		.loc 1 2973 0
 11544 001c 1800     		movs	r0, r3
 11545 001e BD46     		mov	sp, r7
 11546              		@ sp needed
 11547 0020 80BD     		pop	{r7, pc}
 11548              	.L880:
 11549 0022 C046     		.align	2
 11550              	.L879:
 11551 0024 00000000 		.word	devAddr
 11552 0028 00000000 		.word	buffer
 11553              		.cfi_endproc
 11554              	.LFE240:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 256


 11555              		.size	MPU6050_getDMPInt4Status, .-MPU6050_getDMPInt4Status
 11556              		.section	.text.MPU6050_getDMPInt3Status,"ax",%progbits
 11557              		.align	2
 11558              		.global	MPU6050_getDMPInt3Status
 11559              		.code	16
 11560              		.thumb_func
 11561              		.type	MPU6050_getDMPInt3Status, %function
 11562              	MPU6050_getDMPInt3Status:
 11563              	.LFB241:
2974:mpu6050.c     **** bool MPU6050_getDMPInt3Status() {
 11564              		.loc 1 2974 0
 11565              		.cfi_startproc
 11566              		@ args = 0, pretend = 0, frame = 0
 11567              		@ frame_needed = 1, uses_anonymous_args = 0
 11568 0000 80B5     		push	{r7, lr}
 11569              		.cfi_def_cfa_offset 8
 11570              		.cfi_offset 7, -8
 11571              		.cfi_offset 14, -4
 11572 0002 00AF     		add	r7, sp, #0
 11573              		.cfi_def_cfa_register 7
2975:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_3_BIT, buffer);
 11574              		.loc 1 2975 0
 11575 0004 074B     		ldr	r3, .L883
 11576 0006 1878     		ldrb	r0, [r3]
 11577 0008 074B     		ldr	r3, .L883+4
 11578 000a 0322     		movs	r2, #3
 11579 000c 3921     		movs	r1, #57
 11580 000e FFF7FEFF 		bl	I2CReadBit
2976:mpu6050.c     ****     return buffer[0];
 11581              		.loc 1 2976 0
 11582 0012 054B     		ldr	r3, .L883+4
 11583 0014 1B78     		ldrb	r3, [r3]
 11584 0016 5A1E     		subs	r2, r3, #1
 11585 0018 9341     		sbcs	r3, r3, r2
 11586 001a DBB2     		uxtb	r3, r3
2977:mpu6050.c     **** }
 11587              		.loc 1 2977 0
 11588 001c 1800     		movs	r0, r3
 11589 001e BD46     		mov	sp, r7
 11590              		@ sp needed
 11591 0020 80BD     		pop	{r7, pc}
 11592              	.L884:
 11593 0022 C046     		.align	2
 11594              	.L883:
 11595 0024 00000000 		.word	devAddr
 11596 0028 00000000 		.word	buffer
 11597              		.cfi_endproc
 11598              	.LFE241:
 11599              		.size	MPU6050_getDMPInt3Status, .-MPU6050_getDMPInt3Status
 11600              		.section	.text.MPU6050_getDMPInt2Status,"ax",%progbits
 11601              		.align	2
 11602              		.global	MPU6050_getDMPInt2Status
 11603              		.code	16
 11604              		.thumb_func
 11605              		.type	MPU6050_getDMPInt2Status, %function
 11606              	MPU6050_getDMPInt2Status:
 11607              	.LFB242:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 257


2978:mpu6050.c     **** bool MPU6050_getDMPInt2Status() {
 11608              		.loc 1 2978 0
 11609              		.cfi_startproc
 11610              		@ args = 0, pretend = 0, frame = 0
 11611              		@ frame_needed = 1, uses_anonymous_args = 0
 11612 0000 80B5     		push	{r7, lr}
 11613              		.cfi_def_cfa_offset 8
 11614              		.cfi_offset 7, -8
 11615              		.cfi_offset 14, -4
 11616 0002 00AF     		add	r7, sp, #0
 11617              		.cfi_def_cfa_register 7
2979:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_2_BIT, buffer);
 11618              		.loc 1 2979 0
 11619 0004 074B     		ldr	r3, .L887
 11620 0006 1878     		ldrb	r0, [r3]
 11621 0008 074B     		ldr	r3, .L887+4
 11622 000a 0222     		movs	r2, #2
 11623 000c 3921     		movs	r1, #57
 11624 000e FFF7FEFF 		bl	I2CReadBit
2980:mpu6050.c     ****     return buffer[0];
 11625              		.loc 1 2980 0
 11626 0012 054B     		ldr	r3, .L887+4
 11627 0014 1B78     		ldrb	r3, [r3]
 11628 0016 5A1E     		subs	r2, r3, #1
 11629 0018 9341     		sbcs	r3, r3, r2
 11630 001a DBB2     		uxtb	r3, r3
2981:mpu6050.c     **** }
 11631              		.loc 1 2981 0
 11632 001c 1800     		movs	r0, r3
 11633 001e BD46     		mov	sp, r7
 11634              		@ sp needed
 11635 0020 80BD     		pop	{r7, pc}
 11636              	.L888:
 11637 0022 C046     		.align	2
 11638              	.L887:
 11639 0024 00000000 		.word	devAddr
 11640 0028 00000000 		.word	buffer
 11641              		.cfi_endproc
 11642              	.LFE242:
 11643              		.size	MPU6050_getDMPInt2Status, .-MPU6050_getDMPInt2Status
 11644              		.section	.text.MPU6050_getDMPInt1Status,"ax",%progbits
 11645              		.align	2
 11646              		.global	MPU6050_getDMPInt1Status
 11647              		.code	16
 11648              		.thumb_func
 11649              		.type	MPU6050_getDMPInt1Status, %function
 11650              	MPU6050_getDMPInt1Status:
 11651              	.LFB243:
2982:mpu6050.c     **** bool MPU6050_getDMPInt1Status() {
 11652              		.loc 1 2982 0
 11653              		.cfi_startproc
 11654              		@ args = 0, pretend = 0, frame = 0
 11655              		@ frame_needed = 1, uses_anonymous_args = 0
 11656 0000 80B5     		push	{r7, lr}
 11657              		.cfi_def_cfa_offset 8
 11658              		.cfi_offset 7, -8
 11659              		.cfi_offset 14, -4
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 258


 11660 0002 00AF     		add	r7, sp, #0
 11661              		.cfi_def_cfa_register 7
2983:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_1_BIT, buffer);
 11662              		.loc 1 2983 0
 11663 0004 074B     		ldr	r3, .L891
 11664 0006 1878     		ldrb	r0, [r3]
 11665 0008 074B     		ldr	r3, .L891+4
 11666 000a 0122     		movs	r2, #1
 11667 000c 3921     		movs	r1, #57
 11668 000e FFF7FEFF 		bl	I2CReadBit
2984:mpu6050.c     ****     return buffer[0];
 11669              		.loc 1 2984 0
 11670 0012 054B     		ldr	r3, .L891+4
 11671 0014 1B78     		ldrb	r3, [r3]
 11672 0016 5A1E     		subs	r2, r3, #1
 11673 0018 9341     		sbcs	r3, r3, r2
 11674 001a DBB2     		uxtb	r3, r3
2985:mpu6050.c     **** }
 11675              		.loc 1 2985 0
 11676 001c 1800     		movs	r0, r3
 11677 001e BD46     		mov	sp, r7
 11678              		@ sp needed
 11679 0020 80BD     		pop	{r7, pc}
 11680              	.L892:
 11681 0022 C046     		.align	2
 11682              	.L891:
 11683 0024 00000000 		.word	devAddr
 11684 0028 00000000 		.word	buffer
 11685              		.cfi_endproc
 11686              	.LFE243:
 11687              		.size	MPU6050_getDMPInt1Status, .-MPU6050_getDMPInt1Status
 11688              		.section	.text.MPU6050_getDMPInt0Status,"ax",%progbits
 11689              		.align	2
 11690              		.global	MPU6050_getDMPInt0Status
 11691              		.code	16
 11692              		.thumb_func
 11693              		.type	MPU6050_getDMPInt0Status, %function
 11694              	MPU6050_getDMPInt0Status:
 11695              	.LFB244:
2986:mpu6050.c     **** bool MPU6050_getDMPInt0Status() {
 11696              		.loc 1 2986 0
 11697              		.cfi_startproc
 11698              		@ args = 0, pretend = 0, frame = 0
 11699              		@ frame_needed = 1, uses_anonymous_args = 0
 11700 0000 80B5     		push	{r7, lr}
 11701              		.cfi_def_cfa_offset 8
 11702              		.cfi_offset 7, -8
 11703              		.cfi_offset 14, -4
 11704 0002 00AF     		add	r7, sp, #0
 11705              		.cfi_def_cfa_register 7
2987:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_0_BIT, buffer);
 11706              		.loc 1 2987 0
 11707 0004 074B     		ldr	r3, .L895
 11708 0006 1878     		ldrb	r0, [r3]
 11709 0008 074B     		ldr	r3, .L895+4
 11710 000a 0022     		movs	r2, #0
 11711 000c 3921     		movs	r1, #57
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 259


 11712 000e FFF7FEFF 		bl	I2CReadBit
2988:mpu6050.c     ****     return buffer[0];
 11713              		.loc 1 2988 0
 11714 0012 054B     		ldr	r3, .L895+4
 11715 0014 1B78     		ldrb	r3, [r3]
 11716 0016 5A1E     		subs	r2, r3, #1
 11717 0018 9341     		sbcs	r3, r3, r2
 11718 001a DBB2     		uxtb	r3, r3
2989:mpu6050.c     **** }
 11719              		.loc 1 2989 0
 11720 001c 1800     		movs	r0, r3
 11721 001e BD46     		mov	sp, r7
 11722              		@ sp needed
 11723 0020 80BD     		pop	{r7, pc}
 11724              	.L896:
 11725 0022 C046     		.align	2
 11726              	.L895:
 11727 0024 00000000 		.word	devAddr
 11728 0028 00000000 		.word	buffer
 11729              		.cfi_endproc
 11730              	.LFE244:
 11731              		.size	MPU6050_getDMPInt0Status, .-MPU6050_getDMPInt0Status
 11732              		.section	.text.MPU6050_getIntPLLReadyStatus,"ax",%progbits
 11733              		.align	2
 11734              		.global	MPU6050_getIntPLLReadyStatus
 11735              		.code	16
 11736              		.thumb_func
 11737              		.type	MPU6050_getIntPLLReadyStatus, %function
 11738              	MPU6050_getIntPLLReadyStatus:
 11739              	.LFB245:
2990:mpu6050.c     **** 
2991:mpu6050.c     **** // INT_STATUS register (DMP functions)
2992:mpu6050.c     **** 
2993:mpu6050.c     **** bool MPU6050_getIntPLLReadyStatus() {
 11740              		.loc 1 2993 0
 11741              		.cfi_startproc
 11742              		@ args = 0, pretend = 0, frame = 0
 11743              		@ frame_needed = 1, uses_anonymous_args = 0
 11744 0000 80B5     		push	{r7, lr}
 11745              		.cfi_def_cfa_offset 8
 11746              		.cfi_offset 7, -8
 11747              		.cfi_offset 14, -4
 11748 0002 00AF     		add	r7, sp, #0
 11749              		.cfi_def_cfa_register 7
2994:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 11750              		.loc 1 2994 0
 11751 0004 074B     		ldr	r3, .L899
 11752 0006 1878     		ldrb	r0, [r3]
 11753 0008 074B     		ldr	r3, .L899+4
 11754 000a 0222     		movs	r2, #2
 11755 000c 3A21     		movs	r1, #58
 11756 000e FFF7FEFF 		bl	I2CReadBit
2995:mpu6050.c     ****     return buffer[0];
 11757              		.loc 1 2995 0
 11758 0012 054B     		ldr	r3, .L899+4
 11759 0014 1B78     		ldrb	r3, [r3]
 11760 0016 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 260


 11761 0018 9341     		sbcs	r3, r3, r2
 11762 001a DBB2     		uxtb	r3, r3
2996:mpu6050.c     **** }
 11763              		.loc 1 2996 0
 11764 001c 1800     		movs	r0, r3
 11765 001e BD46     		mov	sp, r7
 11766              		@ sp needed
 11767 0020 80BD     		pop	{r7, pc}
 11768              	.L900:
 11769 0022 C046     		.align	2
 11770              	.L899:
 11771 0024 00000000 		.word	devAddr
 11772 0028 00000000 		.word	buffer
 11773              		.cfi_endproc
 11774              	.LFE245:
 11775              		.size	MPU6050_getIntPLLReadyStatus, .-MPU6050_getIntPLLReadyStatus
 11776              		.section	.text.MPU6050_getIntDMPStatus,"ax",%progbits
 11777              		.align	2
 11778              		.global	MPU6050_getIntDMPStatus
 11779              		.code	16
 11780              		.thumb_func
 11781              		.type	MPU6050_getIntDMPStatus, %function
 11782              	MPU6050_getIntDMPStatus:
 11783              	.LFB246:
2997:mpu6050.c     **** bool MPU6050_getIntDMPStatus() {
 11784              		.loc 1 2997 0
 11785              		.cfi_startproc
 11786              		@ args = 0, pretend = 0, frame = 0
 11787              		@ frame_needed = 1, uses_anonymous_args = 0
 11788 0000 80B5     		push	{r7, lr}
 11789              		.cfi_def_cfa_offset 8
 11790              		.cfi_offset 7, -8
 11791              		.cfi_offset 14, -4
 11792 0002 00AF     		add	r7, sp, #0
 11793              		.cfi_def_cfa_register 7
2998:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 11794              		.loc 1 2998 0
 11795 0004 074B     		ldr	r3, .L903
 11796 0006 1878     		ldrb	r0, [r3]
 11797 0008 074B     		ldr	r3, .L903+4
 11798 000a 0122     		movs	r2, #1
 11799 000c 3A21     		movs	r1, #58
 11800 000e FFF7FEFF 		bl	I2CReadBit
2999:mpu6050.c     ****     return buffer[0];
 11801              		.loc 1 2999 0
 11802 0012 054B     		ldr	r3, .L903+4
 11803 0014 1B78     		ldrb	r3, [r3]
 11804 0016 5A1E     		subs	r2, r3, #1
 11805 0018 9341     		sbcs	r3, r3, r2
 11806 001a DBB2     		uxtb	r3, r3
3000:mpu6050.c     **** }
 11807              		.loc 1 3000 0
 11808 001c 1800     		movs	r0, r3
 11809 001e BD46     		mov	sp, r7
 11810              		@ sp needed
 11811 0020 80BD     		pop	{r7, pc}
 11812              	.L904:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 261


 11813 0022 C046     		.align	2
 11814              	.L903:
 11815 0024 00000000 		.word	devAddr
 11816 0028 00000000 		.word	buffer
 11817              		.cfi_endproc
 11818              	.LFE246:
 11819              		.size	MPU6050_getIntDMPStatus, .-MPU6050_getIntDMPStatus
 11820              		.section	.text.MPU6050_getDMPEnabled,"ax",%progbits
 11821              		.align	2
 11822              		.global	MPU6050_getDMPEnabled
 11823              		.code	16
 11824              		.thumb_func
 11825              		.type	MPU6050_getDMPEnabled, %function
 11826              	MPU6050_getDMPEnabled:
 11827              	.LFB247:
3001:mpu6050.c     **** 
3002:mpu6050.c     **** // USER_CTRL register (DMP functions)
3003:mpu6050.c     **** 
3004:mpu6050.c     **** bool MPU6050_getDMPEnabled() {
 11828              		.loc 1 3004 0
 11829              		.cfi_startproc
 11830              		@ args = 0, pretend = 0, frame = 0
 11831              		@ frame_needed = 1, uses_anonymous_args = 0
 11832 0000 80B5     		push	{r7, lr}
 11833              		.cfi_def_cfa_offset 8
 11834              		.cfi_offset 7, -8
 11835              		.cfi_offset 14, -4
 11836 0002 00AF     		add	r7, sp, #0
 11837              		.cfi_def_cfa_register 7
3005:mpu6050.c     ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
 11838              		.loc 1 3005 0
 11839 0004 074B     		ldr	r3, .L907
 11840 0006 1878     		ldrb	r0, [r3]
 11841 0008 074B     		ldr	r3, .L907+4
 11842 000a 0722     		movs	r2, #7
 11843 000c 6A21     		movs	r1, #106
 11844 000e FFF7FEFF 		bl	I2CReadBit
3006:mpu6050.c     ****     return buffer[0];
 11845              		.loc 1 3006 0
 11846 0012 054B     		ldr	r3, .L907+4
 11847 0014 1B78     		ldrb	r3, [r3]
 11848 0016 5A1E     		subs	r2, r3, #1
 11849 0018 9341     		sbcs	r3, r3, r2
 11850 001a DBB2     		uxtb	r3, r3
3007:mpu6050.c     **** }
 11851              		.loc 1 3007 0
 11852 001c 1800     		movs	r0, r3
 11853 001e BD46     		mov	sp, r7
 11854              		@ sp needed
 11855 0020 80BD     		pop	{r7, pc}
 11856              	.L908:
 11857 0022 C046     		.align	2
 11858              	.L907:
 11859 0024 00000000 		.word	devAddr
 11860 0028 00000000 		.word	buffer
 11861              		.cfi_endproc
 11862              	.LFE247:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 262


 11863              		.size	MPU6050_getDMPEnabled, .-MPU6050_getDMPEnabled
 11864              		.section	.text.MPU6050_setDMPEnabled,"ax",%progbits
 11865              		.align	2
 11866              		.global	MPU6050_setDMPEnabled
 11867              		.code	16
 11868              		.thumb_func
 11869              		.type	MPU6050_setDMPEnabled, %function
 11870              	MPU6050_setDMPEnabled:
 11871              	.LFB248:
3008:mpu6050.c     **** void MPU6050_setDMPEnabled(bool enabled) {
 11872              		.loc 1 3008 0
 11873              		.cfi_startproc
 11874              		@ args = 0, pretend = 0, frame = 8
 11875              		@ frame_needed = 1, uses_anonymous_args = 0
 11876 0000 80B5     		push	{r7, lr}
 11877              		.cfi_def_cfa_offset 8
 11878              		.cfi_offset 7, -8
 11879              		.cfi_offset 14, -4
 11880 0002 82B0     		sub	sp, sp, #8
 11881              		.cfi_def_cfa_offset 16
 11882 0004 00AF     		add	r7, sp, #0
 11883              		.cfi_def_cfa_register 7
 11884 0006 0200     		movs	r2, r0
 11885 0008 FB1D     		adds	r3, r7, #7
 11886 000a 1A70     		strb	r2, [r3]
3009:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 11887              		.loc 1 3009 0
 11888 000c 054B     		ldr	r3, .L910
 11889 000e 1878     		ldrb	r0, [r3]
 11890 0010 FB1D     		adds	r3, r7, #7
 11891 0012 1B78     		ldrb	r3, [r3]
 11892 0014 0722     		movs	r2, #7
 11893 0016 6A21     		movs	r1, #106
 11894 0018 FFF7FEFF 		bl	I2CWriteBit
3010:mpu6050.c     **** }
 11895              		.loc 1 3010 0
 11896 001c C046     		nop
 11897 001e BD46     		mov	sp, r7
 11898 0020 02B0     		add	sp, sp, #8
 11899              		@ sp needed
 11900 0022 80BD     		pop	{r7, pc}
 11901              	.L911:
 11902              		.align	2
 11903              	.L910:
 11904 0024 00000000 		.word	devAddr
 11905              		.cfi_endproc
 11906              	.LFE248:
 11907              		.size	MPU6050_setDMPEnabled, .-MPU6050_setDMPEnabled
 11908              		.section	.text.MPU6050_resetDMP,"ax",%progbits
 11909              		.align	2
 11910              		.global	MPU6050_resetDMP
 11911              		.code	16
 11912              		.thumb_func
 11913              		.type	MPU6050_resetDMP, %function
 11914              	MPU6050_resetDMP:
 11915              	.LFB249:
3011:mpu6050.c     **** void MPU6050_resetDMP() {
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 263


 11916              		.loc 1 3011 0
 11917              		.cfi_startproc
 11918              		@ args = 0, pretend = 0, frame = 0
 11919              		@ frame_needed = 1, uses_anonymous_args = 0
 11920 0000 80B5     		push	{r7, lr}
 11921              		.cfi_def_cfa_offset 8
 11922              		.cfi_offset 7, -8
 11923              		.cfi_offset 14, -4
 11924 0002 00AF     		add	r7, sp, #0
 11925              		.cfi_def_cfa_register 7
3012:mpu6050.c     ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 11926              		.loc 1 3012 0
 11927 0004 044B     		ldr	r3, .L913
 11928 0006 1878     		ldrb	r0, [r3]
 11929 0008 0123     		movs	r3, #1
 11930 000a 0322     		movs	r2, #3
 11931 000c 6A21     		movs	r1, #106
 11932 000e FFF7FEFF 		bl	I2CWriteBit
3013:mpu6050.c     **** }
 11933              		.loc 1 3013 0
 11934 0012 C046     		nop
 11935 0014 BD46     		mov	sp, r7
 11936              		@ sp needed
 11937 0016 80BD     		pop	{r7, pc}
 11938              	.L914:
 11939              		.align	2
 11940              	.L913:
 11941 0018 00000000 		.word	devAddr
 11942              		.cfi_endproc
 11943              	.LFE249:
 11944              		.size	MPU6050_resetDMP, .-MPU6050_resetDMP
 11945              		.section	.text.MPU6050_setMemoryBank,"ax",%progbits
 11946              		.align	2
 11947              		.global	MPU6050_setMemoryBank
 11948              		.code	16
 11949              		.thumb_func
 11950              		.type	MPU6050_setMemoryBank, %function
 11951              	MPU6050_setMemoryBank:
 11952              	.LFB250:
3014:mpu6050.c     **** 
3015:mpu6050.c     **** // BANK_SEL register
3016:mpu6050.c     **** 
3017:mpu6050.c     **** void MPU6050_setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 11953              		.loc 1 3017 0
 11954              		.cfi_startproc
 11955              		@ args = 0, pretend = 0, frame = 8
 11956              		@ frame_needed = 1, uses_anonymous_args = 0
 11957 0000 90B5     		push	{r4, r7, lr}
 11958              		.cfi_def_cfa_offset 12
 11959              		.cfi_offset 4, -12
 11960              		.cfi_offset 7, -8
 11961              		.cfi_offset 14, -4
 11962 0002 83B0     		sub	sp, sp, #12
 11963              		.cfi_def_cfa_offset 24
 11964 0004 00AF     		add	r7, sp, #0
 11965              		.cfi_def_cfa_register 7
 11966 0006 0400     		movs	r4, r0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 264


 11967 0008 0800     		movs	r0, r1
 11968 000a 1100     		movs	r1, r2
 11969 000c FB1D     		adds	r3, r7, #7
 11970 000e 221C     		adds	r2, r4, #0
 11971 0010 1A70     		strb	r2, [r3]
 11972 0012 BB1D     		adds	r3, r7, #6
 11973 0014 021C     		adds	r2, r0, #0
 11974 0016 1A70     		strb	r2, [r3]
 11975 0018 7B1D     		adds	r3, r7, #5
 11976 001a 0A1C     		adds	r2, r1, #0
 11977 001c 1A70     		strb	r2, [r3]
3018:mpu6050.c     ****     bank &= 0x1F;
 11978              		.loc 1 3018 0
 11979 001e FB1D     		adds	r3, r7, #7
 11980 0020 FA1D     		adds	r2, r7, #7
 11981 0022 1278     		ldrb	r2, [r2]
 11982 0024 1F21     		movs	r1, #31
 11983 0026 0A40     		ands	r2, r1
 11984 0028 1A70     		strb	r2, [r3]
3019:mpu6050.c     ****     if (userBank) bank |= 0x20;
 11985              		.loc 1 3019 0
 11986 002a 7B1D     		adds	r3, r7, #5
 11987 002c 1B78     		ldrb	r3, [r3]
 11988 002e 002B     		cmp	r3, #0
 11989 0030 05D0     		beq	.L916
 11990              		.loc 1 3019 0 is_stmt 0 discriminator 1
 11991 0032 FB1D     		adds	r3, r7, #7
 11992 0034 FA1D     		adds	r2, r7, #7
 11993 0036 1278     		ldrb	r2, [r2]
 11994 0038 2021     		movs	r1, #32
 11995 003a 0A43     		orrs	r2, r1
 11996 003c 1A70     		strb	r2, [r3]
 11997              	.L916:
3020:mpu6050.c     ****     if (prefetchEnabled) bank |= 0x40;
 11998              		.loc 1 3020 0 is_stmt 1
 11999 003e BB1D     		adds	r3, r7, #6
 12000 0040 1B78     		ldrb	r3, [r3]
 12001 0042 002B     		cmp	r3, #0
 12002 0044 05D0     		beq	.L917
 12003              		.loc 1 3020 0 is_stmt 0 discriminator 1
 12004 0046 FB1D     		adds	r3, r7, #7
 12005 0048 FA1D     		adds	r2, r7, #7
 12006 004a 1278     		ldrb	r2, [r2]
 12007 004c 4021     		movs	r1, #64
 12008 004e 0A43     		orrs	r2, r1
 12009 0050 1A70     		strb	r2, [r3]
 12010              	.L917:
3021:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 12011              		.loc 1 3021 0 is_stmt 1
 12012 0052 064B     		ldr	r3, .L918
 12013 0054 1878     		ldrb	r0, [r3]
 12014 0056 FB1D     		adds	r3, r7, #7
 12015 0058 1B78     		ldrb	r3, [r3]
 12016 005a 1A00     		movs	r2, r3
 12017 005c 6D21     		movs	r1, #109
 12018 005e FFF7FEFF 		bl	I2CWriteByte
3022:mpu6050.c     **** }
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 265


 12019              		.loc 1 3022 0
 12020 0062 C046     		nop
 12021 0064 BD46     		mov	sp, r7
 12022 0066 03B0     		add	sp, sp, #12
 12023              		@ sp needed
 12024 0068 90BD     		pop	{r4, r7, pc}
 12025              	.L919:
 12026 006a C046     		.align	2
 12027              	.L918:
 12028 006c 00000000 		.word	devAddr
 12029              		.cfi_endproc
 12030              	.LFE250:
 12031              		.size	MPU6050_setMemoryBank, .-MPU6050_setMemoryBank
 12032              		.section	.text.MPU6050_setMemoryStartAddress,"ax",%progbits
 12033              		.align	2
 12034              		.global	MPU6050_setMemoryStartAddress
 12035              		.code	16
 12036              		.thumb_func
 12037              		.type	MPU6050_setMemoryStartAddress, %function
 12038              	MPU6050_setMemoryStartAddress:
 12039              	.LFB251:
3023:mpu6050.c     **** 
3024:mpu6050.c     **** // MEM_START_ADDR register
3025:mpu6050.c     **** 
3026:mpu6050.c     **** void MPU6050_setMemoryStartAddress(uint8_t address) {
 12040              		.loc 1 3026 0
 12041              		.cfi_startproc
 12042              		@ args = 0, pretend = 0, frame = 8
 12043              		@ frame_needed = 1, uses_anonymous_args = 0
 12044 0000 80B5     		push	{r7, lr}
 12045              		.cfi_def_cfa_offset 8
 12046              		.cfi_offset 7, -8
 12047              		.cfi_offset 14, -4
 12048 0002 82B0     		sub	sp, sp, #8
 12049              		.cfi_def_cfa_offset 16
 12050 0004 00AF     		add	r7, sp, #0
 12051              		.cfi_def_cfa_register 7
 12052 0006 0200     		movs	r2, r0
 12053 0008 FB1D     		adds	r3, r7, #7
 12054 000a 1A70     		strb	r2, [r3]
3027:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 12055              		.loc 1 3027 0
 12056 000c 054B     		ldr	r3, .L921
 12057 000e 1878     		ldrb	r0, [r3]
 12058 0010 FB1D     		adds	r3, r7, #7
 12059 0012 1B78     		ldrb	r3, [r3]
 12060 0014 1A00     		movs	r2, r3
 12061 0016 6E21     		movs	r1, #110
 12062 0018 FFF7FEFF 		bl	I2CWriteByte
3028:mpu6050.c     **** }
 12063              		.loc 1 3028 0
 12064 001c C046     		nop
 12065 001e BD46     		mov	sp, r7
 12066 0020 02B0     		add	sp, sp, #8
 12067              		@ sp needed
 12068 0022 80BD     		pop	{r7, pc}
 12069              	.L922:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 266


 12070              		.align	2
 12071              	.L921:
 12072 0024 00000000 		.word	devAddr
 12073              		.cfi_endproc
 12074              	.LFE251:
 12075              		.size	MPU6050_setMemoryStartAddress, .-MPU6050_setMemoryStartAddress
 12076              		.section	.text.MPU6050_readMemoryByte,"ax",%progbits
 12077              		.align	2
 12078              		.global	MPU6050_readMemoryByte
 12079              		.code	16
 12080              		.thumb_func
 12081              		.type	MPU6050_readMemoryByte, %function
 12082              	MPU6050_readMemoryByte:
 12083              	.LFB252:
3029:mpu6050.c     **** 
3030:mpu6050.c     **** // MEM_R_W register
3031:mpu6050.c     **** 
3032:mpu6050.c     **** uint8_t MPU6050_readMemoryByte() {
 12084              		.loc 1 3032 0
 12085              		.cfi_startproc
 12086              		@ args = 0, pretend = 0, frame = 0
 12087              		@ frame_needed = 1, uses_anonymous_args = 0
 12088 0000 80B5     		push	{r7, lr}
 12089              		.cfi_def_cfa_offset 8
 12090              		.cfi_offset 7, -8
 12091              		.cfi_offset 14, -4
 12092 0002 00AF     		add	r7, sp, #0
 12093              		.cfi_def_cfa_register 7
3033:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 12094              		.loc 1 3033 0
 12095 0004 054B     		ldr	r3, .L925
 12096 0006 1B78     		ldrb	r3, [r3]
 12097 0008 054A     		ldr	r2, .L925+4
 12098 000a 6F21     		movs	r1, #111
 12099 000c 1800     		movs	r0, r3
 12100 000e FFF7FEFF 		bl	I2CReadByte
3034:mpu6050.c     ****     return buffer[0];
 12101              		.loc 1 3034 0
 12102 0012 034B     		ldr	r3, .L925+4
 12103 0014 1B78     		ldrb	r3, [r3]
3035:mpu6050.c     **** }
 12104              		.loc 1 3035 0
 12105 0016 1800     		movs	r0, r3
 12106 0018 BD46     		mov	sp, r7
 12107              		@ sp needed
 12108 001a 80BD     		pop	{r7, pc}
 12109              	.L926:
 12110              		.align	2
 12111              	.L925:
 12112 001c 00000000 		.word	devAddr
 12113 0020 00000000 		.word	buffer
 12114              		.cfi_endproc
 12115              	.LFE252:
 12116              		.size	MPU6050_readMemoryByte, .-MPU6050_readMemoryByte
 12117              		.section	.text.MPU6050_writeMemoryByte,"ax",%progbits
 12118              		.align	2
 12119              		.global	MPU6050_writeMemoryByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 267


 12120              		.code	16
 12121              		.thumb_func
 12122              		.type	MPU6050_writeMemoryByte, %function
 12123              	MPU6050_writeMemoryByte:
 12124              	.LFB253:
3036:mpu6050.c     **** void MPU6050_writeMemoryByte(uint8_t data) {
 12125              		.loc 1 3036 0
 12126              		.cfi_startproc
 12127              		@ args = 0, pretend = 0, frame = 8
 12128              		@ frame_needed = 1, uses_anonymous_args = 0
 12129 0000 80B5     		push	{r7, lr}
 12130              		.cfi_def_cfa_offset 8
 12131              		.cfi_offset 7, -8
 12132              		.cfi_offset 14, -4
 12133 0002 82B0     		sub	sp, sp, #8
 12134              		.cfi_def_cfa_offset 16
 12135 0004 00AF     		add	r7, sp, #0
 12136              		.cfi_def_cfa_register 7
 12137 0006 0200     		movs	r2, r0
 12138 0008 FB1D     		adds	r3, r7, #7
 12139 000a 1A70     		strb	r2, [r3]
3037:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_R_W, data);
 12140              		.loc 1 3037 0
 12141 000c 054B     		ldr	r3, .L928
 12142 000e 1878     		ldrb	r0, [r3]
 12143 0010 FB1D     		adds	r3, r7, #7
 12144 0012 1B78     		ldrb	r3, [r3]
 12145 0014 1A00     		movs	r2, r3
 12146 0016 6F21     		movs	r1, #111
 12147 0018 FFF7FEFF 		bl	I2CWriteByte
3038:mpu6050.c     **** }
 12148              		.loc 1 3038 0
 12149 001c C046     		nop
 12150 001e BD46     		mov	sp, r7
 12151 0020 02B0     		add	sp, sp, #8
 12152              		@ sp needed
 12153 0022 80BD     		pop	{r7, pc}
 12154              	.L929:
 12155              		.align	2
 12156              	.L928:
 12157 0024 00000000 		.word	devAddr
 12158              		.cfi_endproc
 12159              	.LFE253:
 12160              		.size	MPU6050_writeMemoryByte, .-MPU6050_writeMemoryByte
 12161              		.section	.text.MPU6050_readMemoryBlock,"ax",%progbits
 12162              		.align	2
 12163              		.global	MPU6050_readMemoryBlock
 12164              		.code	16
 12165              		.thumb_func
 12166              		.type	MPU6050_readMemoryBlock, %function
 12167              	MPU6050_readMemoryBlock:
 12168              	.LFB254:
3039:mpu6050.c     **** void MPU6050_readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 12169              		.loc 1 3039 0
 12170              		.cfi_startproc
 12171              		@ args = 0, pretend = 0, frame = 16
 12172              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 268


 12173 0000 90B5     		push	{r4, r7, lr}
 12174              		.cfi_def_cfa_offset 12
 12175              		.cfi_offset 4, -12
 12176              		.cfi_offset 7, -8
 12177              		.cfi_offset 14, -4
 12178 0002 85B0     		sub	sp, sp, #20
 12179              		.cfi_def_cfa_offset 32
 12180 0004 00AF     		add	r7, sp, #0
 12181              		.cfi_def_cfa_register 7
 12182 0006 7860     		str	r0, [r7, #4]
 12183 0008 0C00     		movs	r4, r1
 12184 000a 1000     		movs	r0, r2
 12185 000c 1900     		movs	r1, r3
 12186 000e BB1C     		adds	r3, r7, #2
 12187 0010 221C     		adds	r2, r4, #0
 12188 0012 1A80     		strh	r2, [r3]
 12189 0014 7B1C     		adds	r3, r7, #1
 12190 0016 021C     		adds	r2, r0, #0
 12191 0018 1A70     		strb	r2, [r3]
 12192 001a 3B00     		movs	r3, r7
 12193 001c 0A1C     		adds	r2, r1, #0
 12194 001e 1A70     		strb	r2, [r3]
3040:mpu6050.c     ****     MPU6050_setMemoryBank(bank, false, false);
 12195              		.loc 1 3040 0
 12196 0020 7B1C     		adds	r3, r7, #1
 12197 0022 1B78     		ldrb	r3, [r3]
 12198 0024 0022     		movs	r2, #0
 12199 0026 0021     		movs	r1, #0
 12200 0028 1800     		movs	r0, r3
 12201 002a FFF7FEFF 		bl	MPU6050_setMemoryBank
3041:mpu6050.c     ****     MPU6050_setMemoryStartAddress(address);
 12202              		.loc 1 3041 0
 12203 002e 3B00     		movs	r3, r7
 12204 0030 1B78     		ldrb	r3, [r3]
 12205 0032 1800     		movs	r0, r3
 12206 0034 FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
3042:mpu6050.c     ****     uint8_t chunkSize;
3043:mpu6050.c     **** 	uint16_t i = 0;
 12207              		.loc 1 3043 0
 12208 0038 0C23     		movs	r3, #12
 12209 003a FB18     		adds	r3, r7, r3
 12210 003c 0022     		movs	r2, #0
 12211 003e 1A80     		strh	r2, [r3]
3044:mpu6050.c     ****     while ( i < dataSize) {
 12212              		.loc 1 3044 0
 12213 0040 6AE0     		b	.L931
 12214              	.L935:
3045:mpu6050.c     ****         // determine correct chunk size according to bank position and data size
3046:mpu6050.c     ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 12215              		.loc 1 3046 0
 12216 0042 0F23     		movs	r3, #15
 12217 0044 FB18     		adds	r3, r7, r3
 12218 0046 1022     		movs	r2, #16
 12219 0048 1A70     		strb	r2, [r3]
3047:mpu6050.c     **** 
3048:mpu6050.c     ****         // make sure we don't go past the data size
3049:mpu6050.c     ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 269


 12220              		.loc 1 3049 0
 12221 004a 0C23     		movs	r3, #12
 12222 004c FB18     		adds	r3, r7, r3
 12223 004e 1A88     		ldrh	r2, [r3]
 12224 0050 0F23     		movs	r3, #15
 12225 0052 FB18     		adds	r3, r7, r3
 12226 0054 1B78     		ldrb	r3, [r3]
 12227 0056 D218     		adds	r2, r2, r3
 12228 0058 BB1C     		adds	r3, r7, #2
 12229 005a 1B88     		ldrh	r3, [r3]
 12230 005c 9A42     		cmp	r2, r3
 12231 005e 0ADD     		ble	.L932
 12232              		.loc 1 3049 0 is_stmt 0 discriminator 1
 12233 0060 BB1C     		adds	r3, r7, #2
 12234 0062 1B88     		ldrh	r3, [r3]
 12235 0064 D9B2     		uxtb	r1, r3
 12236 0066 0C23     		movs	r3, #12
 12237 0068 FB18     		adds	r3, r7, r3
 12238 006a 1B88     		ldrh	r3, [r3]
 12239 006c DAB2     		uxtb	r2, r3
 12240 006e 0F23     		movs	r3, #15
 12241 0070 FB18     		adds	r3, r7, r3
 12242 0072 8A1A     		subs	r2, r1, r2
 12243 0074 1A70     		strb	r2, [r3]
 12244              	.L932:
3050:mpu6050.c     **** 
3051:mpu6050.c     ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3052:mpu6050.c     ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
 12245              		.loc 1 3052 0 is_stmt 1
 12246 0076 0F23     		movs	r3, #15
 12247 0078 FB18     		adds	r3, r7, r3
 12248 007a 1A78     		ldrb	r2, [r3]
 12249 007c 3B00     		movs	r3, r7
 12250 007e 1B78     		ldrb	r3, [r3]
 12251 0080 8021     		movs	r1, #128
 12252 0082 4900     		lsls	r1, r1, #1
 12253 0084 CB1A     		subs	r3, r1, r3
 12254 0086 9A42     		cmp	r2, r3
 12255 0088 05DD     		ble	.L933
 12256              		.loc 1 3052 0 is_stmt 0 discriminator 1
 12257 008a 0F23     		movs	r3, #15
 12258 008c FB18     		adds	r3, r7, r3
 12259 008e 3A00     		movs	r2, r7
 12260 0090 1278     		ldrb	r2, [r2]
 12261 0092 5242     		rsbs	r2, r2, #0
 12262 0094 1A70     		strb	r2, [r3]
 12263              	.L933:
3053:mpu6050.c     **** 
3054:mpu6050.c     ****         // read the chunk of data as specified
3055:mpu6050.c     ****         I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 12264              		.loc 1 3055 0 is_stmt 1
 12265 0096 264B     		ldr	r3, .L936
 12266 0098 1878     		ldrb	r0, [r3]
 12267 009a 0C23     		movs	r3, #12
 12268 009c FB18     		adds	r3, r7, r3
 12269 009e 1B88     		ldrh	r3, [r3]
 12270 00a0 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 270


 12271 00a2 D118     		adds	r1, r2, r3
 12272 00a4 0F23     		movs	r3, #15
 12273 00a6 FB18     		adds	r3, r7, r3
 12274 00a8 1A78     		ldrb	r2, [r3]
 12275 00aa 0B00     		movs	r3, r1
 12276 00ac 6F21     		movs	r1, #111
 12277 00ae FFF7FEFF 		bl	I2CReadBytes
3056:mpu6050.c     ****         
3057:mpu6050.c     ****         // increase byte index by [chunkSize]
3058:mpu6050.c     ****         i += chunkSize;
 12278              		.loc 1 3058 0
 12279 00b2 0F23     		movs	r3, #15
 12280 00b4 FB18     		adds	r3, r7, r3
 12281 00b6 1B78     		ldrb	r3, [r3]
 12282 00b8 99B2     		uxth	r1, r3
 12283 00ba 0C23     		movs	r3, #12
 12284 00bc FB18     		adds	r3, r7, r3
 12285 00be 0C22     		movs	r2, #12
 12286 00c0 BA18     		adds	r2, r7, r2
 12287 00c2 1288     		ldrh	r2, [r2]
 12288 00c4 8A18     		adds	r2, r1, r2
 12289 00c6 1A80     		strh	r2, [r3]
3059:mpu6050.c     **** 
3060:mpu6050.c     ****         // uint8_t automatically wraps to 0 at 256
3061:mpu6050.c     ****         address += chunkSize;
 12290              		.loc 1 3061 0
 12291 00c8 3B00     		movs	r3, r7
 12292 00ca 3900     		movs	r1, r7
 12293 00cc 0F22     		movs	r2, #15
 12294 00ce BA18     		adds	r2, r7, r2
 12295 00d0 0978     		ldrb	r1, [r1]
 12296 00d2 1278     		ldrb	r2, [r2]
 12297 00d4 8A18     		adds	r2, r1, r2
 12298 00d6 1A70     		strb	r2, [r3]
 12299 00d8 7B1C     		adds	r3, r7, #1
 12300 00da 7A1C     		adds	r2, r7, #1
 12301 00dc 1278     		ldrb	r2, [r2]
 12302 00de 1A70     		strb	r2, [r3]
3062:mpu6050.c     **** 
3063:mpu6050.c     ****         // if we aren't done, update bank (if necessary) and address
3064:mpu6050.c     ****         if (i < dataSize) {
 12303              		.loc 1 3064 0
 12304 00e0 0C23     		movs	r3, #12
 12305 00e2 FA18     		adds	r2, r7, r3
 12306 00e4 BB1C     		adds	r3, r7, #2
 12307 00e6 1288     		ldrh	r2, [r2]
 12308 00e8 1B88     		ldrh	r3, [r3]
 12309 00ea 9A42     		cmp	r2, r3
 12310 00ec 14D2     		bcs	.L931
3065:mpu6050.c     ****             if (address == 0) bank++;
 12311              		.loc 1 3065 0
 12312 00ee 3B00     		movs	r3, r7
 12313 00f0 1B78     		ldrb	r3, [r3]
 12314 00f2 002B     		cmp	r3, #0
 12315 00f4 04D1     		bne	.L934
 12316              		.loc 1 3065 0 is_stmt 0 discriminator 1
 12317 00f6 7B1C     		adds	r3, r7, #1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 271


 12318 00f8 1A78     		ldrb	r2, [r3]
 12319 00fa 7B1C     		adds	r3, r7, #1
 12320 00fc 0132     		adds	r2, r2, #1
 12321 00fe 1A70     		strb	r2, [r3]
 12322              	.L934:
3066:mpu6050.c     ****             MPU6050_setMemoryBank(bank, false, false);
 12323              		.loc 1 3066 0 is_stmt 1
 12324 0100 7B1C     		adds	r3, r7, #1
 12325 0102 1B78     		ldrb	r3, [r3]
 12326 0104 0022     		movs	r2, #0
 12327 0106 0021     		movs	r1, #0
 12328 0108 1800     		movs	r0, r3
 12329 010a FFF7FEFF 		bl	MPU6050_setMemoryBank
3067:mpu6050.c     ****             MPU6050_setMemoryStartAddress(address);
 12330              		.loc 1 3067 0
 12331 010e 3B00     		movs	r3, r7
 12332 0110 1B78     		ldrb	r3, [r3]
 12333 0112 1800     		movs	r0, r3
 12334 0114 FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
 12335              	.L931:
3044:mpu6050.c     ****         // determine correct chunk size according to bank position and data size
 12336              		.loc 1 3044 0
 12337 0118 0C23     		movs	r3, #12
 12338 011a FA18     		adds	r2, r7, r3
 12339 011c BB1C     		adds	r3, r7, #2
 12340 011e 1288     		ldrh	r2, [r2]
 12341 0120 1B88     		ldrh	r3, [r3]
 12342 0122 9A42     		cmp	r2, r3
 12343 0124 8DD3     		bcc	.L935
3068:mpu6050.c     ****         }
3069:mpu6050.c     ****     }
3070:mpu6050.c     **** }
 12344              		.loc 1 3070 0
 12345 0126 C046     		nop
 12346 0128 BD46     		mov	sp, r7
 12347 012a 05B0     		add	sp, sp, #20
 12348              		@ sp needed
 12349 012c 90BD     		pop	{r4, r7, pc}
 12350              	.L937:
 12351 012e C046     		.align	2
 12352              	.L936:
 12353 0130 00000000 		.word	devAddr
 12354              		.cfi_endproc
 12355              	.LFE254:
 12356              		.size	MPU6050_readMemoryBlock, .-MPU6050_readMemoryBlock
 12357              		.section	.text.MPU6050_getDMPConfig1,"ax",%progbits
 12358              		.align	2
 12359              		.global	MPU6050_getDMPConfig1
 12360              		.code	16
 12361              		.thumb_func
 12362              		.type	MPU6050_getDMPConfig1, %function
 12363              	MPU6050_getDMPConfig1:
 12364              	.LFB255:
3071:mpu6050.c     **** #if !(I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
3072:mpu6050.c     **** bool MPU6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address
3073:mpu6050.c     ****     setMemoryBank(bank);
3074:mpu6050.c     ****     setMemoryStartAddress(address);
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 272


3075:mpu6050.c     ****     uint8_t chunkSize;
3076:mpu6050.c     ****     uint8_t *verifyBuffer;
3077:mpu6050.c     ****     uint8_t *progBuffer;
3078:mpu6050.c     ****     uint16_t i;
3079:mpu6050.c     ****     uint8_t j;
3080:mpu6050.c     ****     if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
3081:mpu6050.c     ****     if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
3082:mpu6050.c     ****     for (i = 0; i < dataSize;) {
3083:mpu6050.c     ****         // determine correct chunk size according to bank position and data size
3084:mpu6050.c     ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
3085:mpu6050.c     **** 
3086:mpu6050.c     ****         // make sure we don't go past the data size
3087:mpu6050.c     ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
3088:mpu6050.c     **** 
3089:mpu6050.c     ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3090:mpu6050.c     ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
3091:mpu6050.c     ****         
3092:mpu6050.c     ****         if (useProgMem) {
3093:mpu6050.c     ****             // write the chunk of data as specified
3094:mpu6050.c     ****             for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3095:mpu6050.c     ****         } else {
3096:mpu6050.c     ****             // write the chunk of data as specified
3097:mpu6050.c     ****             progBuffer = (uint8_t *)data + i;
3098:mpu6050.c     ****         }
3099:mpu6050.c     **** 
3100:mpu6050.c     ****         I2CWriteBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
3101:mpu6050.c     **** 
3102:mpu6050.c     ****         // verify data if needed
3103:mpu6050.c     ****         if (verify && verifyBuffer) {
3104:mpu6050.c     ****             setMemoryBank(bank);
3105:mpu6050.c     ****             setMemoryStartAddress(address);
3106:mpu6050.c     ****             I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
3107:mpu6050.c     ****             if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
3108:mpu6050.c     ****                 /*Serial.print("Block write verification error, bank ");
3109:mpu6050.c     ****                 Serial.print(bank, DEC);
3110:mpu6050.c     ****                 Serial.print(", address ");
3111:mpu6050.c     ****                 Serial.print(address, DEC);
3112:mpu6050.c     ****                 Serial.print("!\nExpected:");
3113:mpu6050.c     ****                 for (j = 0; j < chunkSize; j++) {
3114:mpu6050.c     ****                     Serial.print(" 0x");
3115:mpu6050.c     ****                     if (progBuffer[j] < 16) Serial.print("0");
3116:mpu6050.c     ****                     Serial.print(progBuffer[j], HEX);
3117:mpu6050.c     ****                 }
3118:mpu6050.c     ****                 Serial.print("\nReceived:");
3119:mpu6050.c     ****                 for (uint8_t j = 0; j < chunkSize; j++) {
3120:mpu6050.c     ****                     Serial.print(" 0x");
3121:mpu6050.c     ****                     if (verifyBuffer[i + j] < 16) Serial.print("0");
3122:mpu6050.c     ****                     Serial.print(verifyBuffer[i + j], HEX);
3123:mpu6050.c     ****                 }
3124:mpu6050.c     ****                 Serial.print("\n");*/
3125:mpu6050.c     ****                 free(verifyBuffer);
3126:mpu6050.c     ****                 if (useProgMem) free(progBuffer);
3127:mpu6050.c     ****                 return false; // uh oh.
3128:mpu6050.c     ****             }
3129:mpu6050.c     ****         }
3130:mpu6050.c     **** 
3131:mpu6050.c     ****         // increase byte index by [chunkSize]
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 273


3132:mpu6050.c     ****         i += chunkSize;
3133:mpu6050.c     **** 
3134:mpu6050.c     ****         // uint8_t automatically wraps to 0 at 256
3135:mpu6050.c     ****         address += chunkSize;
3136:mpu6050.c     **** 
3137:mpu6050.c     ****         // if we aren't done, update bank (if necessary) and address
3138:mpu6050.c     ****         if (i < dataSize) {
3139:mpu6050.c     ****             if (address == 0) bank++;
3140:mpu6050.c     ****             setMemoryBank(bank);
3141:mpu6050.c     ****             setMemoryStartAddress(address);
3142:mpu6050.c     ****         }
3143:mpu6050.c     ****     }
3144:mpu6050.c     ****     if (verify) free(verifyBuffer);
3145:mpu6050.c     ****     if (useProgMem) free(progBuffer);
3146:mpu6050.c     ****     return true;
3147:mpu6050.c     **** }
3148:mpu6050.c     **** bool MPU6050_writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t add
3149:mpu6050.c     ****     return writeMemoryBlock(data, dataSize, bank, address, verify, true);
3150:mpu6050.c     **** }
3151:mpu6050.c     **** bool MPU6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
3152:mpu6050.c     ****     uint8_t *progBuffer, success, special;
3153:mpu6050.c     ****     uint16_t i, j;
3154:mpu6050.c     ****     if (useProgMem) {
3155:mpu6050.c     ****         progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
3156:mpu6050.c     ****     }
3157:mpu6050.c     **** 
3158:mpu6050.c     ****     // config set data is a long string of blocks with the following structure:
3159:mpu6050.c     ****     // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
3160:mpu6050.c     ****     uint8_t bank, offset, length;
3161:mpu6050.c     ****     for (i = 0; i < dataSize;) {
3162:mpu6050.c     ****         if (useProgMem) {
3163:mpu6050.c     ****             bank = pgm_read_byte(data + i++);
3164:mpu6050.c     ****             offset = pgm_read_byte(data + i++);
3165:mpu6050.c     ****             length = pgm_read_byte(data + i++);
3166:mpu6050.c     ****         } else {
3167:mpu6050.c     ****             bank = data[i++];
3168:mpu6050.c     ****             offset = data[i++];
3169:mpu6050.c     ****             length = data[i++];
3170:mpu6050.c     ****         }
3171:mpu6050.c     **** 
3172:mpu6050.c     ****         // write data or perform special action
3173:mpu6050.c     ****         if (length > 0) {
3174:mpu6050.c     ****             // regular block of data to write
3175:mpu6050.c     ****             /*Serial.print("Writing config block to bank ");
3176:mpu6050.c     ****             Serial.print(bank);
3177:mpu6050.c     ****             Serial.print(", offset ");
3178:mpu6050.c     ****             Serial.print(offset);
3179:mpu6050.c     ****             Serial.print(", length=");
3180:mpu6050.c     ****             Serial.println(length);*/
3181:mpu6050.c     ****             if (useProgMem) {
3182:mpu6050.c     ****                 if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length
3183:mpu6050.c     ****                 for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3184:mpu6050.c     ****             } else {
3185:mpu6050.c     ****                 progBuffer = (uint8_t *)data + i;
3186:mpu6050.c     ****             }
3187:mpu6050.c     ****             success = writeMemoryBlock(progBuffer, length, bank, offset, true);
3188:mpu6050.c     ****             i += length;
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 274


3189:mpu6050.c     ****         } else {
3190:mpu6050.c     ****             // special instruction
3191:mpu6050.c     ****             // NOTE: this kind of behavior (what and when to do certain things)
3192:mpu6050.c     ****             // is totally undocumented. This code is in here based on observed
3193:mpu6050.c     ****             // behavior only, and exactly why (or even whether) it has to be here
3194:mpu6050.c     ****             // is anybody's guess for now.
3195:mpu6050.c     ****             if (useProgMem) {
3196:mpu6050.c     ****                 special = pgm_read_byte(data + i++);
3197:mpu6050.c     ****             } else {
3198:mpu6050.c     ****                 special = data[i++];
3199:mpu6050.c     ****             }
3200:mpu6050.c     ****             /*Serial.print("Special command code ");
3201:mpu6050.c     ****             Serial.print(special, HEX);
3202:mpu6050.c     ****             Serial.println(" found...");*/
3203:mpu6050.c     ****             if (special == 0x01) {
3204:mpu6050.c     ****                 // enable DMP-related interrupts
3205:mpu6050.c     ****                 
3206:mpu6050.c     ****                 //setIntZeroMotionEnabled(true);
3207:mpu6050.c     ****                 //setIntFIFOBufferOverflowEnabled(true);
3208:mpu6050.c     ****                 //setIntDMPEnabled(true);
3209:mpu6050.c     ****                 I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
3210:mpu6050.c     **** 
3211:mpu6050.c     ****                 success = true;
3212:mpu6050.c     ****             } else {
3213:mpu6050.c     ****                 // unknown special command
3214:mpu6050.c     ****                 success = false;
3215:mpu6050.c     ****             }
3216:mpu6050.c     ****         }
3217:mpu6050.c     ****         
3218:mpu6050.c     ****         if (!success) {
3219:mpu6050.c     ****             if (useProgMem) free(progBuffer);
3220:mpu6050.c     ****             return false; // uh oh
3221:mpu6050.c     ****         }
3222:mpu6050.c     ****     }
3223:mpu6050.c     ****     if (useProgMem) free(progBuffer);
3224:mpu6050.c     ****     return true;
3225:mpu6050.c     **** }
3226:mpu6050.c     **** 
3227:mpu6050.c     **** bool MPU6050_writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
3228:mpu6050.c     ****     return writeDMPConfigurationSet(data, dataSize, true);
3229:mpu6050.c     **** }
3230:mpu6050.c     **** #endif
3231:mpu6050.c     **** // DMP_CFG_1 register
3232:mpu6050.c     **** 
3233:mpu6050.c     **** uint8_t MPU6050_getDMPConfig1() {
 12365              		.loc 1 3233 0
 12366              		.cfi_startproc
 12367              		@ args = 0, pretend = 0, frame = 0
 12368              		@ frame_needed = 1, uses_anonymous_args = 0
 12369 0000 80B5     		push	{r7, lr}
 12370              		.cfi_def_cfa_offset 8
 12371              		.cfi_offset 7, -8
 12372              		.cfi_offset 14, -4
 12373 0002 00AF     		add	r7, sp, #0
 12374              		.cfi_def_cfa_register 7
3234:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
 12375              		.loc 1 3234 0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 275


 12376 0004 054B     		ldr	r3, .L940
 12377 0006 1B78     		ldrb	r3, [r3]
 12378 0008 054A     		ldr	r2, .L940+4
 12379 000a 7021     		movs	r1, #112
 12380 000c 1800     		movs	r0, r3
 12381 000e FFF7FEFF 		bl	I2CReadByte
3235:mpu6050.c     ****     return buffer[0];
 12382              		.loc 1 3235 0
 12383 0012 034B     		ldr	r3, .L940+4
 12384 0014 1B78     		ldrb	r3, [r3]
3236:mpu6050.c     **** }
 12385              		.loc 1 3236 0
 12386 0016 1800     		movs	r0, r3
 12387 0018 BD46     		mov	sp, r7
 12388              		@ sp needed
 12389 001a 80BD     		pop	{r7, pc}
 12390              	.L941:
 12391              		.align	2
 12392              	.L940:
 12393 001c 00000000 		.word	devAddr
 12394 0020 00000000 		.word	buffer
 12395              		.cfi_endproc
 12396              	.LFE255:
 12397              		.size	MPU6050_getDMPConfig1, .-MPU6050_getDMPConfig1
 12398              		.section	.text.MPU6050_setDMPConfig1,"ax",%progbits
 12399              		.align	2
 12400              		.global	MPU6050_setDMPConfig1
 12401              		.code	16
 12402              		.thumb_func
 12403              		.type	MPU6050_setDMPConfig1, %function
 12404              	MPU6050_setDMPConfig1:
 12405              	.LFB256:
3237:mpu6050.c     **** void MPU6050_setDMPConfig1(uint8_t config) {
 12406              		.loc 1 3237 0
 12407              		.cfi_startproc
 12408              		@ args = 0, pretend = 0, frame = 8
 12409              		@ frame_needed = 1, uses_anonymous_args = 0
 12410 0000 80B5     		push	{r7, lr}
 12411              		.cfi_def_cfa_offset 8
 12412              		.cfi_offset 7, -8
 12413              		.cfi_offset 14, -4
 12414 0002 82B0     		sub	sp, sp, #8
 12415              		.cfi_def_cfa_offset 16
 12416 0004 00AF     		add	r7, sp, #0
 12417              		.cfi_def_cfa_register 7
 12418 0006 0200     		movs	r2, r0
 12419 0008 FB1D     		adds	r3, r7, #7
 12420 000a 1A70     		strb	r2, [r3]
3238:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 12421              		.loc 1 3238 0
 12422 000c 054B     		ldr	r3, .L943
 12423 000e 1878     		ldrb	r0, [r3]
 12424 0010 FB1D     		adds	r3, r7, #7
 12425 0012 1B78     		ldrb	r3, [r3]
 12426 0014 1A00     		movs	r2, r3
 12427 0016 7021     		movs	r1, #112
 12428 0018 FFF7FEFF 		bl	I2CWriteByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 276


3239:mpu6050.c     **** }
 12429              		.loc 1 3239 0
 12430 001c C046     		nop
 12431 001e BD46     		mov	sp, r7
 12432 0020 02B0     		add	sp, sp, #8
 12433              		@ sp needed
 12434 0022 80BD     		pop	{r7, pc}
 12435              	.L944:
 12436              		.align	2
 12437              	.L943:
 12438 0024 00000000 		.word	devAddr
 12439              		.cfi_endproc
 12440              	.LFE256:
 12441              		.size	MPU6050_setDMPConfig1, .-MPU6050_setDMPConfig1
 12442              		.section	.text.MPU6050_getDMPConfig2,"ax",%progbits
 12443              		.align	2
 12444              		.global	MPU6050_getDMPConfig2
 12445              		.code	16
 12446              		.thumb_func
 12447              		.type	MPU6050_getDMPConfig2, %function
 12448              	MPU6050_getDMPConfig2:
 12449              	.LFB257:
3240:mpu6050.c     **** 
3241:mpu6050.c     **** // DMP_CFG_2 register
3242:mpu6050.c     **** 
3243:mpu6050.c     **** uint8_t MPU6050_getDMPConfig2() {
 12450              		.loc 1 3243 0
 12451              		.cfi_startproc
 12452              		@ args = 0, pretend = 0, frame = 0
 12453              		@ frame_needed = 1, uses_anonymous_args = 0
 12454 0000 80B5     		push	{r7, lr}
 12455              		.cfi_def_cfa_offset 8
 12456              		.cfi_offset 7, -8
 12457              		.cfi_offset 14, -4
 12458 0002 00AF     		add	r7, sp, #0
 12459              		.cfi_def_cfa_register 7
3244:mpu6050.c     ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
 12460              		.loc 1 3244 0
 12461 0004 054B     		ldr	r3, .L947
 12462 0006 1B78     		ldrb	r3, [r3]
 12463 0008 054A     		ldr	r2, .L947+4
 12464 000a 7121     		movs	r1, #113
 12465 000c 1800     		movs	r0, r3
 12466 000e FFF7FEFF 		bl	I2CReadByte
3245:mpu6050.c     ****     return buffer[0];
 12467              		.loc 1 3245 0
 12468 0012 034B     		ldr	r3, .L947+4
 12469 0014 1B78     		ldrb	r3, [r3]
3246:mpu6050.c     **** }
 12470              		.loc 1 3246 0
 12471 0016 1800     		movs	r0, r3
 12472 0018 BD46     		mov	sp, r7
 12473              		@ sp needed
 12474 001a 80BD     		pop	{r7, pc}
 12475              	.L948:
 12476              		.align	2
 12477              	.L947:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 277


 12478 001c 00000000 		.word	devAddr
 12479 0020 00000000 		.word	buffer
 12480              		.cfi_endproc
 12481              	.LFE257:
 12482              		.size	MPU6050_getDMPConfig2, .-MPU6050_getDMPConfig2
 12483              		.section	.text.MPU6050_setDMPConfig2,"ax",%progbits
 12484              		.align	2
 12485              		.global	MPU6050_setDMPConfig2
 12486              		.code	16
 12487              		.thumb_func
 12488              		.type	MPU6050_setDMPConfig2, %function
 12489              	MPU6050_setDMPConfig2:
 12490              	.LFB258:
3247:mpu6050.c     **** void MPU6050_setDMPConfig2(uint8_t config) {
 12491              		.loc 1 3247 0
 12492              		.cfi_startproc
 12493              		@ args = 0, pretend = 0, frame = 8
 12494              		@ frame_needed = 1, uses_anonymous_args = 0
 12495 0000 80B5     		push	{r7, lr}
 12496              		.cfi_def_cfa_offset 8
 12497              		.cfi_offset 7, -8
 12498              		.cfi_offset 14, -4
 12499 0002 82B0     		sub	sp, sp, #8
 12500              		.cfi_def_cfa_offset 16
 12501 0004 00AF     		add	r7, sp, #0
 12502              		.cfi_def_cfa_register 7
 12503 0006 0200     		movs	r2, r0
 12504 0008 FB1D     		adds	r3, r7, #7
 12505 000a 1A70     		strb	r2, [r3]
3248:mpu6050.c     ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 12506              		.loc 1 3248 0
 12507 000c 054B     		ldr	r3, .L950
 12508 000e 1878     		ldrb	r0, [r3]
 12509 0010 FB1D     		adds	r3, r7, #7
 12510 0012 1B78     		ldrb	r3, [r3]
 12511 0014 1A00     		movs	r2, r3
 12512 0016 7121     		movs	r1, #113
 12513 0018 FFF7FEFF 		bl	I2CWriteByte
3249:mpu6050.c     **** }
 12514              		.loc 1 3249 0
 12515 001c C046     		nop
 12516 001e BD46     		mov	sp, r7
 12517 0020 02B0     		add	sp, sp, #8
 12518              		@ sp needed
 12519 0022 80BD     		pop	{r7, pc}
 12520              	.L951:
 12521              		.align	2
 12522              	.L950:
 12523 0024 00000000 		.word	devAddr
 12524              		.cfi_endproc
 12525              	.LFE258:
 12526              		.size	MPU6050_setDMPConfig2, .-MPU6050_setDMPConfig2
 12527              		.section	.text.MPU6050_setup_compass,"ax",%progbits
 12528              		.align	2
 12529              		.global	MPU6050_setup_compass
 12530              		.code	16
 12531              		.thumb_func
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 278


 12532              		.type	MPU6050_setup_compass, %function
 12533              	MPU6050_setup_compass:
 12534              	.LFB259:
3250:mpu6050.c     **** 
3251:mpu6050.c     **** 
3252:mpu6050.c     **** #define BIT_I2C_READ 0x80
3253:mpu6050.c     **** #define AKM_REG_ST1         (0x02)
3254:mpu6050.c     **** #define AKM_REG_HXL			(0x03)
3255:mpu6050.c     **** #define BIT_SLAVE_EN        (0x80)
3256:mpu6050.c     **** #define AKM_REG_CNTL        (0x0A)
3257:mpu6050.c     **** #define SUPPORTS_AK89xx_HIGH_SENS   (0x00)
3258:mpu6050.c     **** #define AKM_SINGLE_MEASUREMENT  (0x01 | SUPPORTS_AK89xx_HIGH_SENS)
3259:mpu6050.c     **** #define BIT_I2C_MST_VDDIO   (0x80)
3260:mpu6050.c     **** /** Setup Magnetometer to write to external sensor data registers
3261:mpu6050.c     ****  * based on motion_driver-2.0 sample code in inv_mpu.c
3262:mpu6050.c     ****  */
3263:mpu6050.c     **** void MPU6050_setup_compass() {
 12535              		.loc 1 3263 0
 12536              		.cfi_startproc
 12537              		@ args = 0, pretend = 0, frame = 0
 12538              		@ frame_needed = 1, uses_anonymous_args = 0
 12539 0000 80B5     		push	{r7, lr}
 12540              		.cfi_def_cfa_offset 8
 12541              		.cfi_offset 7, -8
 12542              		.cfi_offset 14, -4
 12543 0002 00AF     		add	r7, sp, #0
 12544              		.cfi_def_cfa_register 7
3264:mpu6050.c     **** //todo make more general and use MPU6050 methods and defines
3265:mpu6050.c     **** 	MPU6050_setI2CBypassEnabled(false);
 12545              		.loc 1 3265 0
 12546 0004 0020     		movs	r0, #0
 12547 0006 FFF7FEFF 		bl	MPU6050_setI2CBypassEnabled
3266:mpu6050.c     **** 	//    mpu.setWaitForExternalSensorEnabled(true);
3267:mpu6050.c     **** 	//    mpu.setSlaveAddress(0,MPU6050_ADDRESS_COMPASS);
3268:mpu6050.c     **** 	//    mpu.setSlaveAddress(1,MPU6050_ADDRESS_COMPASS);
3269:mpu6050.c     **** 
3270:mpu6050.c     ****     /* Set up master mode, master clock, and ES bit. */
3271:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_CTRL, 0x40);
 12548              		.loc 1 3271 0
 12549 000a 4022     		movs	r2, #64
 12550 000c 2421     		movs	r1, #36
 12551 000e 6920     		movs	r0, #105
 12552 0010 FFF7FEFF 		bl	I2CWriteByte
3272:mpu6050.c     ****     /* Slave 0 reads from AKM data registers. */
3273:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_ADDR, BIT_I2C_READ | MPU6050_ADDRESS_
 12553              		.loc 1 3273 0
 12554 0014 8C22     		movs	r2, #140
 12555 0016 2521     		movs	r1, #37
 12556 0018 6920     		movs	r0, #105
 12557 001a FFF7FEFF 		bl	I2CWriteByte
3274:mpu6050.c     ****     /* Compass reads start at this register, the first data register. */
3275:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_REG, AKM_REG_HXL);
 12558              		.loc 1 3275 0
 12559 001e 0322     		movs	r2, #3
 12560 0020 2621     		movs	r1, #38
 12561 0022 6920     		movs	r0, #105
 12562 0024 FFF7FEFF 		bl	I2CWriteByte
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 279


3276:mpu6050.c     ****     /* Enable slave 0, 6-byte reads. */
3277:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_CTRL, BIT_SLAVE_EN | 6);
 12563              		.loc 1 3277 0
 12564 0028 8622     		movs	r2, #134
 12565 002a 2721     		movs	r1, #39
 12566 002c 6920     		movs	r0, #105
 12567 002e FFF7FEFF 		bl	I2CWriteByte
3278:mpu6050.c     ****     /* Slave 1 changes AKM measurement mode. */
3279:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_ADDR, MPU6050_ADDRESS_COMPASS);
 12568              		.loc 1 3279 0
 12569 0032 0C22     		movs	r2, #12
 12570 0034 2821     		movs	r1, #40
 12571 0036 6920     		movs	r0, #105
 12572 0038 FFF7FEFF 		bl	I2CWriteByte
3280:mpu6050.c     ****     /* AKM measurement mode register. */
3281:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_REG, AKM_REG_CNTL);
 12573              		.loc 1 3281 0
 12574 003c 0A22     		movs	r2, #10
 12575 003e 2921     		movs	r1, #41
 12576 0040 6920     		movs	r0, #105
 12577 0042 FFF7FEFF 		bl	I2CWriteByte
3282:mpu6050.c     ****     /* Enable slave 1, 1-byte writes. */
3283:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_CTRL, BIT_SLAVE_EN | 1);
 12578              		.loc 1 3283 0
 12579 0046 8122     		movs	r2, #129
 12580 0048 2A21     		movs	r1, #42
 12581 004a 6920     		movs	r0, #105
 12582 004c FFF7FEFF 		bl	I2CWriteByte
3284:mpu6050.c     ****     /* Set slave 1 data. */
3285:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_DO,AKM_SINGLE_MEASUREMENT);
 12583              		.loc 1 3285 0
 12584 0050 0122     		movs	r2, #1
 12585 0052 6421     		movs	r1, #100
 12586 0054 6920     		movs	r0, #105
 12587 0056 FFF7FEFF 		bl	I2CWriteByte
3286:mpu6050.c     ****     /* Trigger slave 0 and slave 1 actions at each sample. */
3287:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_DELAY_CTRL, 0x03);
 12588              		.loc 1 3287 0
 12589 005a 0322     		movs	r2, #3
 12590 005c 6721     		movs	r1, #103
 12591 005e 6920     		movs	r0, #105
 12592 0060 FFF7FEFF 		bl	I2CWriteByte
3288:mpu6050.c     **** #ifdef MPU9150
3289:mpu6050.c     ****     /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
3290:mpu6050.c     ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_YG_OFFS_TC, BIT_I2C_MST_VDDIO);
3291:mpu6050.c     **** #endif
3292:mpu6050.c     ****     //enable I2C Master Mode
3293:mpu6050.c     ****     MPU6050_setI2CMasterModeEnabled(true);
 12593              		.loc 1 3293 0
 12594 0064 0120     		movs	r0, #1
 12595 0066 FFF7FEFF 		bl	MPU6050_setI2CMasterModeEnabled
3294:mpu6050.c     **** }
 12596              		.loc 1 3294 0
 12597 006a C046     		nop
 12598 006c BD46     		mov	sp, r7
 12599              		@ sp needed
 12600 006e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 280


 12601              		.cfi_endproc
 12602              	.LFE259:
 12603              		.size	MPU6050_setup_compass, .-MPU6050_setup_compass
 12604              		.text
 12605              	.Letext0:
 12606              		.file 2 "d:\\psoc\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\includ
 12607              		.file 3 "d:\\psoc\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\includ
 12608              		.file 4 "mpu6050.h"
 12609              		.section	.debug_info,"",%progbits
 12610              	.Ldebug_info0:
 12611 0000 78220000 		.4byte	0x2278
 12612 0004 0400     		.2byte	0x4
 12613 0006 00000000 		.4byte	.Ldebug_abbrev0
 12614 000a 04       		.byte	0x4
 12615 000b 01       		.uleb128 0x1
 12616 000c 640E0000 		.4byte	.LASF314
 12617 0010 0C       		.byte	0xc
 12618 0011 8B0F0000 		.4byte	.LASF315
 12619 0015 23040000 		.4byte	.LASF316
 12620 0019 00000000 		.4byte	.Ldebug_ranges0+0
 12621 001d 00000000 		.4byte	0
 12622 0021 00000000 		.4byte	.Ldebug_line0
 12623 0025 02       		.uleb128 0x2
 12624 0026 9C030000 		.4byte	.LASF0
 12625 002a 02       		.byte	0x2
 12626 002b 1B       		.byte	0x1b
 12627 002c 30000000 		.4byte	0x30
 12628 0030 03       		.uleb128 0x3
 12629 0031 01       		.byte	0x1
 12630 0032 06       		.byte	0x6
 12631 0033 FE040000 		.4byte	.LASF2
 12632 0037 02       		.uleb128 0x2
 12633 0038 64010000 		.4byte	.LASF1
 12634 003c 02       		.byte	0x2
 12635 003d 1D       		.byte	0x1d
 12636 003e 42000000 		.4byte	0x42
 12637 0042 03       		.uleb128 0x3
 12638 0043 01       		.byte	0x1
 12639 0044 08       		.byte	0x8
 12640 0045 26140000 		.4byte	.LASF3
 12641 0049 02       		.uleb128 0x2
 12642 004a AE090000 		.4byte	.LASF4
 12643 004e 02       		.byte	0x2
 12644 004f 29       		.byte	0x29
 12645 0050 54000000 		.4byte	0x54
 12646 0054 03       		.uleb128 0x3
 12647 0055 02       		.byte	0x2
 12648 0056 05       		.byte	0x5
 12649 0057 A5140000 		.4byte	.LASF5
 12650 005b 02       		.uleb128 0x2
 12651 005c 5B170000 		.4byte	.LASF6
 12652 0060 02       		.byte	0x2
 12653 0061 2B       		.byte	0x2b
 12654 0062 66000000 		.4byte	0x66
 12655 0066 03       		.uleb128 0x3
 12656 0067 02       		.byte	0x2
 12657 0068 07       		.byte	0x7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 281


 12658 0069 7F0C0000 		.4byte	.LASF7
 12659 006d 03       		.uleb128 0x3
 12660 006e 04       		.byte	0x4
 12661 006f 05       		.byte	0x5
 12662 0070 53060000 		.4byte	.LASF8
 12663 0074 02       		.uleb128 0x2
 12664 0075 31090000 		.4byte	.LASF9
 12665 0079 02       		.byte	0x2
 12666 007a 41       		.byte	0x41
 12667 007b 7F000000 		.4byte	0x7f
 12668 007f 03       		.uleb128 0x3
 12669 0080 04       		.byte	0x4
 12670 0081 07       		.byte	0x7
 12671 0082 7E0B0000 		.4byte	.LASF10
 12672 0086 03       		.uleb128 0x3
 12673 0087 08       		.byte	0x8
 12674 0088 05       		.byte	0x5
 12675 0089 F0040000 		.4byte	.LASF11
 12676 008d 03       		.uleb128 0x3
 12677 008e 08       		.byte	0x8
 12678 008f 07       		.byte	0x7
 12679 0090 B2020000 		.4byte	.LASF12
 12680 0094 04       		.uleb128 0x4
 12681 0095 04       		.byte	0x4
 12682 0096 05       		.byte	0x5
 12683 0097 696E7400 		.ascii	"int\000"
 12684 009b 03       		.uleb128 0x3
 12685 009c 04       		.byte	0x4
 12686 009d 07       		.byte	0x7
 12687 009e AF0A0000 		.4byte	.LASF13
 12688 00a2 02       		.uleb128 0x2
 12689 00a3 3E190000 		.4byte	.LASF14
 12690 00a7 03       		.byte	0x3
 12691 00a8 14       		.byte	0x14
 12692 00a9 25000000 		.4byte	0x25
 12693 00ad 02       		.uleb128 0x2
 12694 00ae 711B0000 		.4byte	.LASF15
 12695 00b2 03       		.byte	0x3
 12696 00b3 18       		.byte	0x18
 12697 00b4 37000000 		.4byte	0x37
 12698 00b8 02       		.uleb128 0x2
 12699 00b9 C9040000 		.4byte	.LASF16
 12700 00bd 03       		.byte	0x3
 12701 00be 20       		.byte	0x20
 12702 00bf 49000000 		.4byte	0x49
 12703 00c3 02       		.uleb128 0x2
 12704 00c4 87070000 		.4byte	.LASF17
 12705 00c8 03       		.byte	0x3
 12706 00c9 24       		.byte	0x24
 12707 00ca 5B000000 		.4byte	0x5b
 12708 00ce 02       		.uleb128 0x2
 12709 00cf 67160000 		.4byte	.LASF18
 12710 00d3 03       		.byte	0x3
 12711 00d4 30       		.byte	0x30
 12712 00d5 74000000 		.4byte	0x74
 12713 00d9 05       		.uleb128 0x5
 12714 00da 5D020000 		.4byte	.LASF19
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 282


 12715 00de 01       		.byte	0x1
 12716 00df 2D       		.byte	0x2d
 12717 00e0 00000000 		.4byte	.LFB0
 12718 00e4 14000000 		.4byte	.LFE0-.LFB0
 12719 00e8 01       		.uleb128 0x1
 12720 00e9 9C       		.byte	0x9c
 12721 00ea 06       		.uleb128 0x6
 12722 00eb 3F1B0000 		.4byte	.LASF24
 12723 00ef 01       		.byte	0x1
 12724 00f0 37       		.byte	0x37
 12725 00f1 00000000 		.4byte	.LFB1
 12726 00f5 20000000 		.4byte	.LFE1-.LFB1
 12727 00f9 01       		.uleb128 0x1
 12728 00fa 9C       		.byte	0x9c
 12729 00fb 0E010000 		.4byte	0x10e
 12730 00ff 07       		.uleb128 0x7
 12731 0100 A8100000 		.4byte	.LASF26
 12732 0104 01       		.byte	0x1
 12733 0105 37       		.byte	0x37
 12734 0106 AD000000 		.4byte	0xad
 12735 010a 02       		.uleb128 0x2
 12736 010b 91       		.byte	0x91
 12737 010c 77       		.sleb128 -9
 12738 010d 00       		.byte	0
 12739 010e 08       		.uleb128 0x8
 12740 010f AB0C0000 		.4byte	.LASF20
 12741 0113 01       		.byte	0x1
 12742 0114 42       		.byte	0x42
 12743 0115 00000000 		.4byte	.LFB2
 12744 0119 22000000 		.4byte	.LFE2-.LFB2
 12745 011d 01       		.uleb128 0x1
 12746 011e 9C       		.byte	0x9c
 12747 011f 09       		.uleb128 0x9
 12748 0120 FC080000 		.4byte	.LASF22
 12749 0124 01       		.byte	0x1
 12750 0125 4D       		.byte	0x4d
 12751 0126 34010000 		.4byte	0x134
 12752 012a 00000000 		.4byte	.LFB3
 12753 012e 18000000 		.4byte	.LFE3-.LFB3
 12754 0132 01       		.uleb128 0x1
 12755 0133 9C       		.byte	0x9c
 12756 0134 03       		.uleb128 0x3
 12757 0135 01       		.byte	0x1
 12758 0136 02       		.byte	0x2
 12759 0137 20140000 		.4byte	.LASF21
 12760 013b 09       		.uleb128 0x9
 12761 013c 44000000 		.4byte	.LASF23
 12762 0140 01       		.byte	0x1
 12763 0141 59       		.byte	0x59
 12764 0142 AD000000 		.4byte	0xad
 12765 0146 00000000 		.4byte	.LFB4
 12766 014a 24000000 		.4byte	.LFE4-.LFB4
 12767 014e 01       		.uleb128 0x1
 12768 014f 9C       		.byte	0x9c
 12769 0150 0A       		.uleb128 0xa
 12770 0151 F2050000 		.4byte	.LASF25
 12771 0155 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 283


 12772 0156 63       		.byte	0x63
 12773 0157 00000000 		.4byte	.LFB5
 12774 015b 28000000 		.4byte	.LFE5-.LFB5
 12775 015f 01       		.uleb128 0x1
 12776 0160 9C       		.byte	0x9c
 12777 0161 74010000 		.4byte	0x174
 12778 0165 07       		.uleb128 0x7
 12779 0166 5C0C0000 		.4byte	.LASF27
 12780 016a 01       		.byte	0x1
 12781 016b 63       		.byte	0x63
 12782 016c AD000000 		.4byte	0xad
 12783 0170 02       		.uleb128 0x2
 12784 0171 91       		.byte	0x91
 12785 0172 77       		.sleb128 -9
 12786 0173 00       		.byte	0
 12787 0174 09       		.uleb128 0x9
 12788 0175 24110000 		.4byte	.LASF28
 12789 0179 01       		.byte	0x1
 12790 017a 7E       		.byte	0x7e
 12791 017b AD000000 		.4byte	0xad
 12792 017f 00000000 		.4byte	.LFB6
 12793 0183 24000000 		.4byte	.LFE6-.LFB6
 12794 0187 01       		.uleb128 0x1
 12795 0188 9C       		.byte	0x9c
 12796 0189 0A       		.uleb128 0xa
 12797 018a 5D000000 		.4byte	.LASF29
 12798 018e 01       		.byte	0x1
 12799 018f 87       		.byte	0x87
 12800 0190 00000000 		.4byte	.LFB7
 12801 0194 28000000 		.4byte	.LFE7-.LFB7
 12802 0198 01       		.uleb128 0x1
 12803 0199 9C       		.byte	0x9c
 12804 019a AD010000 		.4byte	0x1ad
 12805 019e 07       		.uleb128 0x7
 12806 019f 3E050000 		.4byte	.LASF30
 12807 01a3 01       		.byte	0x1
 12808 01a4 87       		.byte	0x87
 12809 01a5 AD000000 		.4byte	0xad
 12810 01a9 02       		.uleb128 0x2
 12811 01aa 91       		.byte	0x91
 12812 01ab 77       		.sleb128 -9
 12813 01ac 00       		.byte	0
 12814 01ad 09       		.uleb128 0x9
 12815 01ae FC1A0000 		.4byte	.LASF31
 12816 01b2 01       		.byte	0x1
 12817 01b3 A8       		.byte	0xa8
 12818 01b4 AD000000 		.4byte	0xad
 12819 01b8 00000000 		.4byte	.LFB8
 12820 01bc 2C000000 		.4byte	.LFE8-.LFB8
 12821 01c0 01       		.uleb128 0x1
 12822 01c1 9C       		.byte	0x9c
 12823 01c2 0A       		.uleb128 0xa
 12824 01c3 11070000 		.4byte	.LASF32
 12825 01c7 01       		.byte	0x1
 12826 01c8 B1       		.byte	0xb1
 12827 01c9 00000000 		.4byte	.LFB9
 12828 01cd 2C000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 284


 12829 01d1 01       		.uleb128 0x1
 12830 01d2 9C       		.byte	0x9c
 12831 01d3 E6010000 		.4byte	0x1e6
 12832 01d7 07       		.uleb128 0x7
 12833 01d8 AE1B0000 		.4byte	.LASF33
 12834 01dc 01       		.byte	0x1
 12835 01dd B1       		.byte	0xb1
 12836 01de AD000000 		.4byte	0xad
 12837 01e2 02       		.uleb128 0x2
 12838 01e3 91       		.byte	0x91
 12839 01e4 77       		.sleb128 -9
 12840 01e5 00       		.byte	0
 12841 01e6 09       		.uleb128 0x9
 12842 01e7 5B1C0000 		.4byte	.LASF34
 12843 01eb 01       		.byte	0x1
 12844 01ec D0       		.byte	0xd0
 12845 01ed AD000000 		.4byte	0xad
 12846 01f1 00000000 		.4byte	.LFB10
 12847 01f5 2C000000 		.4byte	.LFE10-.LFB10
 12848 01f9 01       		.uleb128 0x1
 12849 01fa 9C       		.byte	0x9c
 12850 01fb 0A       		.uleb128 0xa
 12851 01fc 63100000 		.4byte	.LASF35
 12852 0200 01       		.byte	0x1
 12853 0201 DC       		.byte	0xdc
 12854 0202 00000000 		.4byte	.LFB11
 12855 0206 2C000000 		.4byte	.LFE11-.LFB11
 12856 020a 01       		.uleb128 0x1
 12857 020b 9C       		.byte	0x9c
 12858 020c 1F020000 		.4byte	0x21f
 12859 0210 07       		.uleb128 0x7
 12860 0211 03170000 		.4byte	.LASF36
 12861 0215 01       		.byte	0x1
 12862 0216 DC       		.byte	0xdc
 12863 0217 AD000000 		.4byte	0xad
 12864 021b 02       		.uleb128 0x2
 12865 021c 91       		.byte	0x91
 12866 021d 77       		.sleb128 -9
 12867 021e 00       		.byte	0
 12868 021f 09       		.uleb128 0x9
 12869 0220 6D1D0000 		.4byte	.LASF37
 12870 0224 01       		.byte	0x1
 12871 0225 F3       		.byte	0xf3
 12872 0226 AD000000 		.4byte	0xad
 12873 022a 00000000 		.4byte	.LFB12
 12874 022e 2C000000 		.4byte	.LFE12-.LFB12
 12875 0232 01       		.uleb128 0x1
 12876 0233 9C       		.byte	0x9c
 12877 0234 0A       		.uleb128 0xa
 12878 0235 81140000 		.4byte	.LASF38
 12879 0239 01       		.byte	0x1
 12880 023a FF       		.byte	0xff
 12881 023b 00000000 		.4byte	.LFB13
 12882 023f 2C000000 		.4byte	.LFE13-.LFB13
 12883 0243 01       		.uleb128 0x1
 12884 0244 9C       		.byte	0x9c
 12885 0245 58020000 		.4byte	0x258
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 285


 12886 0249 07       		.uleb128 0x7
 12887 024a 48120000 		.4byte	.LASF39
 12888 024e 01       		.byte	0x1
 12889 024f FF       		.byte	0xff
 12890 0250 AD000000 		.4byte	0xad
 12891 0254 02       		.uleb128 0x2
 12892 0255 91       		.byte	0x91
 12893 0256 77       		.sleb128 -9
 12894 0257 00       		.byte	0
 12895 0258 0B       		.uleb128 0xb
 12896 0259 86110000 		.4byte	.LASF40
 12897 025d 01       		.byte	0x1
 12898 025e 0901     		.2byte	0x109
 12899 0260 34010000 		.4byte	0x134
 12900 0264 00000000 		.4byte	.LFB14
 12901 0268 2C000000 		.4byte	.LFE14-.LFB14
 12902 026c 01       		.uleb128 0x1
 12903 026d 9C       		.byte	0x9c
 12904 026e 0C       		.uleb128 0xc
 12905 026f 0C150000 		.4byte	.LASF41
 12906 0273 01       		.byte	0x1
 12907 0274 1101     		.2byte	0x111
 12908 0276 00000000 		.4byte	.LFB15
 12909 027a 28000000 		.4byte	.LFE15-.LFB15
 12910 027e 01       		.uleb128 0x1
 12911 027f 9C       		.byte	0x9c
 12912 0280 94020000 		.4byte	0x294
 12913 0284 0D       		.uleb128 0xd
 12914 0285 A1160000 		.4byte	.LASF42
 12915 0289 01       		.byte	0x1
 12916 028a 1101     		.2byte	0x111
 12917 028c 34010000 		.4byte	0x134
 12918 0290 02       		.uleb128 0x2
 12919 0291 91       		.byte	0x91
 12920 0292 77       		.sleb128 -9
 12921 0293 00       		.byte	0
 12922 0294 0B       		.uleb128 0xb
 12923 0295 6F150000 		.4byte	.LASF43
 12924 0299 01       		.byte	0x1
 12925 029a 1801     		.2byte	0x118
 12926 029c 34010000 		.4byte	0x134
 12927 02a0 00000000 		.4byte	.LFB16
 12928 02a4 2C000000 		.4byte	.LFE16-.LFB16
 12929 02a8 01       		.uleb128 0x1
 12930 02a9 9C       		.byte	0x9c
 12931 02aa 0C       		.uleb128 0xc
 12932 02ab E1180000 		.4byte	.LASF44
 12933 02af 01       		.byte	0x1
 12934 02b0 2001     		.2byte	0x120
 12935 02b2 00000000 		.4byte	.LFB17
 12936 02b6 28000000 		.4byte	.LFE17-.LFB17
 12937 02ba 01       		.uleb128 0x1
 12938 02bb 9C       		.byte	0x9c
 12939 02bc D0020000 		.4byte	0x2d0
 12940 02c0 0D       		.uleb128 0xd
 12941 02c1 A1160000 		.4byte	.LASF42
 12942 02c5 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 286


 12943 02c6 2001     		.2byte	0x120
 12944 02c8 34010000 		.4byte	0x134
 12945 02cc 02       		.uleb128 0x2
 12946 02cd 91       		.byte	0x91
 12947 02ce 77       		.sleb128 -9
 12948 02cf 00       		.byte	0
 12949 02d0 0B       		.uleb128 0xb
 12950 02d1 78190000 		.4byte	.LASF45
 12951 02d5 01       		.byte	0x1
 12952 02d6 2701     		.2byte	0x127
 12953 02d8 34010000 		.4byte	0x134
 12954 02dc 00000000 		.4byte	.LFB18
 12955 02e0 2C000000 		.4byte	.LFE18-.LFB18
 12956 02e4 01       		.uleb128 0x1
 12957 02e5 9C       		.byte	0x9c
 12958 02e6 0C       		.uleb128 0xc
 12959 02e7 031E0000 		.4byte	.LASF46
 12960 02eb 01       		.byte	0x1
 12961 02ec 2F01     		.2byte	0x12f
 12962 02ee 00000000 		.4byte	.LFB19
 12963 02f2 28000000 		.4byte	.LFE19-.LFB19
 12964 02f6 01       		.uleb128 0x1
 12965 02f7 9C       		.byte	0x9c
 12966 02f8 0C030000 		.4byte	0x30c
 12967 02fc 0D       		.uleb128 0xd
 12968 02fd A1160000 		.4byte	.LASF42
 12969 0301 01       		.byte	0x1
 12970 0302 2F01     		.2byte	0x12f
 12971 0304 34010000 		.4byte	0x134
 12972 0308 02       		.uleb128 0x2
 12973 0309 91       		.byte	0x91
 12974 030a 77       		.sleb128 -9
 12975 030b 00       		.byte	0
 12976 030c 0B       		.uleb128 0xb
 12977 030d 01140000 		.4byte	.LASF47
 12978 0311 01       		.byte	0x1
 12979 0312 4301     		.2byte	0x143
 12980 0314 AD000000 		.4byte	0xad
 12981 0318 00000000 		.4byte	.LFB20
 12982 031c 2C000000 		.4byte	.LFE20-.LFB20
 12983 0320 01       		.uleb128 0x1
 12984 0321 9C       		.byte	0x9c
 12985 0322 0C       		.uleb128 0xc
 12986 0323 4D070000 		.4byte	.LASF48
 12987 0327 01       		.byte	0x1
 12988 0328 4B01     		.2byte	0x14b
 12989 032a 00000000 		.4byte	.LFB21
 12990 032e 2C000000 		.4byte	.LFE21-.LFB21
 12991 0332 01       		.uleb128 0x1
 12992 0333 9C       		.byte	0x9c
 12993 0334 48030000 		.4byte	0x348
 12994 0338 0D       		.uleb128 0xd
 12995 0339 48120000 		.4byte	.LASF39
 12996 033d 01       		.byte	0x1
 12997 033e 4B01     		.2byte	0x14b
 12998 0340 AD000000 		.4byte	0xad
 12999 0344 02       		.uleb128 0x2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 287


 13000 0345 91       		.byte	0x91
 13001 0346 77       		.sleb128 -9
 13002 0347 00       		.byte	0
 13003 0348 0B       		.uleb128 0xb
 13004 0349 0C1A0000 		.4byte	.LASF49
 13005 034d 01       		.byte	0x1
 13006 034e 7101     		.2byte	0x171
 13007 0350 AD000000 		.4byte	0xad
 13008 0354 00000000 		.4byte	.LFB22
 13009 0358 2C000000 		.4byte	.LFE22-.LFB22
 13010 035c 01       		.uleb128 0x1
 13011 035d 9C       		.byte	0x9c
 13012 035e 0C       		.uleb128 0xc
 13013 035f 1D0F0000 		.4byte	.LASF50
 13014 0363 01       		.byte	0x1
 13015 0364 7B01     		.2byte	0x17b
 13016 0366 00000000 		.4byte	.LFB23
 13017 036a 2C000000 		.4byte	.LFE23-.LFB23
 13018 036e 01       		.uleb128 0x1
 13019 036f 9C       		.byte	0x9c
 13020 0370 84030000 		.4byte	0x384
 13021 0374 0D       		.uleb128 0xd
 13022 0375 3E120000 		.4byte	.LASF51
 13023 0379 01       		.byte	0x1
 13024 037a 7B01     		.2byte	0x17b
 13025 037c AD000000 		.4byte	0xad
 13026 0380 02       		.uleb128 0x2
 13027 0381 91       		.byte	0x91
 13028 0382 77       		.sleb128 -9
 13029 0383 00       		.byte	0
 13030 0384 0B       		.uleb128 0xb
 13031 0385 191B0000 		.4byte	.LASF52
 13032 0389 01       		.byte	0x1
 13033 038a 9001     		.2byte	0x190
 13034 038c AD000000 		.4byte	0xad
 13035 0390 00000000 		.4byte	.LFB24
 13036 0394 24000000 		.4byte	.LFE24-.LFB24
 13037 0398 01       		.uleb128 0x1
 13038 0399 9C       		.byte	0x9c
 13039 039a 0C       		.uleb128 0xc
 13040 039b FD0D0000 		.4byte	.LASF53
 13041 039f 01       		.byte	0x1
 13042 03a0 9901     		.2byte	0x199
 13043 03a2 00000000 		.4byte	.LFB25
 13044 03a6 28000000 		.4byte	.LFE25-.LFB25
 13045 03aa 01       		.uleb128 0x1
 13046 03ab 9C       		.byte	0x9c
 13047 03ac C0030000 		.4byte	0x3c0
 13048 03b0 0D       		.uleb128 0xd
 13049 03b1 F7130000 		.4byte	.LASF54
 13050 03b5 01       		.byte	0x1
 13051 03b6 9901     		.2byte	0x199
 13052 03b8 AD000000 		.4byte	0xad
 13053 03bc 02       		.uleb128 0x2
 13054 03bd 91       		.byte	0x91
 13055 03be 77       		.sleb128 -9
 13056 03bf 00       		.byte	0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 288


 13057 03c0 0B       		.uleb128 0xb
 13058 03c1 19190000 		.4byte	.LASF55
 13059 03c5 01       		.byte	0x1
 13060 03c6 B001     		.2byte	0x1b0
 13061 03c8 AD000000 		.4byte	0xad
 13062 03cc 00000000 		.4byte	.LFB26
 13063 03d0 24000000 		.4byte	.LFE26-.LFB26
 13064 03d4 01       		.uleb128 0x1
 13065 03d5 9C       		.byte	0x9c
 13066 03d6 0C       		.uleb128 0xc
 13067 03d7 AF0B0000 		.4byte	.LASF56
 13068 03db 01       		.byte	0x1
 13069 03dc B901     		.2byte	0x1b9
 13070 03de 00000000 		.4byte	.LFB27
 13071 03e2 28000000 		.4byte	.LFE27-.LFB27
 13072 03e6 01       		.uleb128 0x1
 13073 03e7 9C       		.byte	0x9c
 13074 03e8 FC030000 		.4byte	0x3fc
 13075 03ec 0D       		.uleb128 0xd
 13076 03ed CE090000 		.4byte	.LASF57
 13077 03f1 01       		.byte	0x1
 13078 03f2 B901     		.2byte	0x1b9
 13079 03f4 AD000000 		.4byte	0xad
 13080 03f8 02       		.uleb128 0x2
 13081 03f9 91       		.byte	0x91
 13082 03fa 77       		.sleb128 -9
 13083 03fb 00       		.byte	0
 13084 03fc 0B       		.uleb128 0xb
 13085 03fd 850D0000 		.4byte	.LASF58
 13086 0401 01       		.byte	0x1
 13087 0402 D201     		.2byte	0x1d2
 13088 0404 AD000000 		.4byte	0xad
 13089 0408 00000000 		.4byte	.LFB28
 13090 040c 24000000 		.4byte	.LFE28-.LFB28
 13091 0410 01       		.uleb128 0x1
 13092 0411 9C       		.byte	0x9c
 13093 0412 0C       		.uleb128 0xc
 13094 0413 7E050000 		.4byte	.LASF59
 13095 0417 01       		.byte	0x1
 13096 0418 DB01     		.2byte	0x1db
 13097 041a 00000000 		.4byte	.LFB29
 13098 041e 28000000 		.4byte	.LFE29-.LFB29
 13099 0422 01       		.uleb128 0x1
 13100 0423 9C       		.byte	0x9c
 13101 0424 38040000 		.4byte	0x438
 13102 0428 0D       		.uleb128 0xd
 13103 0429 F7130000 		.4byte	.LASF54
 13104 042d 01       		.byte	0x1
 13105 042e DB01     		.2byte	0x1db
 13106 0430 AD000000 		.4byte	0xad
 13107 0434 02       		.uleb128 0x2
 13108 0435 91       		.byte	0x91
 13109 0436 77       		.sleb128 -9
 13110 0437 00       		.byte	0
 13111 0438 0B       		.uleb128 0xb
 13112 0439 811E0000 		.4byte	.LASF60
 13113 043d 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 289


 13114 043e F001     		.2byte	0x1f0
 13115 0440 AD000000 		.4byte	0xad
 13116 0444 00000000 		.4byte	.LFB30
 13117 0448 24000000 		.4byte	.LFE30-.LFB30
 13118 044c 01       		.uleb128 0x1
 13119 044d 9C       		.byte	0x9c
 13120 044e 0C       		.uleb128 0xc
 13121 044f EE060000 		.4byte	.LASF61
 13122 0453 01       		.byte	0x1
 13123 0454 F901     		.2byte	0x1f9
 13124 0456 00000000 		.4byte	.LFB31
 13125 045a 28000000 		.4byte	.LFE31-.LFB31
 13126 045e 01       		.uleb128 0x1
 13127 045f 9C       		.byte	0x9c
 13128 0460 74040000 		.4byte	0x474
 13129 0464 0D       		.uleb128 0xd
 13130 0465 CE090000 		.4byte	.LASF57
 13131 0469 01       		.byte	0x1
 13132 046a F901     		.2byte	0x1f9
 13133 046c AD000000 		.4byte	0xad
 13134 0470 02       		.uleb128 0x2
 13135 0471 91       		.byte	0x91
 13136 0472 77       		.sleb128 -9
 13137 0473 00       		.byte	0
 13138 0474 0B       		.uleb128 0xb
 13139 0475 AF140000 		.4byte	.LASF62
 13140 0479 01       		.byte	0x1
 13141 047a 1802     		.2byte	0x218
 13142 047c AD000000 		.4byte	0xad
 13143 0480 00000000 		.4byte	.LFB32
 13144 0484 24000000 		.4byte	.LFE32-.LFB32
 13145 0488 01       		.uleb128 0x1
 13146 0489 9C       		.byte	0x9c
 13147 048a 0C       		.uleb128 0xc
 13148 048b D7090000 		.4byte	.LASF63
 13149 048f 01       		.byte	0x1
 13150 0490 2102     		.2byte	0x221
 13151 0492 00000000 		.4byte	.LFB33
 13152 0496 28000000 		.4byte	.LFE33-.LFB33
 13153 049a 01       		.uleb128 0x1
 13154 049b 9C       		.byte	0x9c
 13155 049c B0040000 		.4byte	0x4b0
 13156 04a0 0D       		.uleb128 0xd
 13157 04a1 F7130000 		.4byte	.LASF54
 13158 04a5 01       		.byte	0x1
 13159 04a6 2102     		.2byte	0x221
 13160 04a8 AD000000 		.4byte	0xad
 13161 04ac 02       		.uleb128 0x2
 13162 04ad 91       		.byte	0x91
 13163 04ae 77       		.sleb128 -9
 13164 04af 00       		.byte	0
 13165 04b0 0B       		.uleb128 0xb
 13166 04b1 1E130000 		.4byte	.LASF64
 13167 04b5 01       		.byte	0x1
 13168 04b6 3702     		.2byte	0x237
 13169 04b8 AD000000 		.4byte	0xad
 13170 04bc 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 290


 13171 04c0 24000000 		.4byte	.LFE34-.LFB34
 13172 04c4 01       		.uleb128 0x1
 13173 04c5 9C       		.byte	0x9c
 13174 04c6 0C       		.uleb128 0xc
 13175 04c7 A21C0000 		.4byte	.LASF65
 13176 04cb 01       		.byte	0x1
 13177 04cc 4002     		.2byte	0x240
 13178 04ce 00000000 		.4byte	.LFB35
 13179 04d2 28000000 		.4byte	.LFE35-.LFB35
 13180 04d6 01       		.uleb128 0x1
 13181 04d7 9C       		.byte	0x9c
 13182 04d8 EC040000 		.4byte	0x4ec
 13183 04dc 0D       		.uleb128 0xd
 13184 04dd CE090000 		.4byte	.LASF57
 13185 04e1 01       		.byte	0x1
 13186 04e2 4002     		.2byte	0x240
 13187 04e4 AD000000 		.4byte	0xad
 13188 04e8 02       		.uleb128 0x2
 13189 04e9 91       		.byte	0x91
 13190 04ea 77       		.sleb128 -9
 13191 04eb 00       		.byte	0
 13192 04ec 0B       		.uleb128 0xb
 13193 04ed C9020000 		.4byte	.LASF66
 13194 04f1 01       		.byte	0x1
 13195 04f2 4C02     		.2byte	0x24c
 13196 04f4 34010000 		.4byte	0x134
 13197 04f8 00000000 		.4byte	.LFB36
 13198 04fc 2C000000 		.4byte	.LFE36-.LFB36
 13199 0500 01       		.uleb128 0x1
 13200 0501 9C       		.byte	0x9c
 13201 0502 0C       		.uleb128 0xc
 13202 0503 7A180000 		.4byte	.LASF67
 13203 0507 01       		.byte	0x1
 13204 0508 5502     		.2byte	0x255
 13205 050a 00000000 		.4byte	.LFB37
 13206 050e 28000000 		.4byte	.LFE37-.LFB37
 13207 0512 01       		.uleb128 0x1
 13208 0513 9C       		.byte	0x9c
 13209 0514 28050000 		.4byte	0x528
 13210 0518 0D       		.uleb128 0xd
 13211 0519 A1160000 		.4byte	.LASF42
 13212 051d 01       		.byte	0x1
 13213 051e 5502     		.2byte	0x255
 13214 0520 34010000 		.4byte	0x134
 13215 0524 02       		.uleb128 0x2
 13216 0525 91       		.byte	0x91
 13217 0526 77       		.sleb128 -9
 13218 0527 00       		.byte	0
 13219 0528 0B       		.uleb128 0xb
 13220 0529 A9160000 		.4byte	.LASF68
 13221 052d 01       		.byte	0x1
 13222 052e 5E02     		.2byte	0x25e
 13223 0530 34010000 		.4byte	0x134
 13224 0534 00000000 		.4byte	.LFB38
 13225 0538 2C000000 		.4byte	.LFE38-.LFB38
 13226 053c 01       		.uleb128 0x1
 13227 053d 9C       		.byte	0x9c
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 291


 13228 053e 0C       		.uleb128 0xc
 13229 053f 02130000 		.4byte	.LASF69
 13230 0543 01       		.byte	0x1
 13231 0544 6702     		.2byte	0x267
 13232 0546 00000000 		.4byte	.LFB39
 13233 054a 28000000 		.4byte	.LFE39-.LFB39
 13234 054e 01       		.uleb128 0x1
 13235 054f 9C       		.byte	0x9c
 13236 0550 64050000 		.4byte	0x564
 13237 0554 0D       		.uleb128 0xd
 13238 0555 A1160000 		.4byte	.LASF42
 13239 0559 01       		.byte	0x1
 13240 055a 6702     		.2byte	0x267
 13241 055c 34010000 		.4byte	0x134
 13242 0560 02       		.uleb128 0x2
 13243 0561 91       		.byte	0x91
 13244 0562 77       		.sleb128 -9
 13245 0563 00       		.byte	0
 13246 0564 0B       		.uleb128 0xb
 13247 0565 D40B0000 		.4byte	.LASF70
 13248 0569 01       		.byte	0x1
 13249 056a 7002     		.2byte	0x270
 13250 056c 34010000 		.4byte	0x134
 13251 0570 00000000 		.4byte	.LFB40
 13252 0574 2C000000 		.4byte	.LFE40-.LFB40
 13253 0578 01       		.uleb128 0x1
 13254 0579 9C       		.byte	0x9c
 13255 057a 0C       		.uleb128 0xc
 13256 057b 1F020000 		.4byte	.LASF71
 13257 057f 01       		.byte	0x1
 13258 0580 7902     		.2byte	0x279
 13259 0582 00000000 		.4byte	.LFB41
 13260 0586 28000000 		.4byte	.LFE41-.LFB41
 13261 058a 01       		.uleb128 0x1
 13262 058b 9C       		.byte	0x9c
 13263 058c A0050000 		.4byte	0x5a0
 13264 0590 0D       		.uleb128 0xd
 13265 0591 A1160000 		.4byte	.LASF42
 13266 0595 01       		.byte	0x1
 13267 0596 7902     		.2byte	0x279
 13268 0598 34010000 		.4byte	0x134
 13269 059c 02       		.uleb128 0x2
 13270 059d 91       		.byte	0x91
 13271 059e 77       		.sleb128 -9
 13272 059f 00       		.byte	0
 13273 05a0 0B       		.uleb128 0xb
 13274 05a1 95040000 		.4byte	.LASF72
 13275 05a5 01       		.byte	0x1
 13276 05a6 8202     		.2byte	0x282
 13277 05a8 34010000 		.4byte	0x134
 13278 05ac 00000000 		.4byte	.LFB42
 13279 05b0 2C000000 		.4byte	.LFE42-.LFB42
 13280 05b4 01       		.uleb128 0x1
 13281 05b5 9C       		.byte	0x9c
 13282 05b6 0C       		.uleb128 0xc
 13283 05b7 23060000 		.4byte	.LASF73
 13284 05bb 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 292


 13285 05bc 8B02     		.2byte	0x28b
 13286 05be 00000000 		.4byte	.LFB43
 13287 05c2 28000000 		.4byte	.LFE43-.LFB43
 13288 05c6 01       		.uleb128 0x1
 13289 05c7 9C       		.byte	0x9c
 13290 05c8 DC050000 		.4byte	0x5dc
 13291 05cc 0D       		.uleb128 0xd
 13292 05cd A1160000 		.4byte	.LASF42
 13293 05d1 01       		.byte	0x1
 13294 05d2 8B02     		.2byte	0x28b
 13295 05d4 34010000 		.4byte	0x134
 13296 05d8 02       		.uleb128 0x2
 13297 05d9 91       		.byte	0x91
 13298 05da 77       		.sleb128 -9
 13299 05db 00       		.byte	0
 13300 05dc 0B       		.uleb128 0xb
 13301 05dd 790A0000 		.4byte	.LASF74
 13302 05e1 01       		.byte	0x1
 13303 05e2 9502     		.2byte	0x295
 13304 05e4 34010000 		.4byte	0x134
 13305 05e8 00000000 		.4byte	.LFB44
 13306 05ec 2C000000 		.4byte	.LFE44-.LFB44
 13307 05f0 01       		.uleb128 0x1
 13308 05f1 9C       		.byte	0x9c
 13309 05f2 0C       		.uleb128 0xc
 13310 05f3 9A000000 		.4byte	.LASF75
 13311 05f7 01       		.byte	0x1
 13312 05f8 9E02     		.2byte	0x29e
 13313 05fa 00000000 		.4byte	.LFB45
 13314 05fe 28000000 		.4byte	.LFE45-.LFB45
 13315 0602 01       		.uleb128 0x1
 13316 0603 9C       		.byte	0x9c
 13317 0604 18060000 		.4byte	0x618
 13318 0608 0D       		.uleb128 0xd
 13319 0609 A1160000 		.4byte	.LASF42
 13320 060d 01       		.byte	0x1
 13321 060e 9E02     		.2byte	0x29e
 13322 0610 34010000 		.4byte	0x134
 13323 0614 02       		.uleb128 0x2
 13324 0615 91       		.byte	0x91
 13325 0616 77       		.sleb128 -9
 13326 0617 00       		.byte	0
 13327 0618 0B       		.uleb128 0xb
 13328 0619 ED030000 		.4byte	.LASF76
 13329 061d 01       		.byte	0x1
 13330 061e A702     		.2byte	0x2a7
 13331 0620 34010000 		.4byte	0x134
 13332 0624 00000000 		.4byte	.LFB46
 13333 0628 2C000000 		.4byte	.LFE46-.LFB46
 13334 062c 01       		.uleb128 0x1
 13335 062d 9C       		.byte	0x9c
 13336 062e 0C       		.uleb128 0xc
 13337 062f 61050000 		.4byte	.LASF77
 13338 0633 01       		.byte	0x1
 13339 0634 B002     		.2byte	0x2b0
 13340 0636 00000000 		.4byte	.LFB47
 13341 063a 28000000 		.4byte	.LFE47-.LFB47
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 293


 13342 063e 01       		.uleb128 0x1
 13343 063f 9C       		.byte	0x9c
 13344 0640 54060000 		.4byte	0x654
 13345 0644 0D       		.uleb128 0xd
 13346 0645 A1160000 		.4byte	.LASF42
 13347 0649 01       		.byte	0x1
 13348 064a B002     		.2byte	0x2b0
 13349 064c 34010000 		.4byte	0x134
 13350 0650 02       		.uleb128 0x2
 13351 0651 91       		.byte	0x91
 13352 0652 77       		.sleb128 -9
 13353 0653 00       		.byte	0
 13354 0654 0B       		.uleb128 0xb
 13355 0655 90070000 		.4byte	.LASF78
 13356 0659 01       		.byte	0x1
 13357 065a B902     		.2byte	0x2b9
 13358 065c 34010000 		.4byte	0x134
 13359 0660 00000000 		.4byte	.LFB48
 13360 0664 2C000000 		.4byte	.LFE48-.LFB48
 13361 0668 01       		.uleb128 0x1
 13362 0669 9C       		.byte	0x9c
 13363 066a 0C       		.uleb128 0xc
 13364 066b EC170000 		.4byte	.LASF79
 13365 066f 01       		.byte	0x1
 13366 0670 C202     		.2byte	0x2c2
 13367 0672 00000000 		.4byte	.LFB49
 13368 0676 28000000 		.4byte	.LFE49-.LFB49
 13369 067a 01       		.uleb128 0x1
 13370 067b 9C       		.byte	0x9c
 13371 067c 90060000 		.4byte	0x690
 13372 0680 0D       		.uleb128 0xd
 13373 0681 A1160000 		.4byte	.LASF42
 13374 0685 01       		.byte	0x1
 13375 0686 C202     		.2byte	0x2c2
 13376 0688 34010000 		.4byte	0x134
 13377 068c 02       		.uleb128 0x2
 13378 068d 91       		.byte	0x91
 13379 068e 77       		.sleb128 -9
 13380 068f 00       		.byte	0
 13381 0690 0B       		.uleb128 0xb
 13382 0691 BE0C0000 		.4byte	.LASF80
 13383 0695 01       		.byte	0x1
 13384 0696 CB02     		.2byte	0x2cb
 13385 0698 34010000 		.4byte	0x134
 13386 069c 00000000 		.4byte	.LFB50
 13387 06a0 2C000000 		.4byte	.LFE50-.LFB50
 13388 06a4 01       		.uleb128 0x1
 13389 06a5 9C       		.byte	0x9c
 13390 06a6 0C       		.uleb128 0xc
 13391 06a7 4A160000 		.4byte	.LASF81
 13392 06ab 01       		.byte	0x1
 13393 06ac D402     		.2byte	0x2d4
 13394 06ae 00000000 		.4byte	.LFB51
 13395 06b2 28000000 		.4byte	.LFE51-.LFB51
 13396 06b6 01       		.uleb128 0x1
 13397 06b7 9C       		.byte	0x9c
 13398 06b8 CC060000 		.4byte	0x6cc
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 294


 13399 06bc 0D       		.uleb128 0xd
 13400 06bd A1160000 		.4byte	.LASF42
 13401 06c1 01       		.byte	0x1
 13402 06c2 D402     		.2byte	0x2d4
 13403 06c4 34010000 		.4byte	0x134
 13404 06c8 02       		.uleb128 0x2
 13405 06c9 91       		.byte	0x91
 13406 06ca 77       		.sleb128 -9
 13407 06cb 00       		.byte	0
 13408 06cc 0B       		.uleb128 0xb
 13409 06cd 201A0000 		.4byte	.LASF82
 13410 06d1 01       		.byte	0x1
 13411 06d2 E902     		.2byte	0x2e9
 13412 06d4 34010000 		.4byte	0x134
 13413 06d8 00000000 		.4byte	.LFB52
 13414 06dc 2C000000 		.4byte	.LFE52-.LFB52
 13415 06e0 01       		.uleb128 0x1
 13416 06e1 9C       		.byte	0x9c
 13417 06e2 0C       		.uleb128 0xc
 13418 06e3 CF030000 		.4byte	.LASF83
 13419 06e7 01       		.byte	0x1
 13420 06e8 F202     		.2byte	0x2f2
 13421 06ea 00000000 		.4byte	.LFB53
 13422 06ee 28000000 		.4byte	.LFE53-.LFB53
 13423 06f2 01       		.uleb128 0x1
 13424 06f3 9C       		.byte	0x9c
 13425 06f4 08070000 		.4byte	0x708
 13426 06f8 0D       		.uleb128 0xd
 13427 06f9 A1160000 		.4byte	.LASF42
 13428 06fd 01       		.byte	0x1
 13429 06fe F202     		.2byte	0x2f2
 13430 0700 34010000 		.4byte	0x134
 13431 0704 02       		.uleb128 0x2
 13432 0705 91       		.byte	0x91
 13433 0706 77       		.sleb128 -9
 13434 0707 00       		.byte	0
 13435 0708 0B       		.uleb128 0xb
 13436 0709 8A020000 		.4byte	.LASF84
 13437 070d 01       		.byte	0x1
 13438 070e 0003     		.2byte	0x300
 13439 0710 34010000 		.4byte	0x134
 13440 0714 00000000 		.4byte	.LFB54
 13441 0718 2C000000 		.4byte	.LFE54-.LFB54
 13442 071c 01       		.uleb128 0x1
 13443 071d 9C       		.byte	0x9c
 13444 071e 0C       		.uleb128 0xc
 13445 071f 400D0000 		.4byte	.LASF85
 13446 0723 01       		.byte	0x1
 13447 0724 0903     		.2byte	0x309
 13448 0726 00000000 		.4byte	.LFB55
 13449 072a 28000000 		.4byte	.LFE55-.LFB55
 13450 072e 01       		.uleb128 0x1
 13451 072f 9C       		.byte	0x9c
 13452 0730 44070000 		.4byte	0x744
 13453 0734 0D       		.uleb128 0xd
 13454 0735 A1160000 		.4byte	.LASF42
 13455 0739 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 295


 13456 073a 0903     		.2byte	0x309
 13457 073c 34010000 		.4byte	0x134
 13458 0740 02       		.uleb128 0x2
 13459 0741 91       		.byte	0x91
 13460 0742 77       		.sleb128 -9
 13461 0743 00       		.byte	0
 13462 0744 0B       		.uleb128 0xb
 13463 0745 12100000 		.4byte	.LASF86
 13464 0749 01       		.byte	0x1
 13465 074a 1203     		.2byte	0x312
 13466 074c 34010000 		.4byte	0x134
 13467 0750 00000000 		.4byte	.LFB56
 13468 0754 2C000000 		.4byte	.LFE56-.LFB56
 13469 0758 01       		.uleb128 0x1
 13470 0759 9C       		.byte	0x9c
 13471 075a 0C       		.uleb128 0xc
 13472 075b C9100000 		.4byte	.LASF87
 13473 075f 01       		.byte	0x1
 13474 0760 1B03     		.2byte	0x31b
 13475 0762 00000000 		.4byte	.LFB57
 13476 0766 28000000 		.4byte	.LFE57-.LFB57
 13477 076a 01       		.uleb128 0x1
 13478 076b 9C       		.byte	0x9c
 13479 076c 80070000 		.4byte	0x780
 13480 0770 0D       		.uleb128 0xd
 13481 0771 A1160000 		.4byte	.LASF42
 13482 0775 01       		.byte	0x1
 13483 0776 1B03     		.2byte	0x31b
 13484 0778 34010000 		.4byte	0x134
 13485 077c 02       		.uleb128 0x2
 13486 077d 91       		.byte	0x91
 13487 077e 77       		.sleb128 -9
 13488 077f 00       		.byte	0
 13489 0780 0B       		.uleb128 0xb
 13490 0781 1D1E0000 		.4byte	.LASF88
 13491 0785 01       		.byte	0x1
 13492 0786 2803     		.2byte	0x328
 13493 0788 34010000 		.4byte	0x134
 13494 078c 00000000 		.4byte	.LFB58
 13495 0790 2C000000 		.4byte	.LFE58-.LFB58
 13496 0794 01       		.uleb128 0x1
 13497 0795 9C       		.byte	0x9c
 13498 0796 0C       		.uleb128 0xc
 13499 0797 CC130000 		.4byte	.LASF89
 13500 079b 01       		.byte	0x1
 13501 079c 3103     		.2byte	0x331
 13502 079e 00000000 		.4byte	.LFB59
 13503 07a2 28000000 		.4byte	.LFE59-.LFB59
 13504 07a6 01       		.uleb128 0x1
 13505 07a7 9C       		.byte	0x9c
 13506 07a8 BC070000 		.4byte	0x7bc
 13507 07ac 0D       		.uleb128 0xd
 13508 07ad A1160000 		.4byte	.LASF42
 13509 07b1 01       		.byte	0x1
 13510 07b2 3103     		.2byte	0x331
 13511 07b4 34010000 		.4byte	0x134
 13512 07b8 02       		.uleb128 0x2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 296


 13513 07b9 91       		.byte	0x91
 13514 07ba 77       		.sleb128 -9
 13515 07bb 00       		.byte	0
 13516 07bc 0B       		.uleb128 0xb
 13517 07bd 08110000 		.4byte	.LASF90
 13518 07c1 01       		.byte	0x1
 13519 07c2 5103     		.2byte	0x351
 13520 07c4 AD000000 		.4byte	0xad
 13521 07c8 00000000 		.4byte	.LFB60
 13522 07cc 2C000000 		.4byte	.LFE60-.LFB60
 13523 07d0 01       		.uleb128 0x1
 13524 07d1 9C       		.byte	0x9c
 13525 07d2 0C       		.uleb128 0xc
 13526 07d3 01080000 		.4byte	.LASF91
 13527 07d7 01       		.byte	0x1
 13528 07d8 5903     		.2byte	0x359
 13529 07da 00000000 		.4byte	.LFB61
 13530 07de 2C000000 		.4byte	.LFE61-.LFB61
 13531 07e2 01       		.uleb128 0x1
 13532 07e3 9C       		.byte	0x9c
 13533 07e4 F8070000 		.4byte	0x7f8
 13534 07e8 0D       		.uleb128 0xd
 13535 07e9 6F1C0000 		.4byte	.LASF92
 13536 07ed 01       		.byte	0x1
 13537 07ee 5903     		.2byte	0x359
 13538 07f0 AD000000 		.4byte	0xad
 13539 07f4 02       		.uleb128 0x2
 13540 07f5 91       		.byte	0x91
 13541 07f6 77       		.sleb128 -9
 13542 07f7 00       		.byte	0
 13543 07f8 0E       		.uleb128 0xe
 13544 07f9 2C000000 		.4byte	.LASF94
 13545 07fd 01       		.byte	0x1
 13546 07fe 8803     		.2byte	0x388
 13547 0800 AD000000 		.4byte	0xad
 13548 0804 00000000 		.4byte	.LFB62
 13549 0808 48000000 		.4byte	.LFE62-.LFB62
 13550 080c 01       		.uleb128 0x1
 13551 080d 9C       		.byte	0x9c
 13552 080e 22080000 		.4byte	0x822
 13553 0812 0F       		.uleb128 0xf
 13554 0813 6E756D00 		.ascii	"num\000"
 13555 0817 01       		.byte	0x1
 13556 0818 8803     		.2byte	0x388
 13557 081a AD000000 		.4byte	0xad
 13558 081e 02       		.uleb128 0x2
 13559 081f 91       		.byte	0x91
 13560 0820 77       		.sleb128 -9
 13561 0821 00       		.byte	0
 13562 0822 0C       		.uleb128 0xc
 13563 0823 0B060000 		.4byte	.LASF93
 13564 0827 01       		.byte	0x1
 13565 0828 9303     		.2byte	0x393
 13566 082a 00000000 		.4byte	.LFB63
 13567 082e 48000000 		.4byte	.LFE63-.LFB63
 13568 0832 01       		.uleb128 0x1
 13569 0833 9C       		.byte	0x9c
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 297


 13570 0834 57080000 		.4byte	0x857
 13571 0838 0F       		.uleb128 0xf
 13572 0839 6E756D00 		.ascii	"num\000"
 13573 083d 01       		.byte	0x1
 13574 083e 9303     		.2byte	0x393
 13575 0840 AD000000 		.4byte	0xad
 13576 0844 02       		.uleb128 0x2
 13577 0845 91       		.byte	0x91
 13578 0846 77       		.sleb128 -9
 13579 0847 0D       		.uleb128 0xd
 13580 0848 A8100000 		.4byte	.LASF26
 13581 084c 01       		.byte	0x1
 13582 084d 9303     		.2byte	0x393
 13583 084f AD000000 		.4byte	0xad
 13584 0853 02       		.uleb128 0x2
 13585 0854 91       		.byte	0x91
 13586 0855 76       		.sleb128 -10
 13587 0856 00       		.byte	0
 13588 0857 0E       		.uleb128 0xe
 13589 0858 95180000 		.4byte	.LASF95
 13590 085c 01       		.byte	0x1
 13591 085d A203     		.2byte	0x3a2
 13592 085f AD000000 		.4byte	0xad
 13593 0863 00000000 		.4byte	.LFB64
 13594 0867 48000000 		.4byte	.LFE64-.LFB64
 13595 086b 01       		.uleb128 0x1
 13596 086c 9C       		.byte	0x9c
 13597 086d 81080000 		.4byte	0x881
 13598 0871 0F       		.uleb128 0xf
 13599 0872 6E756D00 		.ascii	"num\000"
 13600 0876 01       		.byte	0x1
 13601 0877 A203     		.2byte	0x3a2
 13602 0879 AD000000 		.4byte	0xad
 13603 087d 02       		.uleb128 0x2
 13604 087e 91       		.byte	0x91
 13605 087f 77       		.sleb128 -9
 13606 0880 00       		.byte	0
 13607 0881 0C       		.uleb128 0xc
 13608 0882 BF1D0000 		.4byte	.LASF96
 13609 0886 01       		.byte	0x1
 13610 0887 AD03     		.2byte	0x3ad
 13611 0889 00000000 		.4byte	.LFB65
 13612 088d 48000000 		.4byte	.LFE65-.LFB65
 13613 0891 01       		.uleb128 0x1
 13614 0892 9C       		.byte	0x9c
 13615 0893 B6080000 		.4byte	0x8b6
 13616 0897 0F       		.uleb128 0xf
 13617 0898 6E756D00 		.ascii	"num\000"
 13618 089c 01       		.byte	0x1
 13619 089d AD03     		.2byte	0x3ad
 13620 089f AD000000 		.4byte	0xad
 13621 08a3 02       		.uleb128 0x2
 13622 08a4 91       		.byte	0x91
 13623 08a5 77       		.sleb128 -9
 13624 08a6 0F       		.uleb128 0xf
 13625 08a7 72656700 		.ascii	"reg\000"
 13626 08ab 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 298


 13627 08ac AD03     		.2byte	0x3ad
 13628 08ae AD000000 		.4byte	0xad
 13629 08b2 02       		.uleb128 0x2
 13630 08b3 91       		.byte	0x91
 13631 08b4 76       		.sleb128 -10
 13632 08b5 00       		.byte	0
 13633 08b6 0E       		.uleb128 0xe
 13634 08b7 751C0000 		.4byte	.LASF97
 13635 08bb 01       		.byte	0x1
 13636 08bc B803     		.2byte	0x3b8
 13637 08be 34010000 		.4byte	0x134
 13638 08c2 00000000 		.4byte	.LFB66
 13639 08c6 50000000 		.4byte	.LFE66-.LFB66
 13640 08ca 01       		.uleb128 0x1
 13641 08cb 9C       		.byte	0x9c
 13642 08cc E0080000 		.4byte	0x8e0
 13643 08d0 0F       		.uleb128 0xf
 13644 08d1 6E756D00 		.ascii	"num\000"
 13645 08d5 01       		.byte	0x1
 13646 08d6 B803     		.2byte	0x3b8
 13647 08d8 AD000000 		.4byte	0xad
 13648 08dc 02       		.uleb128 0x2
 13649 08dd 91       		.byte	0x91
 13650 08de 77       		.sleb128 -9
 13651 08df 00       		.byte	0
 13652 08e0 0C       		.uleb128 0xc
 13653 08e1 280D0000 		.4byte	.LASF98
 13654 08e5 01       		.byte	0x1
 13655 08e6 C303     		.2byte	0x3c3
 13656 08e8 00000000 		.4byte	.LFB67
 13657 08ec 48000000 		.4byte	.LFE67-.LFB67
 13658 08f0 01       		.uleb128 0x1
 13659 08f1 9C       		.byte	0x9c
 13660 08f2 15090000 		.4byte	0x915
 13661 08f6 0F       		.uleb128 0xf
 13662 08f7 6E756D00 		.ascii	"num\000"
 13663 08fb 01       		.byte	0x1
 13664 08fc C303     		.2byte	0x3c3
 13665 08fe AD000000 		.4byte	0xad
 13666 0902 02       		.uleb128 0x2
 13667 0903 91       		.byte	0x91
 13668 0904 77       		.sleb128 -9
 13669 0905 0D       		.uleb128 0xd
 13670 0906 A1160000 		.4byte	.LASF42
 13671 090a 01       		.byte	0x1
 13672 090b C303     		.2byte	0x3c3
 13673 090d 34010000 		.4byte	0x134
 13674 0911 02       		.uleb128 0x2
 13675 0912 91       		.byte	0x91
 13676 0913 76       		.sleb128 -10
 13677 0914 00       		.byte	0
 13678 0915 0E       		.uleb128 0xe
 13679 0916 23030000 		.4byte	.LASF99
 13680 091a 01       		.byte	0x1
 13681 091b D203     		.2byte	0x3d2
 13682 091d 34010000 		.4byte	0x134
 13683 0921 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 299


 13684 0925 50000000 		.4byte	.LFE68-.LFB68
 13685 0929 01       		.uleb128 0x1
 13686 092a 9C       		.byte	0x9c
 13687 092b 3F090000 		.4byte	0x93f
 13688 092f 0F       		.uleb128 0xf
 13689 0930 6E756D00 		.ascii	"num\000"
 13690 0934 01       		.byte	0x1
 13691 0935 D203     		.2byte	0x3d2
 13692 0937 AD000000 		.4byte	0xad
 13693 093b 02       		.uleb128 0x2
 13694 093c 91       		.byte	0x91
 13695 093d 77       		.sleb128 -9
 13696 093e 00       		.byte	0
 13697 093f 0C       		.uleb128 0xc
 13698 0940 FF090000 		.4byte	.LASF100
 13699 0944 01       		.byte	0x1
 13700 0945 DD03     		.2byte	0x3dd
 13701 0947 00000000 		.4byte	.LFB69
 13702 094b 48000000 		.4byte	.LFE69-.LFB69
 13703 094f 01       		.uleb128 0x1
 13704 0950 9C       		.byte	0x9c
 13705 0951 74090000 		.4byte	0x974
 13706 0955 0F       		.uleb128 0xf
 13707 0956 6E756D00 		.ascii	"num\000"
 13708 095a 01       		.byte	0x1
 13709 095b DD03     		.2byte	0x3dd
 13710 095d AD000000 		.4byte	0xad
 13711 0961 02       		.uleb128 0x2
 13712 0962 91       		.byte	0x91
 13713 0963 77       		.sleb128 -9
 13714 0964 0D       		.uleb128 0xd
 13715 0965 A1160000 		.4byte	.LASF42
 13716 0969 01       		.byte	0x1
 13717 096a DD03     		.2byte	0x3dd
 13718 096c 34010000 		.4byte	0x134
 13719 0970 02       		.uleb128 0x2
 13720 0971 91       		.byte	0x91
 13721 0972 76       		.sleb128 -10
 13722 0973 00       		.byte	0
 13723 0974 0E       		.uleb128 0xe
 13724 0975 1F0B0000 		.4byte	.LASF101
 13725 0979 01       		.byte	0x1
 13726 097a EB03     		.2byte	0x3eb
 13727 097c 34010000 		.4byte	0x134
 13728 0980 00000000 		.4byte	.LFB70
 13729 0984 50000000 		.4byte	.LFE70-.LFB70
 13730 0988 01       		.uleb128 0x1
 13731 0989 9C       		.byte	0x9c
 13732 098a 9E090000 		.4byte	0x99e
 13733 098e 0F       		.uleb128 0xf
 13734 098f 6E756D00 		.ascii	"num\000"
 13735 0993 01       		.byte	0x1
 13736 0994 EB03     		.2byte	0x3eb
 13737 0996 AD000000 		.4byte	0xad
 13738 099a 02       		.uleb128 0x2
 13739 099b 91       		.byte	0x91
 13740 099c 77       		.sleb128 -9
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 300


 13741 099d 00       		.byte	0
 13742 099e 0C       		.uleb128 0xc
 13743 099f 83170000 		.4byte	.LASF102
 13744 09a3 01       		.byte	0x1
 13745 09a4 F603     		.2byte	0x3f6
 13746 09a6 00000000 		.4byte	.LFB71
 13747 09aa 48000000 		.4byte	.LFE71-.LFB71
 13748 09ae 01       		.uleb128 0x1
 13749 09af 9C       		.byte	0x9c
 13750 09b0 D3090000 		.4byte	0x9d3
 13751 09b4 0F       		.uleb128 0xf
 13752 09b5 6E756D00 		.ascii	"num\000"
 13753 09b9 01       		.byte	0x1
 13754 09ba F603     		.2byte	0x3f6
 13755 09bc AD000000 		.4byte	0xad
 13756 09c0 02       		.uleb128 0x2
 13757 09c1 91       		.byte	0x91
 13758 09c2 77       		.sleb128 -9
 13759 09c3 0D       		.uleb128 0xd
 13760 09c4 03170000 		.4byte	.LASF36
 13761 09c8 01       		.byte	0x1
 13762 09c9 F603     		.2byte	0x3f6
 13763 09cb 34010000 		.4byte	0x134
 13764 09cf 02       		.uleb128 0x2
 13765 09d0 91       		.byte	0x91
 13766 09d1 76       		.sleb128 -10
 13767 09d2 00       		.byte	0
 13768 09d3 0E       		.uleb128 0xe
 13769 09d4 C90D0000 		.4byte	.LASF103
 13770 09d8 01       		.byte	0x1
 13771 09d9 0504     		.2byte	0x405
 13772 09db 34010000 		.4byte	0x134
 13773 09df 00000000 		.4byte	.LFB72
 13774 09e3 50000000 		.4byte	.LFE72-.LFB72
 13775 09e7 01       		.uleb128 0x1
 13776 09e8 9C       		.byte	0x9c
 13777 09e9 FD090000 		.4byte	0x9fd
 13778 09ed 0F       		.uleb128 0xf
 13779 09ee 6E756D00 		.ascii	"num\000"
 13780 09f2 01       		.byte	0x1
 13781 09f3 0504     		.2byte	0x405
 13782 09f5 AD000000 		.4byte	0xad
 13783 09f9 02       		.uleb128 0x2
 13784 09fa 91       		.byte	0x91
 13785 09fb 77       		.sleb128 -9
 13786 09fc 00       		.byte	0
 13787 09fd 0C       		.uleb128 0xc
 13788 09fe B8150000 		.4byte	.LASF104
 13789 0a02 01       		.byte	0x1
 13790 0a03 1004     		.2byte	0x410
 13791 0a05 00000000 		.4byte	.LFB73
 13792 0a09 48000000 		.4byte	.LFE73-.LFB73
 13793 0a0d 01       		.uleb128 0x1
 13794 0a0e 9C       		.byte	0x9c
 13795 0a0f 320A0000 		.4byte	0xa32
 13796 0a13 0F       		.uleb128 0xf
 13797 0a14 6E756D00 		.ascii	"num\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 301


 13798 0a18 01       		.byte	0x1
 13799 0a19 1004     		.2byte	0x410
 13800 0a1b AD000000 		.4byte	0xad
 13801 0a1f 02       		.uleb128 0x2
 13802 0a20 91       		.byte	0x91
 13803 0a21 77       		.sleb128 -9
 13804 0a22 0D       		.uleb128 0xd
 13805 0a23 A1160000 		.4byte	.LASF42
 13806 0a27 01       		.byte	0x1
 13807 0a28 1004     		.2byte	0x410
 13808 0a2a 34010000 		.4byte	0x134
 13809 0a2e 02       		.uleb128 0x2
 13810 0a2f 91       		.byte	0x91
 13811 0a30 76       		.sleb128 -10
 13812 0a31 00       		.byte	0
 13813 0a32 0E       		.uleb128 0xe
 13814 0a33 9F010000 		.4byte	.LASF105
 13815 0a37 01       		.byte	0x1
 13816 0a38 1B04     		.2byte	0x41b
 13817 0a3a AD000000 		.4byte	0xad
 13818 0a3e 00000000 		.4byte	.LFB74
 13819 0a42 4C000000 		.4byte	.LFE74-.LFB74
 13820 0a46 01       		.uleb128 0x1
 13821 0a47 9C       		.byte	0x9c
 13822 0a48 5C0A0000 		.4byte	0xa5c
 13823 0a4c 0F       		.uleb128 0xf
 13824 0a4d 6E756D00 		.ascii	"num\000"
 13825 0a51 01       		.byte	0x1
 13826 0a52 1B04     		.2byte	0x41b
 13827 0a54 AD000000 		.4byte	0xad
 13828 0a58 02       		.uleb128 0x2
 13829 0a59 91       		.byte	0x91
 13830 0a5a 77       		.sleb128 -9
 13831 0a5b 00       		.byte	0
 13832 0a5c 0C       		.uleb128 0xc
 13833 0a5d 071C0000 		.4byte	.LASF106
 13834 0a61 01       		.byte	0x1
 13835 0a62 2604     		.2byte	0x426
 13836 0a64 00000000 		.4byte	.LFB75
 13837 0a68 4C000000 		.4byte	.LFE75-.LFB75
 13838 0a6c 01       		.uleb128 0x1
 13839 0a6d 9C       		.byte	0x9c
 13840 0a6e 910A0000 		.4byte	0xa91
 13841 0a72 0F       		.uleb128 0xf
 13842 0a73 6E756D00 		.ascii	"num\000"
 13843 0a77 01       		.byte	0x1
 13844 0a78 2604     		.2byte	0x426
 13845 0a7a AD000000 		.4byte	0xad
 13846 0a7e 02       		.uleb128 0x2
 13847 0a7f 91       		.byte	0x91
 13848 0a80 77       		.sleb128 -9
 13849 0a81 0D       		.uleb128 0xd
 13850 0a82 E2160000 		.4byte	.LASF107
 13851 0a86 01       		.byte	0x1
 13852 0a87 2604     		.2byte	0x426
 13853 0a89 AD000000 		.4byte	0xad
 13854 0a8d 02       		.uleb128 0x2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 302


 13855 0a8e 91       		.byte	0x91
 13856 0a8f 76       		.sleb128 -10
 13857 0a90 00       		.byte	0
 13858 0a91 0B       		.uleb128 0xb
 13859 0a92 89150000 		.4byte	.LASF108
 13860 0a96 01       		.byte	0x1
 13861 0a97 3604     		.2byte	0x436
 13862 0a99 AD000000 		.4byte	0xad
 13863 0a9d 00000000 		.4byte	.LFB76
 13864 0aa1 24000000 		.4byte	.LFE76-.LFB76
 13865 0aa5 01       		.uleb128 0x1
 13866 0aa6 9C       		.byte	0x9c
 13867 0aa7 0C       		.uleb128 0xc
 13868 0aa8 AA1A0000 		.4byte	.LASF109
 13869 0aac 01       		.byte	0x1
 13870 0aad 3F04     		.2byte	0x43f
 13871 0aaf 00000000 		.4byte	.LFB77
 13872 0ab3 28000000 		.4byte	.LFE77-.LFB77
 13873 0ab7 01       		.uleb128 0x1
 13874 0ab8 9C       		.byte	0x9c
 13875 0ab9 CD0A0000 		.4byte	0xacd
 13876 0abd 0D       		.uleb128 0xd
 13877 0abe A8100000 		.4byte	.LASF26
 13878 0ac2 01       		.byte	0x1
 13879 0ac3 3F04     		.2byte	0x43f
 13880 0ac5 AD000000 		.4byte	0xad
 13881 0ac9 02       		.uleb128 0x2
 13882 0aca 91       		.byte	0x91
 13883 0acb 77       		.sleb128 -9
 13884 0acc 00       		.byte	0
 13885 0acd 0B       		.uleb128 0xb
 13886 0ace 950A0000 		.4byte	.LASF110
 13887 0ad2 01       		.byte	0x1
 13888 0ad3 4904     		.2byte	0x449
 13889 0ad5 AD000000 		.4byte	0xad
 13890 0ad9 00000000 		.4byte	.LFB78
 13891 0add 24000000 		.4byte	.LFE78-.LFB78
 13892 0ae1 01       		.uleb128 0x1
 13893 0ae2 9C       		.byte	0x9c
 13894 0ae3 0C       		.uleb128 0xc
 13895 0ae4 E9160000 		.4byte	.LASF111
 13896 0ae8 01       		.byte	0x1
 13897 0ae9 5204     		.2byte	0x452
 13898 0aeb 00000000 		.4byte	.LFB79
 13899 0aef 28000000 		.4byte	.LFE79-.LFB79
 13900 0af3 01       		.uleb128 0x1
 13901 0af4 9C       		.byte	0x9c
 13902 0af5 090B0000 		.4byte	0xb09
 13903 0af9 0F       		.uleb128 0xf
 13904 0afa 72656700 		.ascii	"reg\000"
 13905 0afe 01       		.byte	0x1
 13906 0aff 5204     		.2byte	0x452
 13907 0b01 AD000000 		.4byte	0xad
 13908 0b05 02       		.uleb128 0x2
 13909 0b06 91       		.byte	0x91
 13910 0b07 77       		.sleb128 -9
 13911 0b08 00       		.byte	0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 303


 13912 0b09 0C       		.uleb128 0xc
 13913 0b0a BC0A0000 		.4byte	.LASF112
 13914 0b0e 01       		.byte	0x1
 13915 0b0f 5B04     		.2byte	0x45b
 13916 0b11 00000000 		.4byte	.LFB80
 13917 0b15 28000000 		.4byte	.LFE80-.LFB80
 13918 0b19 01       		.uleb128 0x1
 13919 0b1a 9C       		.byte	0x9c
 13920 0b1b 2F0B0000 		.4byte	0xb2f
 13921 0b1f 0D       		.uleb128 0xd
 13922 0b20 620C0000 		.4byte	.LASF113
 13923 0b24 01       		.byte	0x1
 13924 0b25 5B04     		.2byte	0x45b
 13925 0b27 AD000000 		.4byte	0xad
 13926 0b2b 02       		.uleb128 0x2
 13927 0b2c 91       		.byte	0x91
 13928 0b2d 77       		.sleb128 -9
 13929 0b2e 00       		.byte	0
 13930 0b2f 0B       		.uleb128 0xb
 13931 0b30 AE130000 		.4byte	.LASF114
 13932 0b34 01       		.byte	0x1
 13933 0b35 6404     		.2byte	0x464
 13934 0b37 34010000 		.4byte	0x134
 13935 0b3b 00000000 		.4byte	.LFB81
 13936 0b3f 2C000000 		.4byte	.LFE81-.LFB81
 13937 0b43 01       		.uleb128 0x1
 13938 0b44 9C       		.byte	0x9c
 13939 0b45 0C       		.uleb128 0xc
 13940 0b46 1E180000 		.4byte	.LASF115
 13941 0b4a 01       		.byte	0x1
 13942 0b4b 6D04     		.2byte	0x46d
 13943 0b4d 00000000 		.4byte	.LFB82
 13944 0b51 28000000 		.4byte	.LFE82-.LFB82
 13945 0b55 01       		.uleb128 0x1
 13946 0b56 9C       		.byte	0x9c
 13947 0b57 6B0B0000 		.4byte	0xb6b
 13948 0b5b 0D       		.uleb128 0xd
 13949 0b5c A1160000 		.4byte	.LASF42
 13950 0b60 01       		.byte	0x1
 13951 0b61 6D04     		.2byte	0x46d
 13952 0b63 34010000 		.4byte	0x134
 13953 0b67 02       		.uleb128 0x2
 13954 0b68 91       		.byte	0x91
 13955 0b69 77       		.sleb128 -9
 13956 0b6a 00       		.byte	0
 13957 0b6b 0B       		.uleb128 0xb
 13958 0b6c 3B020000 		.4byte	.LASF116
 13959 0b70 01       		.byte	0x1
 13960 0b71 7904     		.2byte	0x479
 13961 0b73 34010000 		.4byte	0x134
 13962 0b77 00000000 		.4byte	.LFB83
 13963 0b7b 2C000000 		.4byte	.LFE83-.LFB83
 13964 0b7f 01       		.uleb128 0x1
 13965 0b80 9C       		.byte	0x9c
 13966 0b81 0C       		.uleb128 0xc
 13967 0b82 3C080000 		.4byte	.LASF117
 13968 0b86 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 304


 13969 0b87 8204     		.2byte	0x482
 13970 0b89 00000000 		.4byte	.LFB84
 13971 0b8d 28000000 		.4byte	.LFE84-.LFB84
 13972 0b91 01       		.uleb128 0x1
 13973 0b92 9C       		.byte	0x9c
 13974 0b93 A70B0000 		.4byte	0xba7
 13975 0b97 0D       		.uleb128 0xd
 13976 0b98 A1160000 		.4byte	.LASF42
 13977 0b9c 01       		.byte	0x1
 13978 0b9d 8204     		.2byte	0x482
 13979 0b9f 34010000 		.4byte	0x134
 13980 0ba3 02       		.uleb128 0x2
 13981 0ba4 91       		.byte	0x91
 13982 0ba5 77       		.sleb128 -9
 13983 0ba6 00       		.byte	0
 13984 0ba7 0B       		.uleb128 0xb
 13985 0ba8 34110000 		.4byte	.LASF118
 13986 0bac 01       		.byte	0x1
 13987 0bad 8E04     		.2byte	0x48e
 13988 0baf 34010000 		.4byte	0x134
 13989 0bb3 00000000 		.4byte	.LFB85
 13990 0bb7 2C000000 		.4byte	.LFE85-.LFB85
 13991 0bbb 01       		.uleb128 0x1
 13992 0bbc 9C       		.byte	0x9c
 13993 0bbd 0C       		.uleb128 0xc
 13994 0bbe BB080000 		.4byte	.LASF119
 13995 0bc2 01       		.byte	0x1
 13996 0bc3 9704     		.2byte	0x497
 13997 0bc5 00000000 		.4byte	.LFB86
 13998 0bc9 28000000 		.4byte	.LFE86-.LFB86
 13999 0bcd 01       		.uleb128 0x1
 14000 0bce 9C       		.byte	0x9c
 14001 0bcf E30B0000 		.4byte	0xbe3
 14002 0bd3 0D       		.uleb128 0xd
 14003 0bd4 03170000 		.4byte	.LASF36
 14004 0bd8 01       		.byte	0x1
 14005 0bd9 9704     		.2byte	0x497
 14006 0bdb 34010000 		.4byte	0x134
 14007 0bdf 02       		.uleb128 0x2
 14008 0be0 91       		.byte	0x91
 14009 0be1 77       		.sleb128 -9
 14010 0be2 00       		.byte	0
 14011 0be3 0B       		.uleb128 0xb
 14012 0be4 680D0000 		.4byte	.LASF120
 14013 0be8 01       		.byte	0x1
 14014 0be9 A904     		.2byte	0x4a9
 14015 0beb AD000000 		.4byte	0xad
 14016 0bef 00000000 		.4byte	.LFB87
 14017 0bf3 2C000000 		.4byte	.LFE87-.LFB87
 14018 0bf7 01       		.uleb128 0x1
 14019 0bf8 9C       		.byte	0x9c
 14020 0bf9 0C       		.uleb128 0xc
 14021 0bfa 310F0000 		.4byte	.LASF121
 14022 0bfe 01       		.byte	0x1
 14023 0bff B204     		.2byte	0x4b2
 14024 0c01 00000000 		.4byte	.LFB88
 14025 0c05 2C000000 		.4byte	.LFE88-.LFB88
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 305


 14026 0c09 01       		.uleb128 0x1
 14027 0c0a 9C       		.byte	0x9c
 14028 0c0b 1F0C0000 		.4byte	0xc1f
 14029 0c0f 0D       		.uleb128 0xd
 14030 0c10 9F140000 		.4byte	.LASF122
 14031 0c14 01       		.byte	0x1
 14032 0c15 B204     		.2byte	0x4b2
 14033 0c17 AD000000 		.4byte	0xad
 14034 0c1b 02       		.uleb128 0x2
 14035 0c1c 91       		.byte	0x91
 14036 0c1d 77       		.sleb128 -9
 14037 0c1e 00       		.byte	0
 14038 0c1f 0B       		.uleb128 0xb
 14039 0c20 561B0000 		.4byte	.LASF123
 14040 0c24 01       		.byte	0x1
 14041 0c25 BB04     		.2byte	0x4bb
 14042 0c27 AD000000 		.4byte	0xad
 14043 0c2b 00000000 		.4byte	.LFB89
 14044 0c2f 24000000 		.4byte	.LFE89-.LFB89
 14045 0c33 01       		.uleb128 0x1
 14046 0c34 9C       		.byte	0x9c
 14047 0c35 0B       		.uleb128 0xb
 14048 0c36 CD0F0000 		.4byte	.LASF124
 14049 0c3a 01       		.byte	0x1
 14050 0c3b CB04     		.2byte	0x4cb
 14051 0c3d 34010000 		.4byte	0x134
 14052 0c41 00000000 		.4byte	.LFB90
 14053 0c45 2C000000 		.4byte	.LFE90-.LFB90
 14054 0c49 01       		.uleb128 0x1
 14055 0c4a 9C       		.byte	0x9c
 14056 0c4b 0B       		.uleb128 0xb
 14057 0c4c 0E000000 		.4byte	.LASF125
 14058 0c50 01       		.byte	0x1
 14059 0c51 D704     		.2byte	0x4d7
 14060 0c53 34010000 		.4byte	0x134
 14061 0c57 00000000 		.4byte	.LFB91
 14062 0c5b 2C000000 		.4byte	.LFE91-.LFB91
 14063 0c5f 01       		.uleb128 0x1
 14064 0c60 9C       		.byte	0x9c
 14065 0c61 0B       		.uleb128 0xb
 14066 0c62 70160000 		.4byte	.LASF126
 14067 0c66 01       		.byte	0x1
 14068 0c67 E204     		.2byte	0x4e2
 14069 0c69 34010000 		.4byte	0x134
 14070 0c6d 00000000 		.4byte	.LFB92
 14071 0c71 2C000000 		.4byte	.LFE92-.LFB92
 14072 0c75 01       		.uleb128 0x1
 14073 0c76 9C       		.byte	0x9c
 14074 0c77 0B       		.uleb128 0xb
 14075 0c78 84000000 		.4byte	.LASF127
 14076 0c7c 01       		.byte	0x1
 14077 0c7d ED04     		.2byte	0x4ed
 14078 0c7f 34010000 		.4byte	0x134
 14079 0c83 00000000 		.4byte	.LFB93
 14080 0c87 2C000000 		.4byte	.LFE93-.LFB93
 14081 0c8b 01       		.uleb128 0x1
 14082 0c8c 9C       		.byte	0x9c
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 306


 14083 0c8d 0B       		.uleb128 0xb
 14084 0c8e 120D0000 		.4byte	.LASF128
 14085 0c92 01       		.byte	0x1
 14086 0c93 F804     		.2byte	0x4f8
 14087 0c95 34010000 		.4byte	0x134
 14088 0c99 00000000 		.4byte	.LFB94
 14089 0c9d 2C000000 		.4byte	.LFE94-.LFB94
 14090 0ca1 01       		.uleb128 0x1
 14091 0ca2 9C       		.byte	0x9c
 14092 0ca3 0B       		.uleb128 0xb
 14093 0ca4 8B160000 		.4byte	.LASF129
 14094 0ca8 01       		.byte	0x1
 14095 0ca9 0305     		.2byte	0x503
 14096 0cab 34010000 		.4byte	0x134
 14097 0caf 00000000 		.4byte	.LFB95
 14098 0cb3 2C000000 		.4byte	.LFE95-.LFB95
 14099 0cb7 01       		.uleb128 0x1
 14100 0cb8 9C       		.byte	0x9c
 14101 0cb9 0B       		.uleb128 0xb
 14102 0cba 0A050000 		.4byte	.LASF130
 14103 0cbe 01       		.byte	0x1
 14104 0cbf 0E05     		.2byte	0x50e
 14105 0cc1 34010000 		.4byte	0x134
 14106 0cc5 00000000 		.4byte	.LFB96
 14107 0cc9 2C000000 		.4byte	.LFE96-.LFB96
 14108 0ccd 01       		.uleb128 0x1
 14109 0cce 9C       		.byte	0x9c
 14110 0ccf 0B       		.uleb128 0xb
 14111 0cd0 E11A0000 		.4byte	.LASF131
 14112 0cd4 01       		.byte	0x1
 14113 0cd5 1905     		.2byte	0x519
 14114 0cd7 34010000 		.4byte	0x134
 14115 0cdb 00000000 		.4byte	.LFB97
 14116 0cdf 2C000000 		.4byte	.LFE97-.LFB97
 14117 0ce3 01       		.uleb128 0x1
 14118 0ce4 9C       		.byte	0x9c
 14119 0ce5 0B       		.uleb128 0xb
 14120 0ce6 3C090000 		.4byte	.LASF132
 14121 0cea 01       		.byte	0x1
 14122 0ceb 2605     		.2byte	0x526
 14123 0ced 34010000 		.4byte	0x134
 14124 0cf1 00000000 		.4byte	.LFB98
 14125 0cf5 2C000000 		.4byte	.LFE98-.LFB98
 14126 0cf9 01       		.uleb128 0x1
 14127 0cfa 9C       		.byte	0x9c
 14128 0cfb 0C       		.uleb128 0xc
 14129 0cfc 7C120000 		.4byte	.LASF133
 14130 0d00 01       		.byte	0x1
 14131 0d01 3005     		.2byte	0x530
 14132 0d03 00000000 		.4byte	.LFB99
 14133 0d07 28000000 		.4byte	.LFE99-.LFB99
 14134 0d0b 01       		.uleb128 0x1
 14135 0d0c 9C       		.byte	0x9c
 14136 0d0d 210D0000 		.4byte	0xd21
 14137 0d11 0D       		.uleb128 0xd
 14138 0d12 03170000 		.4byte	.LASF36
 14139 0d16 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 307


 14140 0d17 3005     		.2byte	0x530
 14141 0d19 34010000 		.4byte	0x134
 14142 0d1d 02       		.uleb128 0x2
 14143 0d1e 91       		.byte	0x91
 14144 0d1f 77       		.sleb128 -9
 14145 0d20 00       		.byte	0
 14146 0d21 0B       		.uleb128 0xb
 14147 0d22 A41E0000 		.4byte	.LASF134
 14148 0d26 01       		.byte	0x1
 14149 0d27 3905     		.2byte	0x539
 14150 0d29 34010000 		.4byte	0x134
 14151 0d2d 00000000 		.4byte	.LFB100
 14152 0d31 2C000000 		.4byte	.LFE100-.LFB100
 14153 0d35 01       		.uleb128 0x1
 14154 0d36 9C       		.byte	0x9c
 14155 0d37 0C       		.uleb128 0xc
 14156 0d38 481E0000 		.4byte	.LASF135
 14157 0d3c 01       		.byte	0x1
 14158 0d3d 4305     		.2byte	0x543
 14159 0d3f 00000000 		.4byte	.LFB101
 14160 0d43 28000000 		.4byte	.LFE101-.LFB101
 14161 0d47 01       		.uleb128 0x1
 14162 0d48 9C       		.byte	0x9c
 14163 0d49 5D0D0000 		.4byte	0xd5d
 14164 0d4d 0D       		.uleb128 0xd
 14165 0d4e 00000000 		.4byte	.LASF136
 14166 0d52 01       		.byte	0x1
 14167 0d53 4305     		.2byte	0x543
 14168 0d55 34010000 		.4byte	0x134
 14169 0d59 02       		.uleb128 0x2
 14170 0d5a 91       		.byte	0x91
 14171 0d5b 77       		.sleb128 -9
 14172 0d5c 00       		.byte	0
 14173 0d5d 0B       		.uleb128 0xb
 14174 0d5e 221C0000 		.4byte	.LASF137
 14175 0d62 01       		.byte	0x1
 14176 0d63 4C05     		.2byte	0x54c
 14177 0d65 34010000 		.4byte	0x134
 14178 0d69 00000000 		.4byte	.LFB102
 14179 0d6d 2C000000 		.4byte	.LFE102-.LFB102
 14180 0d71 01       		.uleb128 0x1
 14181 0d72 9C       		.byte	0x9c
 14182 0d73 0C       		.uleb128 0xc
 14183 0d74 5E190000 		.4byte	.LASF138
 14184 0d78 01       		.byte	0x1
 14185 0d79 5605     		.2byte	0x556
 14186 0d7b 00000000 		.4byte	.LFB103
 14187 0d7f 28000000 		.4byte	.LFE103-.LFB103
 14188 0d83 01       		.uleb128 0x1
 14189 0d84 9C       		.byte	0x9c
 14190 0d85 990D0000 		.4byte	0xd99
 14191 0d89 0D       		.uleb128 0xd
 14192 0d8a 26000000 		.4byte	.LASF139
 14193 0d8e 01       		.byte	0x1
 14194 0d8f 5605     		.2byte	0x556
 14195 0d91 34010000 		.4byte	0x134
 14196 0d95 02       		.uleb128 0x2
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 308


 14197 0d96 91       		.byte	0x91
 14198 0d97 77       		.sleb128 -9
 14199 0d98 00       		.byte	0
 14200 0d99 0B       		.uleb128 0xb
 14201 0d9a 3C0A0000 		.4byte	.LASF140
 14202 0d9e 01       		.byte	0x1
 14203 0d9f 5F05     		.2byte	0x55f
 14204 0da1 34010000 		.4byte	0x134
 14205 0da5 00000000 		.4byte	.LFB104
 14206 0da9 2C000000 		.4byte	.LFE104-.LFB104
 14207 0dad 01       		.uleb128 0x1
 14208 0dae 9C       		.byte	0x9c
 14209 0daf 0C       		.uleb128 0xc
 14210 0db0 791B0000 		.4byte	.LASF141
 14211 0db4 01       		.byte	0x1
 14212 0db5 6905     		.2byte	0x569
 14213 0db7 00000000 		.4byte	.LFB105
 14214 0dbb 28000000 		.4byte	.LFE105-.LFB105
 14215 0dbf 01       		.uleb128 0x1
 14216 0dc0 9C       		.byte	0x9c
 14217 0dc1 D50D0000 		.4byte	0xdd5
 14218 0dc5 0D       		.uleb128 0xd
 14219 0dc6 0B160000 		.4byte	.LASF142
 14220 0dca 01       		.byte	0x1
 14221 0dcb 6905     		.2byte	0x569
 14222 0dcd 34010000 		.4byte	0x134
 14223 0dd1 02       		.uleb128 0x2
 14224 0dd2 91       		.byte	0x91
 14225 0dd3 77       		.sleb128 -9
 14226 0dd4 00       		.byte	0
 14227 0dd5 0B       		.uleb128 0xb
 14228 0dd6 08170000 		.4byte	.LASF143
 14229 0dda 01       		.byte	0x1
 14230 0ddb 7205     		.2byte	0x572
 14231 0ddd 34010000 		.4byte	0x134
 14232 0de1 00000000 		.4byte	.LFB106
 14233 0de5 2C000000 		.4byte	.LFE106-.LFB106
 14234 0de9 01       		.uleb128 0x1
 14235 0dea 9C       		.byte	0x9c
 14236 0deb 0C       		.uleb128 0xc
 14237 0dec 900B0000 		.4byte	.LASF144
 14238 0df0 01       		.byte	0x1
 14239 0df1 7C05     		.2byte	0x57c
 14240 0df3 00000000 		.4byte	.LFB107
 14241 0df7 28000000 		.4byte	.LFE107-.LFB107
 14242 0dfb 01       		.uleb128 0x1
 14243 0dfc 9C       		.byte	0x9c
 14244 0dfd 110E0000 		.4byte	0xe11
 14245 0e01 0D       		.uleb128 0xd
 14246 0e02 5C0C0000 		.4byte	.LASF27
 14247 0e06 01       		.byte	0x1
 14248 0e07 7C05     		.2byte	0x57c
 14249 0e09 34010000 		.4byte	0x134
 14250 0e0d 02       		.uleb128 0x2
 14251 0e0e 91       		.byte	0x91
 14252 0e0f 77       		.sleb128 -9
 14253 0e10 00       		.byte	0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 309


 14254 0e11 0B       		.uleb128 0xb
 14255 0e12 B6050000 		.4byte	.LASF145
 14256 0e16 01       		.byte	0x1
 14257 0e17 8505     		.2byte	0x585
 14258 0e19 34010000 		.4byte	0x134
 14259 0e1d 00000000 		.4byte	.LFB108
 14260 0e21 2C000000 		.4byte	.LFE108-.LFB108
 14261 0e25 01       		.uleb128 0x1
 14262 0e26 9C       		.byte	0x9c
 14263 0e27 0C       		.uleb128 0xc
 14264 0e28 9A080000 		.4byte	.LASF146
 14265 0e2c 01       		.byte	0x1
 14266 0e2d 8F05     		.2byte	0x58f
 14267 0e2f 00000000 		.4byte	.LFB109
 14268 0e33 28000000 		.4byte	.LFE109-.LFB109
 14269 0e37 01       		.uleb128 0x1
 14270 0e38 9C       		.byte	0x9c
 14271 0e39 4D0E0000 		.4byte	0xe4d
 14272 0e3d 0D       		.uleb128 0xd
 14273 0e3e A1160000 		.4byte	.LASF42
 14274 0e42 01       		.byte	0x1
 14275 0e43 8F05     		.2byte	0x58f
 14276 0e45 34010000 		.4byte	0x134
 14277 0e49 02       		.uleb128 0x2
 14278 0e4a 91       		.byte	0x91
 14279 0e4b 77       		.sleb128 -9
 14280 0e4c 00       		.byte	0
 14281 0e4d 0B       		.uleb128 0xb
 14282 0e4e 480E0000 		.4byte	.LASF147
 14283 0e52 01       		.byte	0x1
 14284 0e53 9D05     		.2byte	0x59d
 14285 0e55 34010000 		.4byte	0x134
 14286 0e59 00000000 		.4byte	.LFB110
 14287 0e5d 2C000000 		.4byte	.LFE110-.LFB110
 14288 0e61 01       		.uleb128 0x1
 14289 0e62 9C       		.byte	0x9c
 14290 0e63 0C       		.uleb128 0xc
 14291 0e64 571A0000 		.4byte	.LASF148
 14292 0e68 01       		.byte	0x1
 14293 0e69 AC05     		.2byte	0x5ac
 14294 0e6b 00000000 		.4byte	.LFB111
 14295 0e6f 28000000 		.4byte	.LFE111-.LFB111
 14296 0e73 01       		.uleb128 0x1
 14297 0e74 9C       		.byte	0x9c
 14298 0e75 890E0000 		.4byte	0xe89
 14299 0e79 0D       		.uleb128 0xd
 14300 0e7a A1160000 		.4byte	.LASF42
 14301 0e7e 01       		.byte	0x1
 14302 0e7f AC05     		.2byte	0x5ac
 14303 0e81 34010000 		.4byte	0x134
 14304 0e85 02       		.uleb128 0x2
 14305 0e86 91       		.byte	0x91
 14306 0e87 77       		.sleb128 -9
 14307 0e88 00       		.byte	0
 14308 0e89 0B       		.uleb128 0xb
 14309 0e8a E10A0000 		.4byte	.LASF149
 14310 0e8e 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 310


 14311 0e8f B805     		.2byte	0x5b8
 14312 0e91 34010000 		.4byte	0x134
 14313 0e95 00000000 		.4byte	.LFB112
 14314 0e99 2C000000 		.4byte	.LFE112-.LFB112
 14315 0e9d 01       		.uleb128 0x1
 14316 0e9e 9C       		.byte	0x9c
 14317 0e9f 0C       		.uleb128 0xc
 14318 0ea0 C31A0000 		.4byte	.LASF150
 14319 0ea4 01       		.byte	0x1
 14320 0ea5 C505     		.2byte	0x5c5
 14321 0ea7 00000000 		.4byte	.LFB113
 14322 0eab 28000000 		.4byte	.LFE113-.LFB113
 14323 0eaf 01       		.uleb128 0x1
 14324 0eb0 9C       		.byte	0x9c
 14325 0eb1 C50E0000 		.4byte	0xec5
 14326 0eb5 0D       		.uleb128 0xd
 14327 0eb6 A1160000 		.4byte	.LASF42
 14328 0eba 01       		.byte	0x1
 14329 0ebb C505     		.2byte	0x5c5
 14330 0ebd 34010000 		.4byte	0x134
 14331 0ec1 02       		.uleb128 0x2
 14332 0ec2 91       		.byte	0x91
 14333 0ec3 77       		.sleb128 -9
 14334 0ec4 00       		.byte	0
 14335 0ec5 0B       		.uleb128 0xb
 14336 0ec6 D7140000 		.4byte	.LASF151
 14337 0eca 01       		.byte	0x1
 14338 0ecb D205     		.2byte	0x5d2
 14339 0ecd AD000000 		.4byte	0xad
 14340 0ed1 00000000 		.4byte	.LFB114
 14341 0ed5 24000000 		.4byte	.LFE114-.LFB114
 14342 0ed9 01       		.uleb128 0x1
 14343 0eda 9C       		.byte	0x9c
 14344 0edb 0C       		.uleb128 0xc
 14345 0edc AE180000 		.4byte	.LASF152
 14346 0ee0 01       		.byte	0x1
 14347 0ee1 DE05     		.2byte	0x5de
 14348 0ee3 00000000 		.4byte	.LFB115
 14349 0ee7 28000000 		.4byte	.LFE115-.LFB115
 14350 0eeb 01       		.uleb128 0x1
 14351 0eec 9C       		.byte	0x9c
 14352 0eed 010F0000 		.4byte	0xf01
 14353 0ef1 0D       		.uleb128 0xd
 14354 0ef2 A1160000 		.4byte	.LASF42
 14355 0ef6 01       		.byte	0x1
 14356 0ef7 DE05     		.2byte	0x5de
 14357 0ef9 AD000000 		.4byte	0xad
 14358 0efd 02       		.uleb128 0x2
 14359 0efe 91       		.byte	0x91
 14360 0eff 77       		.sleb128 -9
 14361 0f00 00       		.byte	0
 14362 0f01 0B       		.uleb128 0xb
 14363 0f02 0B120000 		.4byte	.LASF153
 14364 0f06 01       		.byte	0x1
 14365 0f07 E705     		.2byte	0x5e7
 14366 0f09 34010000 		.4byte	0x134
 14367 0f0d 00000000 		.4byte	.LFB116
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 311


 14368 0f11 2C000000 		.4byte	.LFE116-.LFB116
 14369 0f15 01       		.uleb128 0x1
 14370 0f16 9C       		.byte	0x9c
 14371 0f17 0C       		.uleb128 0xc
 14372 0f18 7C080000 		.4byte	.LASF154
 14373 0f1c 01       		.byte	0x1
 14374 0f1d F105     		.2byte	0x5f1
 14375 0f1f 00000000 		.4byte	.LFB117
 14376 0f23 28000000 		.4byte	.LFE117-.LFB117
 14377 0f27 01       		.uleb128 0x1
 14378 0f28 9C       		.byte	0x9c
 14379 0f29 3D0F0000 		.4byte	0xf3d
 14380 0f2d 0D       		.uleb128 0xd
 14381 0f2e A1160000 		.4byte	.LASF42
 14382 0f32 01       		.byte	0x1
 14383 0f33 F105     		.2byte	0x5f1
 14384 0f35 34010000 		.4byte	0x134
 14385 0f39 02       		.uleb128 0x2
 14386 0f3a 91       		.byte	0x91
 14387 0f3b 77       		.sleb128 -9
 14388 0f3c 00       		.byte	0
 14389 0f3d 0B       		.uleb128 0xb
 14390 0f3e B31B0000 		.4byte	.LASF155
 14391 0f42 01       		.byte	0x1
 14392 0f43 FA05     		.2byte	0x5fa
 14393 0f45 34010000 		.4byte	0x134
 14394 0f49 00000000 		.4byte	.LFB118
 14395 0f4d 2C000000 		.4byte	.LFE118-.LFB118
 14396 0f51 01       		.uleb128 0x1
 14397 0f52 9C       		.byte	0x9c
 14398 0f53 0C       		.uleb128 0xc
 14399 0f54 4F110000 		.4byte	.LASF156
 14400 0f58 01       		.byte	0x1
 14401 0f59 0406     		.2byte	0x604
 14402 0f5b 00000000 		.4byte	.LFB119
 14403 0f5f 28000000 		.4byte	.LFE119-.LFB119
 14404 0f63 01       		.uleb128 0x1
 14405 0f64 9C       		.byte	0x9c
 14406 0f65 790F0000 		.4byte	0xf79
 14407 0f69 0D       		.uleb128 0xd
 14408 0f6a A1160000 		.4byte	.LASF42
 14409 0f6e 01       		.byte	0x1
 14410 0f6f 0406     		.2byte	0x604
 14411 0f71 34010000 		.4byte	0x134
 14412 0f75 02       		.uleb128 0x2
 14413 0f76 91       		.byte	0x91
 14414 0f77 77       		.sleb128 -9
 14415 0f78 00       		.byte	0
 14416 0f79 0B       		.uleb128 0xb
 14417 0f7a 95120000 		.4byte	.LASF157
 14418 0f7e 01       		.byte	0x1
 14419 0f7f 0D06     		.2byte	0x60d
 14420 0f81 34010000 		.4byte	0x134
 14421 0f85 00000000 		.4byte	.LFB120
 14422 0f89 2C000000 		.4byte	.LFE120-.LFB120
 14423 0f8d 01       		.uleb128 0x1
 14424 0f8e 9C       		.byte	0x9c
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 312


 14425 0f8f 0C       		.uleb128 0xc
 14426 0f90 7C030000 		.4byte	.LASF158
 14427 0f94 01       		.byte	0x1
 14428 0f95 1706     		.2byte	0x617
 14429 0f97 00000000 		.4byte	.LFB121
 14430 0f9b 28000000 		.4byte	.LFE121-.LFB121
 14431 0f9f 01       		.uleb128 0x1
 14432 0fa0 9C       		.byte	0x9c
 14433 0fa1 B50F0000 		.4byte	0xfb5
 14434 0fa5 0D       		.uleb128 0xd
 14435 0fa6 A1160000 		.4byte	.LASF42
 14436 0faa 01       		.byte	0x1
 14437 0fab 1706     		.2byte	0x617
 14438 0fad 34010000 		.4byte	0x134
 14439 0fb1 02       		.uleb128 0x2
 14440 0fb2 91       		.byte	0x91
 14441 0fb3 77       		.sleb128 -9
 14442 0fb4 00       		.byte	0
 14443 0fb5 0B       		.uleb128 0xb
 14444 0fb6 DA120000 		.4byte	.LASF159
 14445 0fba 01       		.byte	0x1
 14446 0fbb 2006     		.2byte	0x620
 14447 0fbd 34010000 		.4byte	0x134
 14448 0fc1 00000000 		.4byte	.LFB122
 14449 0fc5 2C000000 		.4byte	.LFE122-.LFB122
 14450 0fc9 01       		.uleb128 0x1
 14451 0fca 9C       		.byte	0x9c
 14452 0fcb 0C       		.uleb128 0xc
 14453 0fcc EA0F0000 		.4byte	.LASF160
 14454 0fd0 01       		.byte	0x1
 14455 0fd1 2A06     		.2byte	0x62a
 14456 0fd3 00000000 		.4byte	.LFB123
 14457 0fd7 28000000 		.4byte	.LFE123-.LFB123
 14458 0fdb 01       		.uleb128 0x1
 14459 0fdc 9C       		.byte	0x9c
 14460 0fdd F10F0000 		.4byte	0xff1
 14461 0fe1 0D       		.uleb128 0xd
 14462 0fe2 A1160000 		.4byte	.LASF42
 14463 0fe6 01       		.byte	0x1
 14464 0fe7 2A06     		.2byte	0x62a
 14465 0fe9 34010000 		.4byte	0x134
 14466 0fed 02       		.uleb128 0x2
 14467 0fee 91       		.byte	0x91
 14468 0fef 77       		.sleb128 -9
 14469 0ff0 00       		.byte	0
 14470 0ff1 0B       		.uleb128 0xb
 14471 0ff2 6F060000 		.4byte	.LASF161
 14472 0ff6 01       		.byte	0x1
 14473 0ff7 3406     		.2byte	0x634
 14474 0ff9 34010000 		.4byte	0x134
 14475 0ffd 00000000 		.4byte	.LFB124
 14476 1001 2C000000 		.4byte	.LFE124-.LFB124
 14477 1005 01       		.uleb128 0x1
 14478 1006 9C       		.byte	0x9c
 14479 1007 0C       		.uleb128 0xc
 14480 1008 B5170000 		.4byte	.LASF162
 14481 100c 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 313


 14482 100d 3E06     		.2byte	0x63e
 14483 100f 00000000 		.4byte	.LFB125
 14484 1013 28000000 		.4byte	.LFE125-.LFB125
 14485 1017 01       		.uleb128 0x1
 14486 1018 9C       		.byte	0x9c
 14487 1019 2D100000 		.4byte	0x102d
 14488 101d 0D       		.uleb128 0xd
 14489 101e A1160000 		.4byte	.LASF42
 14490 1022 01       		.byte	0x1
 14491 1023 3E06     		.2byte	0x63e
 14492 1025 34010000 		.4byte	0x134
 14493 1029 02       		.uleb128 0x2
 14494 102a 91       		.byte	0x91
 14495 102b 77       		.sleb128 -9
 14496 102c 00       		.byte	0
 14497 102d 0B       		.uleb128 0xb
 14498 102e E4020000 		.4byte	.LASF163
 14499 1032 01       		.byte	0x1
 14500 1033 4806     		.2byte	0x648
 14501 1035 34010000 		.4byte	0x134
 14502 1039 00000000 		.4byte	.LFB126
 14503 103d 2C000000 		.4byte	.LFE126-.LFB126
 14504 1041 01       		.uleb128 0x1
 14505 1042 9C       		.byte	0x9c
 14506 1043 0C       		.uleb128 0xc
 14507 1044 ED140000 		.4byte	.LASF164
 14508 1048 01       		.byte	0x1
 14509 1049 5206     		.2byte	0x652
 14510 104b 00000000 		.4byte	.LFB127
 14511 104f 28000000 		.4byte	.LFE127-.LFB127
 14512 1053 01       		.uleb128 0x1
 14513 1054 9C       		.byte	0x9c
 14514 1055 69100000 		.4byte	0x1069
 14515 1059 0D       		.uleb128 0xd
 14516 105a A1160000 		.4byte	.LASF42
 14517 105e 01       		.byte	0x1
 14518 105f 5206     		.2byte	0x652
 14519 1061 34010000 		.4byte	0x134
 14520 1065 02       		.uleb128 0x2
 14521 1066 91       		.byte	0x91
 14522 1067 77       		.sleb128 -9
 14523 1068 00       		.byte	0
 14524 1069 0B       		.uleb128 0xb
 14525 106a 8D1C0000 		.4byte	.LASF165
 14526 106e 01       		.byte	0x1
 14527 106f 5F06     		.2byte	0x65f
 14528 1071 AD000000 		.4byte	0xad
 14529 1075 00000000 		.4byte	.LFB128
 14530 1079 24000000 		.4byte	.LFE128-.LFB128
 14531 107d 01       		.uleb128 0x1
 14532 107e 9C       		.byte	0x9c
 14533 107f 0B       		.uleb128 0xb
 14534 1080 4F140000 		.4byte	.LASF166
 14535 1084 01       		.byte	0x1
 14536 1085 6A06     		.2byte	0x66a
 14537 1087 34010000 		.4byte	0x134
 14538 108b 00000000 		.4byte	.LFB129
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 314


 14539 108f 2C000000 		.4byte	.LFE129-.LFB129
 14540 1093 01       		.uleb128 0x1
 14541 1094 9C       		.byte	0x9c
 14542 1095 0B       		.uleb128 0xb
 14543 1096 92190000 		.4byte	.LASF167
 14544 109a 01       		.byte	0x1
 14545 109b 7506     		.2byte	0x675
 14546 109d 34010000 		.4byte	0x134
 14547 10a1 00000000 		.4byte	.LFB130
 14548 10a5 2C000000 		.4byte	.LFE130-.LFB130
 14549 10a9 01       		.uleb128 0x1
 14550 10aa 9C       		.byte	0x9c
 14551 10ab 0B       		.uleb128 0xb
 14552 10ac E81B0000 		.4byte	.LASF168
 14553 10b0 01       		.byte	0x1
 14554 10b1 8006     		.2byte	0x680
 14555 10b3 34010000 		.4byte	0x134
 14556 10b7 00000000 		.4byte	.LFB131
 14557 10bb 2C000000 		.4byte	.LFE131-.LFB131
 14558 10bf 01       		.uleb128 0x1
 14559 10c0 9C       		.byte	0x9c
 14560 10c1 0B       		.uleb128 0xb
 14561 10c2 4E120000 		.4byte	.LASF169
 14562 10c6 01       		.byte	0x1
 14563 10c7 8B06     		.2byte	0x68b
 14564 10c9 34010000 		.4byte	0x134
 14565 10cd 00000000 		.4byte	.LFB132
 14566 10d1 2C000000 		.4byte	.LFE132-.LFB132
 14567 10d5 01       		.uleb128 0x1
 14568 10d6 9C       		.byte	0x9c
 14569 10d7 0B       		.uleb128 0xb
 14570 10d8 FB180000 		.4byte	.LASF170
 14571 10dc 01       		.byte	0x1
 14572 10dd 9706     		.2byte	0x697
 14573 10df 34010000 		.4byte	0x134
 14574 10e3 00000000 		.4byte	.LFB133
 14575 10e7 2C000000 		.4byte	.LFE133-.LFB133
 14576 10eb 01       		.uleb128 0x1
 14577 10ec 9C       		.byte	0x9c
 14578 10ed 0B       		.uleb128 0xb
 14579 10ee 13090000 		.4byte	.LASF171
 14580 10f2 01       		.byte	0x1
 14581 10f3 A206     		.2byte	0x6a2
 14582 10f5 34010000 		.4byte	0x134
 14583 10f9 00000000 		.4byte	.LFB134
 14584 10fd 2C000000 		.4byte	.LFE134-.LFB134
 14585 1101 01       		.uleb128 0x1
 14586 1102 9C       		.byte	0x9c
 14587 1103 0C       		.uleb128 0xc
 14588 1104 5C060000 		.4byte	.LASF172
 14589 1108 01       		.byte	0x1
 14590 1109 B906     		.2byte	0x6b9
 14591 110b 00000000 		.4byte	.LFB135
 14592 110f EC000000 		.4byte	.LFE135-.LFB135
 14593 1113 01       		.uleb128 0x1
 14594 1114 9C       		.byte	0x9c
 14595 1115 98110000 		.4byte	0x1198
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 315


 14596 1119 0F       		.uleb128 0xf
 14597 111a 617800   		.ascii	"ax\000"
 14598 111d 01       		.byte	0x1
 14599 111e B906     		.2byte	0x6b9
 14600 1120 98110000 		.4byte	0x1198
 14601 1124 02       		.uleb128 0x2
 14602 1125 91       		.byte	0x91
 14603 1126 74       		.sleb128 -12
 14604 1127 0F       		.uleb128 0xf
 14605 1128 617900   		.ascii	"ay\000"
 14606 112b 01       		.byte	0x1
 14607 112c B906     		.2byte	0x6b9
 14608 112e 98110000 		.4byte	0x1198
 14609 1132 02       		.uleb128 0x2
 14610 1133 91       		.byte	0x91
 14611 1134 70       		.sleb128 -16
 14612 1135 0F       		.uleb128 0xf
 14613 1136 617A00   		.ascii	"az\000"
 14614 1139 01       		.byte	0x1
 14615 113a B906     		.2byte	0x6b9
 14616 113c 98110000 		.4byte	0x1198
 14617 1140 02       		.uleb128 0x2
 14618 1141 91       		.byte	0x91
 14619 1142 6C       		.sleb128 -20
 14620 1143 0F       		.uleb128 0xf
 14621 1144 677800   		.ascii	"gx\000"
 14622 1147 01       		.byte	0x1
 14623 1148 B906     		.2byte	0x6b9
 14624 114a 98110000 		.4byte	0x1198
 14625 114e 02       		.uleb128 0x2
 14626 114f 91       		.byte	0x91
 14627 1150 68       		.sleb128 -24
 14628 1151 0F       		.uleb128 0xf
 14629 1152 677900   		.ascii	"gy\000"
 14630 1155 01       		.byte	0x1
 14631 1156 B906     		.2byte	0x6b9
 14632 1158 98110000 		.4byte	0x1198
 14633 115c 02       		.uleb128 0x2
 14634 115d 91       		.byte	0x91
 14635 115e 00       		.sleb128 0
 14636 115f 0F       		.uleb128 0xf
 14637 1160 677A00   		.ascii	"gz\000"
 14638 1163 01       		.byte	0x1
 14639 1164 B906     		.2byte	0x6b9
 14640 1166 98110000 		.4byte	0x1198
 14641 116a 02       		.uleb128 0x2
 14642 116b 91       		.byte	0x91
 14643 116c 04       		.sleb128 4
 14644 116d 0F       		.uleb128 0xf
 14645 116e 6D7800   		.ascii	"mx\000"
 14646 1171 01       		.byte	0x1
 14647 1172 B906     		.2byte	0x6b9
 14648 1174 98110000 		.4byte	0x1198
 14649 1178 02       		.uleb128 0x2
 14650 1179 91       		.byte	0x91
 14651 117a 08       		.sleb128 8
 14652 117b 0F       		.uleb128 0xf
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 316


 14653 117c 6D7900   		.ascii	"my\000"
 14654 117f 01       		.byte	0x1
 14655 1180 B906     		.2byte	0x6b9
 14656 1182 98110000 		.4byte	0x1198
 14657 1186 02       		.uleb128 0x2
 14658 1187 91       		.byte	0x91
 14659 1188 0C       		.sleb128 12
 14660 1189 0F       		.uleb128 0xf
 14661 118a 6D7A00   		.ascii	"mz\000"
 14662 118d 01       		.byte	0x1
 14663 118e B906     		.2byte	0x6b9
 14664 1190 98110000 		.4byte	0x1198
 14665 1194 02       		.uleb128 0x2
 14666 1195 91       		.byte	0x91
 14667 1196 10       		.sleb128 16
 14668 1197 00       		.byte	0
 14669 1198 10       		.uleb128 0x10
 14670 1199 04       		.byte	0x4
 14671 119a B8000000 		.4byte	0xb8
 14672 119e 0C       		.uleb128 0xc
 14673 119f 431D0000 		.4byte	.LASF173
 14674 11a3 01       		.byte	0x1
 14675 11a4 DD06     		.2byte	0x6dd
 14676 11a6 00000000 		.4byte	.LFB136
 14677 11aa 04010000 		.4byte	.LFE136-.LFB136
 14678 11ae 01       		.uleb128 0x1
 14679 11af 9C       		.byte	0x9c
 14680 11b0 40120000 		.4byte	0x1240
 14681 11b4 0F       		.uleb128 0xf
 14682 11b5 617800   		.ascii	"ax\000"
 14683 11b8 01       		.byte	0x1
 14684 11b9 DD06     		.2byte	0x6dd
 14685 11bb 98110000 		.4byte	0x1198
 14686 11bf 02       		.uleb128 0x2
 14687 11c0 91       		.byte	0x91
 14688 11c1 74       		.sleb128 -12
 14689 11c2 0F       		.uleb128 0xf
 14690 11c3 617900   		.ascii	"ay\000"
 14691 11c6 01       		.byte	0x1
 14692 11c7 DD06     		.2byte	0x6dd
 14693 11c9 98110000 		.4byte	0x1198
 14694 11cd 02       		.uleb128 0x2
 14695 11ce 91       		.byte	0x91
 14696 11cf 70       		.sleb128 -16
 14697 11d0 0F       		.uleb128 0xf
 14698 11d1 617A00   		.ascii	"az\000"
 14699 11d4 01       		.byte	0x1
 14700 11d5 DD06     		.2byte	0x6dd
 14701 11d7 98110000 		.4byte	0x1198
 14702 11db 02       		.uleb128 0x2
 14703 11dc 91       		.byte	0x91
 14704 11dd 6C       		.sleb128 -20
 14705 11de 0F       		.uleb128 0xf
 14706 11df 677800   		.ascii	"gx\000"
 14707 11e2 01       		.byte	0x1
 14708 11e3 DD06     		.2byte	0x6dd
 14709 11e5 98110000 		.4byte	0x1198
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 317


 14710 11e9 02       		.uleb128 0x2
 14711 11ea 91       		.byte	0x91
 14712 11eb 68       		.sleb128 -24
 14713 11ec 0F       		.uleb128 0xf
 14714 11ed 677900   		.ascii	"gy\000"
 14715 11f0 01       		.byte	0x1
 14716 11f1 DD06     		.2byte	0x6dd
 14717 11f3 98110000 		.4byte	0x1198
 14718 11f7 02       		.uleb128 0x2
 14719 11f8 91       		.byte	0x91
 14720 11f9 00       		.sleb128 0
 14721 11fa 0F       		.uleb128 0xf
 14722 11fb 677A00   		.ascii	"gz\000"
 14723 11fe 01       		.byte	0x1
 14724 11ff DD06     		.2byte	0x6dd
 14725 1201 98110000 		.4byte	0x1198
 14726 1205 02       		.uleb128 0x2
 14727 1206 91       		.byte	0x91
 14728 1207 04       		.sleb128 4
 14729 1208 0F       		.uleb128 0xf
 14730 1209 6D7800   		.ascii	"mx\000"
 14731 120c 01       		.byte	0x1
 14732 120d DD06     		.2byte	0x6dd
 14733 120f 98110000 		.4byte	0x1198
 14734 1213 02       		.uleb128 0x2
 14735 1214 91       		.byte	0x91
 14736 1215 08       		.sleb128 8
 14737 1216 0F       		.uleb128 0xf
 14738 1217 6D7900   		.ascii	"my\000"
 14739 121a 01       		.byte	0x1
 14740 121b DD06     		.2byte	0x6dd
 14741 121d 98110000 		.4byte	0x1198
 14742 1221 02       		.uleb128 0x2
 14743 1222 91       		.byte	0x91
 14744 1223 0C       		.sleb128 12
 14745 1224 0F       		.uleb128 0xf
 14746 1225 6D7A00   		.ascii	"mz\000"
 14747 1228 01       		.byte	0x1
 14748 1229 DD06     		.2byte	0x6dd
 14749 122b 98110000 		.4byte	0x1198
 14750 122f 02       		.uleb128 0x2
 14751 1230 91       		.byte	0x91
 14752 1231 10       		.sleb128 16
 14753 1232 0F       		.uleb128 0xf
 14754 1233 7400     		.ascii	"t\000"
 14755 1235 01       		.byte	0x1
 14756 1236 DD06     		.2byte	0x6dd
 14757 1238 98110000 		.4byte	0x1198
 14758 123c 02       		.uleb128 0x2
 14759 123d 91       		.byte	0x91
 14760 123e 14       		.sleb128 20
 14761 123f 00       		.byte	0
 14762 1240 0C       		.uleb128 0xc
 14763 1241 37160000 		.4byte	.LASF174
 14764 1245 01       		.byte	0x1
 14765 1246 FA06     		.2byte	0x6fa
 14766 1248 00000000 		.4byte	.LFB137
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 318


 14767 124c B0000000 		.4byte	.LFE137-.LFB137
 14768 1250 01       		.uleb128 0x1
 14769 1251 9C       		.byte	0x9c
 14770 1252 AB120000 		.4byte	0x12ab
 14771 1256 0F       		.uleb128 0xf
 14772 1257 617800   		.ascii	"ax\000"
 14773 125a 01       		.byte	0x1
 14774 125b FA06     		.2byte	0x6fa
 14775 125d 98110000 		.4byte	0x1198
 14776 1261 02       		.uleb128 0x2
 14777 1262 91       		.byte	0x91
 14778 1263 74       		.sleb128 -12
 14779 1264 0F       		.uleb128 0xf
 14780 1265 617900   		.ascii	"ay\000"
 14781 1268 01       		.byte	0x1
 14782 1269 FA06     		.2byte	0x6fa
 14783 126b 98110000 		.4byte	0x1198
 14784 126f 02       		.uleb128 0x2
 14785 1270 91       		.byte	0x91
 14786 1271 70       		.sleb128 -16
 14787 1272 0F       		.uleb128 0xf
 14788 1273 617A00   		.ascii	"az\000"
 14789 1276 01       		.byte	0x1
 14790 1277 FA06     		.2byte	0x6fa
 14791 1279 98110000 		.4byte	0x1198
 14792 127d 02       		.uleb128 0x2
 14793 127e 91       		.byte	0x91
 14794 127f 6C       		.sleb128 -20
 14795 1280 0F       		.uleb128 0xf
 14796 1281 677800   		.ascii	"gx\000"
 14797 1284 01       		.byte	0x1
 14798 1285 FA06     		.2byte	0x6fa
 14799 1287 98110000 		.4byte	0x1198
 14800 128b 02       		.uleb128 0x2
 14801 128c 91       		.byte	0x91
 14802 128d 68       		.sleb128 -24
 14803 128e 0F       		.uleb128 0xf
 14804 128f 677900   		.ascii	"gy\000"
 14805 1292 01       		.byte	0x1
 14806 1293 FA06     		.2byte	0x6fa
 14807 1295 98110000 		.4byte	0x1198
 14808 1299 02       		.uleb128 0x2
 14809 129a 91       		.byte	0x91
 14810 129b 00       		.sleb128 0
 14811 129c 0F       		.uleb128 0xf
 14812 129d 677A00   		.ascii	"gz\000"
 14813 12a0 01       		.byte	0x1
 14814 12a1 FA06     		.2byte	0x6fa
 14815 12a3 98110000 		.4byte	0x1198
 14816 12a7 02       		.uleb128 0x2
 14817 12a8 91       		.byte	0x91
 14818 12a9 04       		.sleb128 4
 14819 12aa 00       		.byte	0
 14820 12ab 0C       		.uleb128 0xc
 14821 12ac 66180000 		.4byte	.LASF175
 14822 12b0 01       		.byte	0x1
 14823 12b1 1307     		.2byte	0x713
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 319


 14824 12b3 00000000 		.4byte	.LFB138
 14825 12b7 C8000000 		.4byte	.LFE138-.LFB138
 14826 12bb 01       		.uleb128 0x1
 14827 12bc 9C       		.byte	0x9c
 14828 12bd 23130000 		.4byte	0x1323
 14829 12c1 0F       		.uleb128 0xf
 14830 12c2 617800   		.ascii	"ax\000"
 14831 12c5 01       		.byte	0x1
 14832 12c6 1307     		.2byte	0x713
 14833 12c8 98110000 		.4byte	0x1198
 14834 12cc 02       		.uleb128 0x2
 14835 12cd 91       		.byte	0x91
 14836 12ce 74       		.sleb128 -12
 14837 12cf 0F       		.uleb128 0xf
 14838 12d0 617900   		.ascii	"ay\000"
 14839 12d3 01       		.byte	0x1
 14840 12d4 1307     		.2byte	0x713
 14841 12d6 98110000 		.4byte	0x1198
 14842 12da 02       		.uleb128 0x2
 14843 12db 91       		.byte	0x91
 14844 12dc 70       		.sleb128 -16
 14845 12dd 0F       		.uleb128 0xf
 14846 12de 617A00   		.ascii	"az\000"
 14847 12e1 01       		.byte	0x1
 14848 12e2 1307     		.2byte	0x713
 14849 12e4 98110000 		.4byte	0x1198
 14850 12e8 02       		.uleb128 0x2
 14851 12e9 91       		.byte	0x91
 14852 12ea 6C       		.sleb128 -20
 14853 12eb 0F       		.uleb128 0xf
 14854 12ec 677800   		.ascii	"gx\000"
 14855 12ef 01       		.byte	0x1
 14856 12f0 1307     		.2byte	0x713
 14857 12f2 98110000 		.4byte	0x1198
 14858 12f6 02       		.uleb128 0x2
 14859 12f7 91       		.byte	0x91
 14860 12f8 68       		.sleb128 -24
 14861 12f9 0F       		.uleb128 0xf
 14862 12fa 677900   		.ascii	"gy\000"
 14863 12fd 01       		.byte	0x1
 14864 12fe 1307     		.2byte	0x713
 14865 1300 98110000 		.4byte	0x1198
 14866 1304 02       		.uleb128 0x2
 14867 1305 91       		.byte	0x91
 14868 1306 00       		.sleb128 0
 14869 1307 0F       		.uleb128 0xf
 14870 1308 677A00   		.ascii	"gz\000"
 14871 130b 01       		.byte	0x1
 14872 130c 1307     		.2byte	0x713
 14873 130e 98110000 		.4byte	0x1198
 14874 1312 02       		.uleb128 0x2
 14875 1313 91       		.byte	0x91
 14876 1314 04       		.sleb128 4
 14877 1315 0F       		.uleb128 0xf
 14878 1316 7400     		.ascii	"t\000"
 14879 1318 01       		.byte	0x1
 14880 1319 1307     		.2byte	0x713
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 320


 14881 131b 98110000 		.4byte	0x1198
 14882 131f 02       		.uleb128 0x2
 14883 1320 91       		.byte	0x91
 14884 1321 08       		.sleb128 8
 14885 1322 00       		.byte	0
 14886 1323 0C       		.uleb128 0xc
 14887 1324 FD000000 		.4byte	.LASF176
 14888 1328 01       		.byte	0x1
 14889 1329 4207     		.2byte	0x742
 14890 132b 00000000 		.4byte	.LFB139
 14891 132f 6C000000 		.4byte	.LFE139-.LFB139
 14892 1333 01       		.uleb128 0x1
 14893 1334 9C       		.byte	0x9c
 14894 1335 61130000 		.4byte	0x1361
 14895 1339 0F       		.uleb128 0xf
 14896 133a 7800     		.ascii	"x\000"
 14897 133c 01       		.byte	0x1
 14898 133d 4207     		.2byte	0x742
 14899 133f 98110000 		.4byte	0x1198
 14900 1343 02       		.uleb128 0x2
 14901 1344 91       		.byte	0x91
 14902 1345 74       		.sleb128 -12
 14903 1346 0F       		.uleb128 0xf
 14904 1347 7900     		.ascii	"y\000"
 14905 1349 01       		.byte	0x1
 14906 134a 4207     		.2byte	0x742
 14907 134c 98110000 		.4byte	0x1198
 14908 1350 02       		.uleb128 0x2
 14909 1351 91       		.byte	0x91
 14910 1352 70       		.sleb128 -16
 14911 1353 0F       		.uleb128 0xf
 14912 1354 7A00     		.ascii	"z\000"
 14913 1356 01       		.byte	0x1
 14914 1357 4207     		.2byte	0x742
 14915 1359 98110000 		.4byte	0x1198
 14916 135d 02       		.uleb128 0x2
 14917 135e 91       		.byte	0x91
 14918 135f 6C       		.sleb128 -20
 14919 1360 00       		.byte	0
 14920 1361 11       		.uleb128 0x11
 14921 1362 8E060000 		.4byte	.LASF177
 14922 1366 01       		.byte	0x1
 14923 1367 4D07     		.2byte	0x74d
 14924 1369 B8000000 		.4byte	0xb8
 14925 136d 00000000 		.4byte	.LFB140
 14926 1371 58000000 		.4byte	.LFE140-.LFB140
 14927 1375 01       		.uleb128 0x1
 14928 1376 9C       		.byte	0x9c
 14929 1377 9A130000 		.4byte	0x139a
 14930 137b 12       		.uleb128 0x12
 14931 137c F71A0000 		.4byte	.LASF178
 14932 1380 01       		.byte	0x1
 14933 1381 4E07     		.2byte	0x74e
 14934 1383 A2000000 		.4byte	0xa2
 14935 1387 02       		.uleb128 0x2
 14936 1388 91       		.byte	0x91
 14937 1389 77       		.sleb128 -9
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 321


 14938 138a 12       		.uleb128 0x12
 14939 138b 45130000 		.4byte	.LASF179
 14940 138f 01       		.byte	0x1
 14941 1390 4E07     		.2byte	0x74e
 14942 1392 A2000000 		.4byte	0xa2
 14943 1396 02       		.uleb128 0x2
 14944 1397 91       		.byte	0x91
 14945 1398 76       		.sleb128 -10
 14946 1399 00       		.byte	0
 14947 139a 11       		.uleb128 0x11
 14948 139b BE060000 		.4byte	.LASF180
 14949 139f 01       		.byte	0x1
 14950 13a0 5A07     		.2byte	0x75a
 14951 13a2 B8000000 		.4byte	0xb8
 14952 13a6 00000000 		.4byte	.LFB141
 14953 13aa 58000000 		.4byte	.LFE141-.LFB141
 14954 13ae 01       		.uleb128 0x1
 14955 13af 9C       		.byte	0x9c
 14956 13b0 D3130000 		.4byte	0x13d3
 14957 13b4 12       		.uleb128 0x12
 14958 13b5 F71A0000 		.4byte	.LASF178
 14959 13b9 01       		.byte	0x1
 14960 13ba 5B07     		.2byte	0x75b
 14961 13bc A2000000 		.4byte	0xa2
 14962 13c0 02       		.uleb128 0x2
 14963 13c1 91       		.byte	0x91
 14964 13c2 77       		.sleb128 -9
 14965 13c3 12       		.uleb128 0x12
 14966 13c4 45130000 		.4byte	.LASF179
 14967 13c8 01       		.byte	0x1
 14968 13c9 5B07     		.2byte	0x75b
 14969 13cb A2000000 		.4byte	0xa2
 14970 13cf 02       		.uleb128 0x2
 14971 13d0 91       		.byte	0x91
 14972 13d1 76       		.sleb128 -10
 14973 13d2 00       		.byte	0
 14974 13d3 11       		.uleb128 0x11
 14975 13d4 CF1B0000 		.4byte	.LASF181
 14976 13d8 01       		.byte	0x1
 14977 13d9 6707     		.2byte	0x767
 14978 13db B8000000 		.4byte	0xb8
 14979 13df 00000000 		.4byte	.LFB142
 14980 13e3 58000000 		.4byte	.LFE142-.LFB142
 14981 13e7 01       		.uleb128 0x1
 14982 13e8 9C       		.byte	0x9c
 14983 13e9 0C140000 		.4byte	0x140c
 14984 13ed 12       		.uleb128 0x12
 14985 13ee F71A0000 		.4byte	.LASF178
 14986 13f2 01       		.byte	0x1
 14987 13f3 6807     		.2byte	0x768
 14988 13f5 A2000000 		.4byte	0xa2
 14989 13f9 02       		.uleb128 0x2
 14990 13fa 91       		.byte	0x91
 14991 13fb 77       		.sleb128 -9
 14992 13fc 12       		.uleb128 0x12
 14993 13fd 45130000 		.4byte	.LASF179
 14994 1401 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 322


 14995 1402 6807     		.2byte	0x768
 14996 1404 A2000000 		.4byte	0xa2
 14997 1408 02       		.uleb128 0x2
 14998 1409 91       		.byte	0x91
 14999 140a 76       		.sleb128 -10
 15000 140b 00       		.byte	0
 15001 140c 0B       		.uleb128 0xb
 15002 140d 250A0000 		.4byte	.LASF182
 15003 1411 01       		.byte	0x1
 15004 1412 7607     		.2byte	0x776
 15005 1414 B8000000 		.4byte	0xb8
 15006 1418 00000000 		.4byte	.LFB143
 15007 141c 34000000 		.4byte	.LFE143-.LFB143
 15008 1420 01       		.uleb128 0x1
 15009 1421 9C       		.byte	0x9c
 15010 1422 0C       		.uleb128 0xc
 15011 1423 A2050000 		.4byte	.LASF183
 15012 1427 01       		.byte	0x1
 15013 1428 9D07     		.2byte	0x79d
 15014 142a 00000000 		.4byte	.LFB144
 15015 142e 6C000000 		.4byte	.LFE144-.LFB144
 15016 1432 01       		.uleb128 0x1
 15017 1433 9C       		.byte	0x9c
 15018 1434 60140000 		.4byte	0x1460
 15019 1438 0F       		.uleb128 0xf
 15020 1439 7800     		.ascii	"x\000"
 15021 143b 01       		.byte	0x1
 15022 143c 9D07     		.2byte	0x79d
 15023 143e 98110000 		.4byte	0x1198
 15024 1442 02       		.uleb128 0x2
 15025 1443 91       		.byte	0x91
 15026 1444 74       		.sleb128 -12
 15027 1445 0F       		.uleb128 0xf
 15028 1446 7900     		.ascii	"y\000"
 15029 1448 01       		.byte	0x1
 15030 1449 9D07     		.2byte	0x79d
 15031 144b 98110000 		.4byte	0x1198
 15032 144f 02       		.uleb128 0x2
 15033 1450 91       		.byte	0x91
 15034 1451 70       		.sleb128 -16
 15035 1452 0F       		.uleb128 0xf
 15036 1453 7A00     		.ascii	"z\000"
 15037 1455 01       		.byte	0x1
 15038 1456 9D07     		.2byte	0x79d
 15039 1458 98110000 		.4byte	0x1198
 15040 145c 02       		.uleb128 0x2
 15041 145d 91       		.byte	0x91
 15042 145e 6C       		.sleb128 -20
 15043 145f 00       		.byte	0
 15044 1460 11       		.uleb128 0x11
 15045 1461 AD070000 		.4byte	.LASF184
 15046 1465 01       		.byte	0x1
 15047 1466 A807     		.2byte	0x7a8
 15048 1468 B8000000 		.4byte	0xb8
 15049 146c 00000000 		.4byte	.LFB145
 15050 1470 58000000 		.4byte	.LFE145-.LFB145
 15051 1474 01       		.uleb128 0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 323


 15052 1475 9C       		.byte	0x9c
 15053 1476 99140000 		.4byte	0x1499
 15054 147a 12       		.uleb128 0x12
 15055 147b F71A0000 		.4byte	.LASF178
 15056 147f 01       		.byte	0x1
 15057 1480 A907     		.2byte	0x7a9
 15058 1482 A2000000 		.4byte	0xa2
 15059 1486 02       		.uleb128 0x2
 15060 1487 91       		.byte	0x91
 15061 1488 77       		.sleb128 -9
 15062 1489 12       		.uleb128 0x12
 15063 148a 45130000 		.4byte	.LASF179
 15064 148e 01       		.byte	0x1
 15065 148f A907     		.2byte	0x7a9
 15066 1491 A2000000 		.4byte	0xa2
 15067 1495 02       		.uleb128 0x2
 15068 1496 91       		.byte	0x91
 15069 1497 76       		.sleb128 -10
 15070 1498 00       		.byte	0
 15071 1499 11       		.uleb128 0x11
 15072 149a C2070000 		.4byte	.LASF185
 15073 149e 01       		.byte	0x1
 15074 149f B507     		.2byte	0x7b5
 15075 14a1 B8000000 		.4byte	0xb8
 15076 14a5 00000000 		.4byte	.LFB146
 15077 14a9 58000000 		.4byte	.LFE146-.LFB146
 15078 14ad 01       		.uleb128 0x1
 15079 14ae 9C       		.byte	0x9c
 15080 14af D2140000 		.4byte	0x14d2
 15081 14b3 12       		.uleb128 0x12
 15082 14b4 F71A0000 		.4byte	.LASF178
 15083 14b8 01       		.byte	0x1
 15084 14b9 B607     		.2byte	0x7b6
 15085 14bb A2000000 		.4byte	0xa2
 15086 14bf 02       		.uleb128 0x2
 15087 14c0 91       		.byte	0x91
 15088 14c1 77       		.sleb128 -9
 15089 14c2 12       		.uleb128 0x12
 15090 14c3 45130000 		.4byte	.LASF179
 15091 14c7 01       		.byte	0x1
 15092 14c8 B607     		.2byte	0x7b6
 15093 14ca A2000000 		.4byte	0xa2
 15094 14ce 02       		.uleb128 0x2
 15095 14cf 91       		.byte	0x91
 15096 14d0 76       		.sleb128 -10
 15097 14d1 00       		.byte	0
 15098 14d2 11       		.uleb128 0x11
 15099 14d3 D7070000 		.4byte	.LASF186
 15100 14d7 01       		.byte	0x1
 15101 14d8 C207     		.2byte	0x7c2
 15102 14da B8000000 		.4byte	0xb8
 15103 14de 00000000 		.4byte	.LFB147
 15104 14e2 58000000 		.4byte	.LFE147-.LFB147
 15105 14e6 01       		.uleb128 0x1
 15106 14e7 9C       		.byte	0x9c
 15107 14e8 0B150000 		.4byte	0x150b
 15108 14ec 12       		.uleb128 0x12
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 324


 15109 14ed F71A0000 		.4byte	.LASF178
 15110 14f1 01       		.byte	0x1
 15111 14f2 C307     		.2byte	0x7c3
 15112 14f4 A2000000 		.4byte	0xa2
 15113 14f8 02       		.uleb128 0x2
 15114 14f9 91       		.byte	0x91
 15115 14fa 77       		.sleb128 -9
 15116 14fb 12       		.uleb128 0x12
 15117 14fc 45130000 		.4byte	.LASF179
 15118 1500 01       		.byte	0x1
 15119 1501 C307     		.2byte	0x7c3
 15120 1503 A2000000 		.4byte	0xa2
 15121 1507 02       		.uleb128 0x2
 15122 1508 91       		.byte	0x91
 15123 1509 76       		.sleb128 -10
 15124 150a 00       		.byte	0
 15125 150b 0E       		.uleb128 0xe
 15126 150c 731A0000 		.4byte	.LASF187
 15127 1510 01       		.byte	0x1
 15128 1511 1708     		.2byte	0x817
 15129 1513 AD000000 		.4byte	0xad
 15130 1517 00000000 		.4byte	.LFB148
 15131 151b 30000000 		.4byte	.LFE148-.LFB148
 15132 151f 01       		.uleb128 0x1
 15133 1520 9C       		.byte	0x9c
 15134 1521 35150000 		.4byte	0x1535
 15135 1525 0D       		.uleb128 0xd
 15136 1526 D80A0000 		.4byte	.LASF188
 15137 152a 01       		.byte	0x1
 15138 152b 1708     		.2byte	0x817
 15139 152d 94000000 		.4byte	0x94
 15140 1531 02       		.uleb128 0x2
 15141 1532 91       		.byte	0x91
 15142 1533 74       		.sleb128 -12
 15143 1534 00       		.byte	0
 15144 1535 0E       		.uleb128 0xe
 15145 1536 5E030000 		.4byte	.LASF189
 15146 153a 01       		.byte	0x1
 15147 153b 2008     		.2byte	0x820
 15148 153d C3000000 		.4byte	0xc3
 15149 1541 00000000 		.4byte	.LFB149
 15150 1545 40000000 		.4byte	.LFE149-.LFB149
 15151 1549 01       		.uleb128 0x1
 15152 154a 9C       		.byte	0x9c
 15153 154b 5F150000 		.4byte	0x155f
 15154 154f 0D       		.uleb128 0xd
 15155 1550 D80A0000 		.4byte	.LASF188
 15156 1554 01       		.byte	0x1
 15157 1555 2008     		.2byte	0x820
 15158 1557 94000000 		.4byte	0x94
 15159 155b 02       		.uleb128 0x2
 15160 155c 91       		.byte	0x91
 15161 155d 74       		.sleb128 -12
 15162 155e 00       		.byte	0
 15163 155f 0E       		.uleb128 0xe
 15164 1560 3C1C0000 		.4byte	.LASF190
 15165 1564 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 325


 15166 1565 2908     		.2byte	0x829
 15167 1567 CE000000 		.4byte	0xce
 15168 156b 00000000 		.4byte	.LFB150
 15169 156f 48000000 		.4byte	.LFE150-.LFB150
 15170 1573 01       		.uleb128 0x1
 15171 1574 9C       		.byte	0x9c
 15172 1575 89150000 		.4byte	0x1589
 15173 1579 0D       		.uleb128 0xd
 15174 157a D80A0000 		.4byte	.LASF188
 15175 157e 01       		.byte	0x1
 15176 157f 2908     		.2byte	0x829
 15177 1581 94000000 		.4byte	0x94
 15178 1585 02       		.uleb128 0x2
 15179 1586 91       		.byte	0x91
 15180 1587 74       		.sleb128 -12
 15181 1588 00       		.byte	0
 15182 1589 0B       		.uleb128 0xb
 15183 158a 40030000 		.4byte	.LASF191
 15184 158e 01       		.byte	0x1
 15185 158f 3508     		.2byte	0x835
 15186 1591 34010000 		.4byte	0x134
 15187 1595 00000000 		.4byte	.LFB151
 15188 1599 2C000000 		.4byte	.LFE151-.LFB151
 15189 159d 01       		.uleb128 0x1
 15190 159e 9C       		.byte	0x9c
 15191 159f 0B       		.uleb128 0xb
 15192 15a0 5B0A0000 		.4byte	.LASF192
 15193 15a4 01       		.byte	0x1
 15194 15a5 3E08     		.2byte	0x83e
 15195 15a7 34010000 		.4byte	0x134
 15196 15ab 00000000 		.4byte	.LFB152
 15197 15af 2C000000 		.4byte	.LFE152-.LFB152
 15198 15b3 01       		.uleb128 0x1
 15199 15b4 9C       		.byte	0x9c
 15200 15b5 0B       		.uleb128 0xb
 15201 15b6 5E080000 		.4byte	.LASF193
 15202 15ba 01       		.byte	0x1
 15203 15bb 4708     		.2byte	0x847
 15204 15bd 34010000 		.4byte	0x134
 15205 15c1 00000000 		.4byte	.LFB153
 15206 15c5 2C000000 		.4byte	.LFE153-.LFB153
 15207 15c9 01       		.uleb128 0x1
 15208 15ca 9C       		.byte	0x9c
 15209 15cb 0B       		.uleb128 0xb
 15210 15cc 20050000 		.4byte	.LASF194
 15211 15d0 01       		.byte	0x1
 15212 15d1 5008     		.2byte	0x850
 15213 15d3 34010000 		.4byte	0x134
 15214 15d7 00000000 		.4byte	.LFB154
 15215 15db 2C000000 		.4byte	.LFE154-.LFB154
 15216 15df 01       		.uleb128 0x1
 15217 15e0 9C       		.byte	0x9c
 15218 15e1 0B       		.uleb128 0xb
 15219 15e2 ED150000 		.4byte	.LASF195
 15220 15e6 01       		.byte	0x1
 15221 15e7 5908     		.2byte	0x859
 15222 15e9 34010000 		.4byte	0x134
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 326


 15223 15ed 00000000 		.4byte	.LFB155
 15224 15f1 2C000000 		.4byte	.LFE155-.LFB155
 15225 15f5 01       		.uleb128 0x1
 15226 15f6 9C       		.byte	0x9c
 15227 15f7 0B       		.uleb128 0xb
 15228 15f8 C8010000 		.4byte	.LASF196
 15229 15fc 01       		.byte	0x1
 15230 15fd 6208     		.2byte	0x862
 15231 15ff 34010000 		.4byte	0x134
 15232 1603 00000000 		.4byte	.LFB156
 15233 1607 2C000000 		.4byte	.LFE156-.LFB156
 15234 160b 01       		.uleb128 0x1
 15235 160c 9C       		.byte	0x9c
 15236 160d 0B       		.uleb128 0xb
 15237 160e 43050000 		.4byte	.LASF197
 15238 1612 01       		.byte	0x1
 15239 1613 6B08     		.2byte	0x86b
 15240 1615 34010000 		.4byte	0x134
 15241 1619 00000000 		.4byte	.LFB157
 15242 161d 2C000000 		.4byte	.LFE157-.LFB157
 15243 1621 01       		.uleb128 0x1
 15244 1622 9C       		.byte	0x9c
 15245 1623 0C       		.uleb128 0xc
 15246 1624 34140000 		.4byte	.LASF198
 15247 1628 01       		.byte	0x1
 15248 1629 7A08     		.2byte	0x87a
 15249 162b 00000000 		.4byte	.LFB158
 15250 162f 40000000 		.4byte	.LFE158-.LFB158
 15251 1633 01       		.uleb128 0x1
 15252 1634 9C       		.byte	0x9c
 15253 1635 58160000 		.4byte	0x1658
 15254 1639 0F       		.uleb128 0xf
 15255 163a 6E756D00 		.ascii	"num\000"
 15256 163e 01       		.byte	0x1
 15257 163f 7A08     		.2byte	0x87a
 15258 1641 AD000000 		.4byte	0xad
 15259 1645 02       		.uleb128 0x2
 15260 1646 91       		.byte	0x91
 15261 1647 77       		.sleb128 -9
 15262 1648 0D       		.uleb128 0xd
 15263 1649 620C0000 		.4byte	.LASF113
 15264 164d 01       		.byte	0x1
 15265 164e 7A08     		.2byte	0x87a
 15266 1650 AD000000 		.4byte	0xad
 15267 1654 02       		.uleb128 0x2
 15268 1655 91       		.byte	0x91
 15269 1656 76       		.sleb128 -10
 15270 1657 00       		.byte	0
 15271 1658 0B       		.uleb128 0xb
 15272 1659 11160000 		.4byte	.LASF199
 15273 165d 01       		.byte	0x1
 15274 165e 8908     		.2byte	0x889
 15275 1660 34010000 		.4byte	0x134
 15276 1664 00000000 		.4byte	.LFB159
 15277 1668 2C000000 		.4byte	.LFE159-.LFB159
 15278 166c 01       		.uleb128 0x1
 15279 166d 9C       		.byte	0x9c
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 327


 15280 166e 0C       		.uleb128 0xc
 15281 166f D6080000 		.4byte	.LASF200
 15282 1673 01       		.byte	0x1
 15283 1674 9308     		.2byte	0x893
 15284 1676 00000000 		.4byte	.LFB160
 15285 167a 28000000 		.4byte	.LFE160-.LFB160
 15286 167e 01       		.uleb128 0x1
 15287 167f 9C       		.byte	0x9c
 15288 1680 94160000 		.4byte	0x1694
 15289 1684 0D       		.uleb128 0xd
 15290 1685 A1160000 		.4byte	.LASF42
 15291 1689 01       		.byte	0x1
 15292 168a 9308     		.2byte	0x893
 15293 168c 34010000 		.4byte	0x134
 15294 1690 02       		.uleb128 0x2
 15295 1691 91       		.byte	0x91
 15296 1692 77       		.sleb128 -9
 15297 1693 00       		.byte	0
 15298 1694 0E       		.uleb128 0xe
 15299 1695 B00F0000 		.4byte	.LASF201
 15300 1699 01       		.byte	0x1
 15301 169a A808     		.2byte	0x8a8
 15302 169c 34010000 		.4byte	0x134
 15303 16a0 00000000 		.4byte	.LFB161
 15304 16a4 44000000 		.4byte	.LFE161-.LFB161
 15305 16a8 01       		.uleb128 0x1
 15306 16a9 9C       		.byte	0x9c
 15307 16aa BE160000 		.4byte	0x16be
 15308 16ae 0F       		.uleb128 0xf
 15309 16af 6E756D00 		.ascii	"num\000"
 15310 16b3 01       		.byte	0x1
 15311 16b4 A808     		.2byte	0x8a8
 15312 16b6 AD000000 		.4byte	0xad
 15313 16ba 02       		.uleb128 0x2
 15314 16bb 91       		.byte	0x91
 15315 16bc 77       		.sleb128 -9
 15316 16bd 00       		.byte	0
 15317 16be 0C       		.uleb128 0xc
 15318 16bf 46100000 		.4byte	.LASF202
 15319 16c3 01       		.byte	0x1
 15320 16c4 B408     		.2byte	0x8b4
 15321 16c6 00000000 		.4byte	.LFB162
 15322 16ca 34000000 		.4byte	.LFE162-.LFB162
 15323 16ce 01       		.uleb128 0x1
 15324 16cf 9C       		.byte	0x9c
 15325 16d0 F3160000 		.4byte	0x16f3
 15326 16d4 0F       		.uleb128 0xf
 15327 16d5 6E756D00 		.ascii	"num\000"
 15328 16d9 01       		.byte	0x1
 15329 16da B408     		.2byte	0x8b4
 15330 16dc AD000000 		.4byte	0xad
 15331 16e0 02       		.uleb128 0x2
 15332 16e1 91       		.byte	0x91
 15333 16e2 77       		.sleb128 -9
 15334 16e3 0D       		.uleb128 0xd
 15335 16e4 A1160000 		.4byte	.LASF42
 15336 16e8 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 328


 15337 16e9 B408     		.2byte	0x8b4
 15338 16eb 34010000 		.4byte	0x134
 15339 16ef 02       		.uleb128 0x2
 15340 16f0 91       		.byte	0x91
 15341 16f1 76       		.sleb128 -10
 15342 16f2 00       		.byte	0
 15343 16f3 13       		.uleb128 0x13
 15344 16f4 75090000 		.4byte	.LASF203
 15345 16f8 01       		.byte	0x1
 15346 16f9 C008     		.2byte	0x8c0
 15347 16fb 00000000 		.4byte	.LFB163
 15348 16ff 1C000000 		.4byte	.LFE163-.LFB163
 15349 1703 01       		.uleb128 0x1
 15350 1704 9C       		.byte	0x9c
 15351 1705 13       		.uleb128 0x13
 15352 1706 621E0000 		.4byte	.LASF204
 15353 170a 01       		.byte	0x1
 15354 170b C908     		.2byte	0x8c9
 15355 170d 00000000 		.4byte	.LFB164
 15356 1711 1C000000 		.4byte	.LFE164-.LFB164
 15357 1715 01       		.uleb128 0x1
 15358 1716 9C       		.byte	0x9c
 15359 1717 13       		.uleb128 0x13
 15360 1718 0D1D0000 		.4byte	.LASF205
 15361 171c 01       		.byte	0x1
 15362 171d D208     		.2byte	0x8d2
 15363 171f 00000000 		.4byte	.LFB165
 15364 1723 1C000000 		.4byte	.LFE165-.LFB165
 15365 1727 01       		.uleb128 0x1
 15366 1728 9C       		.byte	0x9c
 15367 1729 0B       		.uleb128 0xb
 15368 172a B5120000 		.4byte	.LASF206
 15369 172e 01       		.byte	0x1
 15370 172f E608     		.2byte	0x8e6
 15371 1731 AD000000 		.4byte	0xad
 15372 1735 00000000 		.4byte	.LFB166
 15373 1739 2C000000 		.4byte	.LFE166-.LFB166
 15374 173d 01       		.uleb128 0x1
 15375 173e 9C       		.byte	0x9c
 15376 173f 0C       		.uleb128 0xc
 15377 1740 230E0000 		.4byte	.LASF207
 15378 1744 01       		.byte	0x1
 15379 1745 F008     		.2byte	0x8f0
 15380 1747 00000000 		.4byte	.LFB167
 15381 174b 2C000000 		.4byte	.LFE167-.LFB167
 15382 174f 01       		.uleb128 0x1
 15383 1750 9C       		.byte	0x9c
 15384 1751 65170000 		.4byte	0x1765
 15385 1755 0D       		.uleb128 0xd
 15386 1756 9F140000 		.4byte	.LASF122
 15387 175a 01       		.byte	0x1
 15388 175b F008     		.2byte	0x8f0
 15389 175d AD000000 		.4byte	0xad
 15390 1761 02       		.uleb128 0x2
 15391 1762 91       		.byte	0x91
 15392 1763 77       		.sleb128 -9
 15393 1764 00       		.byte	0
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 329


 15394 1765 0B       		.uleb128 0xb
 15395 1766 E01C0000 		.4byte	.LASF208
 15396 176a 01       		.byte	0x1
 15397 176b 0D09     		.2byte	0x90d
 15398 176d AD000000 		.4byte	0xad
 15399 1771 00000000 		.4byte	.LFB168
 15400 1775 2C000000 		.4byte	.LFE168-.LFB168
 15401 1779 01       		.uleb128 0x1
 15402 177a 9C       		.byte	0x9c
 15403 177b 0C       		.uleb128 0xc
 15404 177c 390B0000 		.4byte	.LASF209
 15405 1780 01       		.byte	0x1
 15406 1781 1709     		.2byte	0x917
 15407 1783 00000000 		.4byte	.LFB169
 15408 1787 2C000000 		.4byte	.LFE169-.LFB169
 15409 178b 01       		.uleb128 0x1
 15410 178c 9C       		.byte	0x9c
 15411 178d A1170000 		.4byte	0x17a1
 15412 1791 0D       		.uleb128 0xd
 15413 1792 080C0000 		.4byte	.LASF210
 15414 1796 01       		.byte	0x1
 15415 1797 1709     		.2byte	0x917
 15416 1799 AD000000 		.4byte	0xad
 15417 179d 02       		.uleb128 0x2
 15418 179e 91       		.byte	0x91
 15419 179f 77       		.sleb128 -9
 15420 17a0 00       		.byte	0
 15421 17a1 0B       		.uleb128 0xb
 15422 17a2 F20E0000 		.4byte	.LASF211
 15423 17a6 01       		.byte	0x1
 15424 17a7 3109     		.2byte	0x931
 15425 17a9 AD000000 		.4byte	0xad
 15426 17ad 00000000 		.4byte	.LFB170
 15427 17b1 2C000000 		.4byte	.LFE170-.LFB170
 15428 17b5 01       		.uleb128 0x1
 15429 17b6 9C       		.byte	0x9c
 15430 17b7 0C       		.uleb128 0xc
 15431 17b8 120C0000 		.4byte	.LASF212
 15432 17bc 01       		.byte	0x1
 15433 17bd 3B09     		.2byte	0x93b
 15434 17bf 00000000 		.4byte	.LFB171
 15435 17c3 2C000000 		.4byte	.LFE171-.LFB171
 15436 17c7 01       		.uleb128 0x1
 15437 17c8 9C       		.byte	0x9c
 15438 17c9 DD170000 		.4byte	0x17dd
 15439 17cd 0D       		.uleb128 0xd
 15440 17ce 080C0000 		.4byte	.LASF210
 15441 17d2 01       		.byte	0x1
 15442 17d3 3B09     		.2byte	0x93b
 15443 17d5 AD000000 		.4byte	0xad
 15444 17d9 02       		.uleb128 0x2
 15445 17da 91       		.byte	0x91
 15446 17db 77       		.sleb128 -9
 15447 17dc 00       		.byte	0
 15448 17dd 0B       		.uleb128 0xb
 15449 17de A7060000 		.4byte	.LASF213
 15450 17e2 01       		.byte	0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 330


 15451 17e3 4909     		.2byte	0x949
 15452 17e5 34010000 		.4byte	0x134
 15453 17e9 00000000 		.4byte	.LFB172
 15454 17ed 2C000000 		.4byte	.LFE172-.LFB172
 15455 17f1 01       		.uleb128 0x1
 15456 17f2 9C       		.byte	0x9c
 15457 17f3 0C       		.uleb128 0xc
 15458 17f4 BF110000 		.4byte	.LASF214
 15459 17f8 01       		.byte	0x1
 15460 17f9 5309     		.2byte	0x953
 15461 17fb 00000000 		.4byte	.LFB173
 15462 17ff 28000000 		.4byte	.LFE173-.LFB173
 15463 1803 01       		.uleb128 0x1
 15464 1804 9C       		.byte	0x9c
 15465 1805 19180000 		.4byte	0x1819
 15466 1809 0D       		.uleb128 0xd
 15467 180a A1160000 		.4byte	.LASF42
 15468 180e 01       		.byte	0x1
 15469 180f 5309     		.2byte	0x953
 15470 1811 34010000 		.4byte	0x134
 15471 1815 02       		.uleb128 0x2
 15472 1816 91       		.byte	0x91
 15473 1817 77       		.sleb128 -9
 15474 1818 00       		.byte	0
 15475 1819 0B       		.uleb128 0xb
 15476 181a 03030000 		.4byte	.LASF215
 15477 181e 01       		.byte	0x1
 15478 181f 6109     		.2byte	0x961
 15479 1821 34010000 		.4byte	0x134
 15480 1825 00000000 		.4byte	.LFB174
 15481 1829 2C000000 		.4byte	.LFE174-.LFB174
 15482 182d 01       		.uleb128 0x1
 15483 182e 9C       		.byte	0x9c
 15484 182f 0C       		.uleb128 0xc
 15485 1830 2D010000 		.4byte	.LASF216
 15486 1834 01       		.byte	0x1
 15487 1835 6B09     		.2byte	0x96b
 15488 1837 00000000 		.4byte	.LFB175
 15489 183b 28000000 		.4byte	.LFE175-.LFB175
 15490 183f 01       		.uleb128 0x1
 15491 1840 9C       		.byte	0x9c
 15492 1841 55180000 		.4byte	0x1855
 15493 1845 0D       		.uleb128 0xd
 15494 1846 A1160000 		.4byte	.LASF42
 15495 184a 01       		.byte	0x1
 15496 184b 6B09     		.2byte	0x96b
 15497 184d 34010000 		.4byte	0x134
 15498 1851 02       		.uleb128 0x2
 15499 1852 91       		.byte	0x91
 15500 1853 77       		.sleb128 -9
 15501 1854 00       		.byte	0
 15502 1855 0C       		.uleb128 0xc
 15503 1856 0A040000 		.4byte	.LASF217
 15504 185a 01       		.byte	0x1
 15505 185b 7209     		.2byte	0x972
 15506 185d 00000000 		.4byte	.LFB176
 15507 1861 28000000 		.4byte	.LFE176-.LFB176
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 331


 15508 1865 01       		.uleb128 0x1
 15509 1866 9C       		.byte	0x9c
 15510 1867 7B180000 		.4byte	0x187b
 15511 186b 0D       		.uleb128 0xd
 15512 186c A1160000 		.4byte	.LASF42
 15513 1870 01       		.byte	0x1
 15514 1871 7209     		.2byte	0x972
 15515 1873 34010000 		.4byte	0x134
 15516 1877 02       		.uleb128 0x2
 15517 1878 91       		.byte	0x91
 15518 1879 77       		.sleb128 -9
 15519 187a 00       		.byte	0
 15520 187b 13       		.uleb128 0x13
 15521 187c BE1E0000 		.4byte	.LASF218
 15522 1880 01       		.byte	0x1
 15523 1881 7B09     		.2byte	0x97b
 15524 1883 00000000 		.4byte	.LFB177
 15525 1887 1C000000 		.4byte	.LFE177-.LFB177
 15526 188b 01       		.uleb128 0x1
 15527 188c 9C       		.byte	0x9c
 15528 188d 13       		.uleb128 0x13
 15529 188e 97090000 		.4byte	.LASF219
 15530 1892 01       		.byte	0x1
 15531 1893 8409     		.2byte	0x984
 15532 1895 00000000 		.4byte	.LFB178
 15533 1899 1C000000 		.4byte	.LFE178-.LFB178
 15534 189d 01       		.uleb128 0x1
 15535 189e 9C       		.byte	0x9c
 15536 189f 13       		.uleb128 0x13
 15537 18a0 8A010000 		.4byte	.LASF220
 15538 18a4 01       		.byte	0x1
 15539 18a5 9309     		.2byte	0x993
 15540 18a7 00000000 		.4byte	.LFB179
 15541 18ab 1C000000 		.4byte	.LFE179-.LFB179
 15542 18af 01       		.uleb128 0x1
 15543 18b0 9C       		.byte	0x9c
 15544 18b1 13       		.uleb128 0x13
 15545 18b2 BA010000 		.4byte	.LASF221
 15546 18b6 01       		.byte	0x1
 15547 18b7 9E09     		.2byte	0x99e
 15548 18b9 00000000 		.4byte	.LFB180
 15549 18bd 1C000000 		.4byte	.LFE180-.LFB180
 15550 18c1 01       		.uleb128 0x1
 15551 18c2 9C       		.byte	0x9c
 15552 18c3 0B       		.uleb128 0xb
 15553 18c4 670C0000 		.4byte	.LASF222
 15554 18c8 01       		.byte	0x1
 15555 18c9 AD09     		.2byte	0x9ad
 15556 18cb 34010000 		.4byte	0x134
 15557 18cf 00000000 		.4byte	.LFB181
 15558 18d3 2C000000 		.4byte	.LFE181-.LFB181
 15559 18d7 01       		.uleb128 0x1
 15560 18d8 9C       		.byte	0x9c
 15561 18d9 0C       		.uleb128 0xc
 15562 18da F4190000 		.4byte	.LASF223
 15563 18de 01       		.byte	0x1
 15564 18df B709     		.2byte	0x9b7
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 332


 15565 18e1 00000000 		.4byte	.LFB182
 15566 18e5 28000000 		.4byte	.LFE182-.LFB182
 15567 18e9 01       		.uleb128 0x1
 15568 18ea 9C       		.byte	0x9c
 15569 18eb FF180000 		.4byte	0x18ff
 15570 18ef 0D       		.uleb128 0xd
 15571 18f0 A1160000 		.4byte	.LASF42
 15572 18f4 01       		.byte	0x1
 15573 18f5 B709     		.2byte	0x9b7
 15574 18f7 34010000 		.4byte	0x134
 15575 18fb 02       		.uleb128 0x2
 15576 18fc 91       		.byte	0x91
 15577 18fd 77       		.sleb128 -9
 15578 18fe 00       		.byte	0
 15579 18ff 0B       		.uleb128 0xb
 15580 1900 6E010000 		.4byte	.LASF224
 15581 1904 01       		.byte	0x1
 15582 1905 C209     		.2byte	0x9c2
 15583 1907 34010000 		.4byte	0x134
 15584 190b 00000000 		.4byte	.LFB183
 15585 190f 2C000000 		.4byte	.LFE183-.LFB183
 15586 1913 01       		.uleb128 0x1
 15587 1914 9C       		.byte	0x9c
 15588 1915 0C       		.uleb128 0xc
 15589 1916 AD190000 		.4byte	.LASF225
 15590 191a 01       		.byte	0x1
 15591 191b CC09     		.2byte	0x9cc
 15592 191d 00000000 		.4byte	.LFB184
 15593 1921 28000000 		.4byte	.LFE184-.LFB184
 15594 1925 01       		.uleb128 0x1
 15595 1926 9C       		.byte	0x9c
 15596 1927 3B190000 		.4byte	0x193b
 15597 192b 0D       		.uleb128 0xd
 15598 192c A1160000 		.4byte	.LASF42
 15599 1930 01       		.byte	0x1
 15600 1931 CC09     		.2byte	0x9cc
 15601 1933 34010000 		.4byte	0x134
 15602 1937 02       		.uleb128 0x2
 15603 1938 91       		.byte	0x91
 15604 1939 77       		.sleb128 -9
 15605 193a 00       		.byte	0
 15606 193b 0B       		.uleb128 0xb
 15607 193c E0000000 		.4byte	.LASF226
 15608 1940 01       		.byte	0x1
 15609 1941 DA09     		.2byte	0x9da
 15610 1943 34010000 		.4byte	0x134
 15611 1947 00000000 		.4byte	.LFB185
 15612 194b 2C000000 		.4byte	.LFE185-.LFB185
 15613 194f 01       		.uleb128 0x1
 15614 1950 9C       		.byte	0x9c
 15615 1951 0C       		.uleb128 0xc
 15616 1952 66170000 		.4byte	.LASF227
 15617 1956 01       		.byte	0x1
 15618 1957 E809     		.2byte	0x9e8
 15619 1959 00000000 		.4byte	.LFB186
 15620 195d 30000000 		.4byte	.LFE186-.LFB186
 15621 1961 01       		.uleb128 0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 333


 15622 1962 9C       		.byte	0x9c
 15623 1963 77190000 		.4byte	0x1977
 15624 1967 0D       		.uleb128 0xd
 15625 1968 A1160000 		.4byte	.LASF42
 15626 196c 01       		.byte	0x1
 15627 196d E809     		.2byte	0x9e8
 15628 196f 34010000 		.4byte	0x134
 15629 1973 02       		.uleb128 0x2
 15630 1974 91       		.byte	0x91
 15631 1975 77       		.sleb128 -9
 15632 1976 00       		.byte	0
 15633 1977 0B       		.uleb128 0xb
 15634 1978 A5030000 		.4byte	.LASF228
 15635 197c 01       		.byte	0x1
 15636 197d F209     		.2byte	0x9f2
 15637 197f AD000000 		.4byte	0xad
 15638 1983 00000000 		.4byte	.LFB187
 15639 1987 2C000000 		.4byte	.LFE187-.LFB187
 15640 198b 01       		.uleb128 0x1
 15641 198c 9C       		.byte	0x9c
 15642 198d 0C       		.uleb128 0xc
 15643 198e C91C0000 		.4byte	.LASF229
 15644 1992 01       		.byte	0x1
 15645 1993 140A     		.2byte	0xa14
 15646 1995 00000000 		.4byte	.LFB188
 15647 1999 2C000000 		.4byte	.LFE188-.LFB188
 15648 199d 01       		.uleb128 0x1
 15649 199e 9C       		.byte	0x9c
 15650 199f B3190000 		.4byte	0x19b3
 15651 19a3 0D       		.uleb128 0xd
 15652 19a4 2F100000 		.4byte	.LASF230
 15653 19a8 01       		.byte	0x1
 15654 19a9 140A     		.2byte	0xa14
 15655 19ab AD000000 		.4byte	0xad
 15656 19af 02       		.uleb128 0x2
 15657 19b0 91       		.byte	0x91
 15658 19b1 77       		.sleb128 -9
 15659 19b2 00       		.byte	0
 15660 19b3 0B       		.uleb128 0xb
 15661 19b4 3E1A0000 		.4byte	.LASF231
 15662 19b8 01       		.byte	0x1
 15663 19b9 310A     		.2byte	0xa31
 15664 19bb AD000000 		.4byte	0xad
 15665 19bf 00000000 		.4byte	.LFB189
 15666 19c3 2C000000 		.4byte	.LFE189-.LFB189
 15667 19c7 01       		.uleb128 0x1
 15668 19c8 9C       		.byte	0x9c
 15669 19c9 0C       		.uleb128 0xc
 15670 19ca C7000000 		.4byte	.LASF232
 15671 19ce 01       		.byte	0x1
 15672 19cf 390A     		.2byte	0xa39
 15673 19d1 00000000 		.4byte	.LFB190
 15674 19d5 2C000000 		.4byte	.LFE190-.LFB190
 15675 19d9 01       		.uleb128 0x1
 15676 19da 9C       		.byte	0x9c
 15677 19db EF190000 		.4byte	0x19ef
 15678 19df 0D       		.uleb128 0xd
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 334


 15679 19e0 C5030000 		.4byte	.LASF233
 15680 19e4 01       		.byte	0x1
 15681 19e5 390A     		.2byte	0xa39
 15682 19e7 AD000000 		.4byte	0xad
 15683 19eb 02       		.uleb128 0x2
 15684 19ec 91       		.byte	0x91
 15685 19ed 77       		.sleb128 -9
 15686 19ee 00       		.byte	0
 15687 19ef 0B       		.uleb128 0xb
 15688 19f0 60130000 		.4byte	.LASF234
 15689 19f4 01       		.byte	0x1
 15690 19f5 430A     		.2byte	0xa43
 15691 19f7 34010000 		.4byte	0x134
 15692 19fb 00000000 		.4byte	.LFB191
 15693 19ff 2C000000 		.4byte	.LFE191-.LFB191
 15694 1a03 01       		.uleb128 0x1
 15695 1a04 9C       		.byte	0x9c
 15696 1a05 0C       		.uleb128 0xc
 15697 1a06 A90D0000 		.4byte	.LASF235
 15698 1a0a 01       		.byte	0x1
 15699 1a0b 4D0A     		.2byte	0xa4d
 15700 1a0d 00000000 		.4byte	.LFB192
 15701 1a11 28000000 		.4byte	.LFE192-.LFB192
 15702 1a15 01       		.uleb128 0x1
 15703 1a16 9C       		.byte	0x9c
 15704 1a17 2B1A0000 		.4byte	0x1a2b
 15705 1a1b 0D       		.uleb128 0xd
 15706 1a1c A1160000 		.4byte	.LASF42
 15707 1a20 01       		.byte	0x1
 15708 1a21 4D0A     		.2byte	0xa4d
 15709 1a23 34010000 		.4byte	0x134
 15710 1a27 02       		.uleb128 0x2
 15711 1a28 91       		.byte	0x91
 15712 1a29 77       		.sleb128 -9
 15713 1a2a 00       		.byte	0
 15714 1a2b 0B       		.uleb128 0xb
 15715 1a2c 55090000 		.4byte	.LASF236
 15716 1a30 01       		.byte	0x1
 15717 1a31 560A     		.2byte	0xa56
 15718 1a33 34010000 		.4byte	0x134
 15719 1a37 00000000 		.4byte	.LFB193
 15720 1a3b 2C000000 		.4byte	.LFE193-.LFB193
 15721 1a3f 01       		.uleb128 0x1
 15722 1a40 9C       		.byte	0x9c
 15723 1a41 0C       		.uleb128 0xc
 15724 1a42 6A020000 		.4byte	.LASF237
 15725 1a46 01       		.byte	0x1
 15726 1a47 600A     		.2byte	0xa60
 15727 1a49 00000000 		.4byte	.LFB194
 15728 1a4d 28000000 		.4byte	.LFE194-.LFB194
 15729 1a51 01       		.uleb128 0x1
 15730 1a52 9C       		.byte	0x9c
 15731 1a53 671A0000 		.4byte	0x1a67
 15732 1a57 0D       		.uleb128 0xd
 15733 1a58 A1160000 		.4byte	.LASF42
 15734 1a5c 01       		.byte	0x1
 15735 1a5d 600A     		.2byte	0xa60
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 335


 15736 1a5f 34010000 		.4byte	0x134
 15737 1a63 02       		.uleb128 0x2
 15738 1a64 91       		.byte	0x91
 15739 1a65 77       		.sleb128 -9
 15740 1a66 00       		.byte	0
 15741 1a67 0B       		.uleb128 0xb
 15742 1a68 EB110000 		.4byte	.LASF238
 15743 1a6c 01       		.byte	0x1
 15744 1a6d 690A     		.2byte	0xa69
 15745 1a6f 34010000 		.4byte	0x134
 15746 1a73 00000000 		.4byte	.LFB195
 15747 1a77 2C000000 		.4byte	.LFE195-.LFB195
 15748 1a7b 01       		.uleb128 0x1
 15749 1a7c 9C       		.byte	0x9c
 15750 1a7d 0C       		.uleb128 0xc
 15751 1a7e F20C0000 		.4byte	.LASF239
 15752 1a82 01       		.byte	0x1
 15753 1a83 730A     		.2byte	0xa73
 15754 1a85 00000000 		.4byte	.LFB196
 15755 1a89 28000000 		.4byte	.LFE196-.LFB196
 15756 1a8d 01       		.uleb128 0x1
 15757 1a8e 9C       		.byte	0x9c
 15758 1a8f A31A0000 		.4byte	0x1aa3
 15759 1a93 0D       		.uleb128 0xd
 15760 1a94 A1160000 		.4byte	.LASF42
 15761 1a98 01       		.byte	0x1
 15762 1a99 730A     		.2byte	0xa73
 15763 1a9b 34010000 		.4byte	0x134
 15764 1a9f 02       		.uleb128 0x2
 15765 1aa0 91       		.byte	0x91
 15766 1aa1 77       		.sleb128 -9
 15767 1aa2 00       		.byte	0
 15768 1aa3 0B       		.uleb128 0xb
 15769 1aa4 A0110000 		.4byte	.LASF240
 15770 1aa8 01       		.byte	0x1
 15771 1aa9 7C0A     		.2byte	0xa7c
 15772 1aab 34010000 		.4byte	0x134
 15773 1aaf 00000000 		.4byte	.LFB197
 15774 1ab3 2C000000 		.4byte	.LFE197-.LFB197
 15775 1ab7 01       		.uleb128 0x1
 15776 1ab8 9C       		.byte	0x9c
 15777 1ab9 0C       		.uleb128 0xc
 15778 1aba D1040000 		.4byte	.LASF241
 15779 1abe 01       		.byte	0x1
 15780 1abf 860A     		.2byte	0xa86
 15781 1ac1 00000000 		.4byte	.LFB198
 15782 1ac5 28000000 		.4byte	.LFE198-.LFB198
 15783 1ac9 01       		.uleb128 0x1
 15784 1aca 9C       		.byte	0x9c
 15785 1acb DF1A0000 		.4byte	0x1adf
 15786 1acf 0D       		.uleb128 0xd
 15787 1ad0 A1160000 		.4byte	.LASF42
 15788 1ad4 01       		.byte	0x1
 15789 1ad5 860A     		.2byte	0xa86
 15790 1ad7 34010000 		.4byte	0x134
 15791 1adb 02       		.uleb128 0x2
 15792 1adc 91       		.byte	0x91
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 336


 15793 1add 77       		.sleb128 -9
 15794 1ade 00       		.byte	0
 15795 1adf 0B       		.uleb128 0xb
 15796 1ae0 6C0F0000 		.4byte	.LASF242
 15797 1ae4 01       		.byte	0x1
 15798 1ae5 8F0A     		.2byte	0xa8f
 15799 1ae7 34010000 		.4byte	0x134
 15800 1aeb 00000000 		.4byte	.LFB199
 15801 1aef 2C000000 		.4byte	.LFE199-.LFB199
 15802 1af3 01       		.uleb128 0x1
 15803 1af4 9C       		.byte	0x9c
 15804 1af5 0C       		.uleb128 0xc
 15805 1af6 1D080000 		.4byte	.LASF243
 15806 1afa 01       		.byte	0x1
 15807 1afb 990A     		.2byte	0xa99
 15808 1afd 00000000 		.4byte	.LFB200
 15809 1b01 28000000 		.4byte	.LFE200-.LFB200
 15810 1b05 01       		.uleb128 0x1
 15811 1b06 9C       		.byte	0x9c
 15812 1b07 1B1B0000 		.4byte	0x1b1b
 15813 1b0b 0D       		.uleb128 0xd
 15814 1b0c A1160000 		.4byte	.LASF42
 15815 1b10 01       		.byte	0x1
 15816 1b11 990A     		.2byte	0xa99
 15817 1b13 34010000 		.4byte	0x134
 15818 1b17 02       		.uleb128 0x2
 15819 1b18 91       		.byte	0x91
 15820 1b19 77       		.sleb128 -9
 15821 1b1a 00       		.byte	0
 15822 1b1b 0B       		.uleb128 0xb
 15823 1b1c 3D0C0000 		.4byte	.LASF244
 15824 1b20 01       		.byte	0x1
 15825 1b21 A20A     		.2byte	0xaa2
 15826 1b23 34010000 		.4byte	0x134
 15827 1b27 00000000 		.4byte	.LFB201
 15828 1b2b 2C000000 		.4byte	.LFE201-.LFB201
 15829 1b2f 01       		.uleb128 0x1
 15830 1b30 9C       		.byte	0x9c
 15831 1b31 0C       		.uleb128 0xc
 15832 1b32 2E070000 		.4byte	.LASF245
 15833 1b36 01       		.byte	0x1
 15834 1b37 AC0A     		.2byte	0xaac
 15835 1b39 00000000 		.4byte	.LFB202
 15836 1b3d 28000000 		.4byte	.LFE202-.LFB202
 15837 1b41 01       		.uleb128 0x1
 15838 1b42 9C       		.byte	0x9c
 15839 1b43 571B0000 		.4byte	0x1b57
 15840 1b47 0D       		.uleb128 0xd
 15841 1b48 A1160000 		.4byte	.LASF42
 15842 1b4c 01       		.byte	0x1
 15843 1b4d AC0A     		.2byte	0xaac
 15844 1b4f 34010000 		.4byte	0x134
 15845 1b53 02       		.uleb128 0x2
 15846 1b54 91       		.byte	0x91
 15847 1b55 77       		.sleb128 -9
 15848 1b56 00       		.byte	0
 15849 1b57 0B       		.uleb128 0xb
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 337


 15850 1b58 6C140000 		.4byte	.LASF246
 15851 1b5c 01       		.byte	0x1
 15852 1b5d B90A     		.2byte	0xab9
 15853 1b5f C3000000 		.4byte	0xc3
 15854 1b63 00000000 		.4byte	.LFB203
 15855 1b67 34000000 		.4byte	.LFE203-.LFB203
 15856 1b6b 01       		.uleb128 0x1
 15857 1b6c 9C       		.byte	0x9c
 15858 1b6d 0B       		.uleb128 0xb
 15859 1b6e CE160000 		.4byte	.LASF247
 15860 1b72 01       		.byte	0x1
 15861 1b73 D90A     		.2byte	0xad9
 15862 1b75 AD000000 		.4byte	0xad
 15863 1b79 00000000 		.4byte	.LFB204
 15864 1b7d 24000000 		.4byte	.LFE204-.LFB204
 15865 1b81 01       		.uleb128 0x1
 15866 1b82 9C       		.byte	0x9c
 15867 1b83 0C       		.uleb128 0xc
 15868 1b84 D8150000 		.4byte	.LASF248
 15869 1b88 01       		.byte	0x1
 15870 1b89 DD0A     		.2byte	0xadd
 15871 1b8b 00000000 		.4byte	.LFB205
 15872 1b8f 2C000000 		.4byte	.LFE205-.LFB205
 15873 1b93 01       		.uleb128 0x1
 15874 1b94 9C       		.byte	0x9c
 15875 1b95 B81B0000 		.4byte	0x1bb8
 15876 1b99 0D       		.uleb128 0xd
 15877 1b9a 620C0000 		.4byte	.LASF113
 15878 1b9e 01       		.byte	0x1
 15879 1b9f DD0A     		.2byte	0xadd
 15880 1ba1 B81B0000 		.4byte	0x1bb8
 15881 1ba5 02       		.uleb128 0x2
 15882 1ba6 91       		.byte	0x91
 15883 1ba7 74       		.sleb128 -12
 15884 1ba8 0D       		.uleb128 0xd
 15885 1ba9 E2160000 		.4byte	.LASF107
 15886 1bad 01       		.byte	0x1
 15887 1bae DD0A     		.2byte	0xadd
 15888 1bb0 AD000000 		.4byte	0xad
 15889 1bb4 02       		.uleb128 0x2
 15890 1bb5 91       		.byte	0x91
 15891 1bb6 73       		.sleb128 -13
 15892 1bb7 00       		.byte	0
 15893 1bb8 10       		.uleb128 0x10
 15894 1bb9 04       		.byte	0x4
 15895 1bba AD000000 		.4byte	0xad
 15896 1bbe 0C       		.uleb128 0xc
 15897 1bbf E0190000 		.4byte	.LASF249
 15898 1bc3 01       		.byte	0x1
 15899 1bc4 E40A     		.2byte	0xae4
 15900 1bc6 00000000 		.4byte	.LFB206
 15901 1bca 28000000 		.4byte	.LFE206-.LFB206
 15902 1bce 01       		.uleb128 0x1
 15903 1bcf 9C       		.byte	0x9c
 15904 1bd0 E41B0000 		.4byte	0x1be4
 15905 1bd4 0D       		.uleb128 0xd
 15906 1bd5 620C0000 		.4byte	.LASF113
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 338


 15907 1bd9 01       		.byte	0x1
 15908 1bda E40A     		.2byte	0xae4
 15909 1bdc AD000000 		.4byte	0xad
 15910 1be0 02       		.uleb128 0x2
 15911 1be1 91       		.byte	0x91
 15912 1be2 77       		.sleb128 -9
 15913 1be3 00       		.byte	0
 15914 1be4 0B       		.uleb128 0xb
 15915 1be5 E90D0000 		.4byte	.LASF250
 15916 1be9 01       		.byte	0x1
 15917 1bea F10A     		.2byte	0xaf1
 15918 1bec AD000000 		.4byte	0xad
 15919 1bf0 00000000 		.4byte	.LFB207
 15920 1bf4 2C000000 		.4byte	.LFE207-.LFB207
 15921 1bf8 01       		.uleb128 0x1
 15922 1bf9 9C       		.byte	0x9c
 15923 1bfa 0C       		.uleb128 0xc
 15924 1bfb 3F060000 		.4byte	.LASF251
 15925 1bff 01       		.byte	0x1
 15926 1c00 FE0A     		.2byte	0xafe
 15927 1c02 00000000 		.4byte	.LFB208
 15928 1c06 2C000000 		.4byte	.LFE208-.LFB208
 15929 1c0a 01       		.uleb128 0x1
 15930 1c0b 9C       		.byte	0x9c
 15931 1c0c 1F1C0000 		.4byte	0x1c1f
 15932 1c10 0F       		.uleb128 0xf
 15933 1c11 696400   		.ascii	"id\000"
 15934 1c14 01       		.byte	0x1
 15935 1c15 FE0A     		.2byte	0xafe
 15936 1c17 AD000000 		.4byte	0xad
 15937 1c1b 02       		.uleb128 0x2
 15938 1c1c 91       		.byte	0x91
 15939 1c1d 77       		.sleb128 -9
 15940 1c1e 00       		.byte	0
 15941 1c1f 0B       		.uleb128 0xb
 15942 1c20 660B0000 		.4byte	.LASF252
 15943 1c24 01       		.byte	0x1
 15944 1c25 060B     		.2byte	0xb06
 15945 1c27 AD000000 		.4byte	0xad
 15946 1c2b 00000000 		.4byte	.LFB209
 15947 1c2f 24000000 		.4byte	.LFE209-.LFB209
 15948 1c33 01       		.uleb128 0x1
 15949 1c34 9C       		.byte	0x9c
 15950 1c35 0C       		.uleb128 0xc
 15951 1c36 C4180000 		.4byte	.LASF253
 15952 1c3a 01       		.byte	0x1
 15953 1c3b 0A0B     		.2byte	0xb0a
 15954 1c3d 00000000 		.4byte	.LFB210
 15955 1c41 28000000 		.4byte	.LFE210-.LFB210
 15956 1c45 01       		.uleb128 0x1
 15957 1c46 9C       		.byte	0x9c
 15958 1c47 5B1C0000 		.4byte	0x1c5b
 15959 1c4b 0D       		.uleb128 0xd
 15960 1c4c A1160000 		.4byte	.LASF42
 15961 1c50 01       		.byte	0x1
 15962 1c51 0A0B     		.2byte	0xb0a
 15963 1c53 34010000 		.4byte	0x134
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 339


 15964 1c57 02       		.uleb128 0x2
 15965 1c58 91       		.byte	0x91
 15966 1c59 77       		.sleb128 -9
 15967 1c5a 00       		.byte	0
 15968 1c5b 0B       		.uleb128 0xb
 15969 1c5c 4F180000 		.4byte	.LASF254
 15970 1c60 01       		.byte	0x1
 15971 1c61 0D0B     		.2byte	0xb0d
 15972 1c63 A2000000 		.4byte	0xa2
 15973 1c67 00000000 		.4byte	.LFB211
 15974 1c6b 2C000000 		.4byte	.LFE211-.LFB211
 15975 1c6f 01       		.uleb128 0x1
 15976 1c70 9C       		.byte	0x9c
 15977 1c71 0C       		.uleb128 0xc
 15978 1c72 C9190000 		.4byte	.LASF255
 15979 1c76 01       		.byte	0x1
 15980 1c77 110B     		.2byte	0xb11
 15981 1c79 00000000 		.4byte	.LFB212
 15982 1c7d 2C000000 		.4byte	.LFE212-.LFB212
 15983 1c81 01       		.uleb128 0x1
 15984 1c82 9C       		.byte	0x9c
 15985 1c83 971C0000 		.4byte	0x1c97
 15986 1c87 0D       		.uleb128 0xd
 15987 1c88 90090000 		.4byte	.LASF256
 15988 1c8c 01       		.byte	0x1
 15989 1c8d 110B     		.2byte	0xb11
 15990 1c8f A2000000 		.4byte	0xa2
 15991 1c93 02       		.uleb128 0x2
 15992 1c94 91       		.byte	0x91
 15993 1c95 77       		.sleb128 -9
 15994 1c96 00       		.byte	0
 15995 1c97 0B       		.uleb128 0xb
 15996 1c98 4D010000 		.4byte	.LASF257
 15997 1c9c 01       		.byte	0x1
 15998 1c9d 170B     		.2byte	0xb17
 15999 1c9f A2000000 		.4byte	0xa2
 16000 1ca3 00000000 		.4byte	.LFB213
 16001 1ca7 2C000000 		.4byte	.LFE213-.LFB213
 16002 1cab 01       		.uleb128 0x1
 16003 1cac 9C       		.byte	0x9c
 16004 1cad 0C       		.uleb128 0xc
 16005 1cae DB0C0000 		.4byte	.LASF258
 16006 1cb2 01       		.byte	0x1
 16007 1cb3 1B0B     		.2byte	0xb1b
 16008 1cb5 00000000 		.4byte	.LFB214
 16009 1cb9 2C000000 		.4byte	.LFE214-.LFB214
 16010 1cbd 01       		.uleb128 0x1
 16011 1cbe 9C       		.byte	0x9c
 16012 1cbf D31C0000 		.4byte	0x1cd3
 16013 1cc3 0D       		.uleb128 0xd
 16014 1cc4 90090000 		.4byte	.LASF256
 16015 1cc8 01       		.byte	0x1
 16016 1cc9 1B0B     		.2byte	0xb1b
 16017 1ccb A2000000 		.4byte	0xa2
 16018 1ccf 02       		.uleb128 0x2
 16019 1cd0 91       		.byte	0x91
 16020 1cd1 77       		.sleb128 -9
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 340


 16021 1cd2 00       		.byte	0
 16022 1cd3 0B       		.uleb128 0xb
 16023 1cd4 D7060000 		.4byte	.LASF259
 16024 1cd8 01       		.byte	0x1
 16025 1cd9 210B     		.2byte	0xb21
 16026 1cdb A2000000 		.4byte	0xa2
 16027 1cdf 00000000 		.4byte	.LFB215
 16028 1ce3 2C000000 		.4byte	.LFE215-.LFB215
 16029 1ce7 01       		.uleb128 0x1
 16030 1ce8 9C       		.byte	0x9c
 16031 1ce9 0C       		.uleb128 0xc
 16032 1cea A81D0000 		.4byte	.LASF260
 16033 1cee 01       		.byte	0x1
 16034 1cef 250B     		.2byte	0xb25
 16035 1cf1 00000000 		.4byte	.LFB216
 16036 1cf5 2C000000 		.4byte	.LFE216-.LFB216
 16037 1cf9 01       		.uleb128 0x1
 16038 1cfa 9C       		.byte	0x9c
 16039 1cfb 0F1D0000 		.4byte	0x1d0f
 16040 1cff 0D       		.uleb128 0xd
 16041 1d00 90090000 		.4byte	.LASF256
 16042 1d04 01       		.byte	0x1
 16043 1d05 250B     		.2byte	0xb25
 16044 1d07 A2000000 		.4byte	0xa2
 16045 1d0b 02       		.uleb128 0x2
 16046 1d0c 91       		.byte	0x91
 16047 1d0d 77       		.sleb128 -9
 16048 1d0e 00       		.byte	0
 16049 1d0f 0B       		.uleb128 0xb
 16050 1d10 D81D0000 		.4byte	.LASF261
 16051 1d14 01       		.byte	0x1
 16052 1d15 2B0B     		.2byte	0xb2b
 16053 1d17 A2000000 		.4byte	0xa2
 16054 1d1b 00000000 		.4byte	.LFB217
 16055 1d1f 28000000 		.4byte	.LFE217-.LFB217
 16056 1d23 01       		.uleb128 0x1
 16057 1d24 9C       		.byte	0x9c
 16058 1d25 0C       		.uleb128 0xc
 16059 1d26 29120000 		.4byte	.LASF262
 16060 1d2a 01       		.byte	0x1
 16061 1d2b 2F0B     		.2byte	0xb2f
 16062 1d2d 00000000 		.4byte	.LFB218
 16063 1d31 28000000 		.4byte	.LFE218-.LFB218
 16064 1d35 01       		.uleb128 0x1
 16065 1d36 9C       		.byte	0x9c
 16066 1d37 4B1D0000 		.4byte	0x1d4b
 16067 1d3b 0D       		.uleb128 0xd
 16068 1d3c C7130000 		.4byte	.LASF263
 16069 1d40 01       		.byte	0x1
 16070 1d41 2F0B     		.2byte	0xb2f
 16071 1d43 A2000000 		.4byte	0xa2
 16072 1d47 02       		.uleb128 0x2
 16073 1d48 91       		.byte	0x91
 16074 1d49 77       		.sleb128 -9
 16075 1d4a 00       		.byte	0
 16076 1d4b 0B       		.uleb128 0xb
 16077 1d4c D6110000 		.4byte	.LASF264
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 341


 16078 1d50 01       		.byte	0x1
 16079 1d51 350B     		.2byte	0xb35
 16080 1d53 A2000000 		.4byte	0xa2
 16081 1d57 00000000 		.4byte	.LFB219
 16082 1d5b 28000000 		.4byte	.LFE219-.LFB219
 16083 1d5f 01       		.uleb128 0x1
 16084 1d60 9C       		.byte	0x9c
 16085 1d61 0C       		.uleb128 0xc
 16086 1d62 26150000 		.4byte	.LASF265
 16087 1d66 01       		.byte	0x1
 16088 1d67 390B     		.2byte	0xb39
 16089 1d69 00000000 		.4byte	.LFB220
 16090 1d6d 28000000 		.4byte	.LFE220-.LFB220
 16091 1d71 01       		.uleb128 0x1
 16092 1d72 9C       		.byte	0x9c
 16093 1d73 871D0000 		.4byte	0x1d87
 16094 1d77 0D       		.uleb128 0xd
 16095 1d78 C7130000 		.4byte	.LASF263
 16096 1d7c 01       		.byte	0x1
 16097 1d7d 390B     		.2byte	0xb39
 16098 1d7f A2000000 		.4byte	0xa2
 16099 1d83 02       		.uleb128 0x2
 16100 1d84 91       		.byte	0x91
 16101 1d85 77       		.sleb128 -9
 16102 1d86 00       		.byte	0
 16103 1d87 0B       		.uleb128 0xb
 16104 1d88 EC070000 		.4byte	.LASF266
 16105 1d8c 01       		.byte	0x1
 16106 1d8d 3F0B     		.2byte	0xb3f
 16107 1d8f A2000000 		.4byte	0xa2
 16108 1d93 00000000 		.4byte	.LFB221
 16109 1d97 28000000 		.4byte	.LFE221-.LFB221
 16110 1d9b 01       		.uleb128 0x1
 16111 1d9c 9C       		.byte	0x9c
 16112 1d9d 0C       		.uleb128 0xc
 16113 1d9e 09180000 		.4byte	.LASF267
 16114 1da2 01       		.byte	0x1
 16115 1da3 430B     		.2byte	0xb43
 16116 1da5 00000000 		.4byte	.LFB222
 16117 1da9 28000000 		.4byte	.LFE222-.LFB222
 16118 1dad 01       		.uleb128 0x1
 16119 1dae 9C       		.byte	0x9c
 16120 1daf C31D0000 		.4byte	0x1dc3
 16121 1db3 0D       		.uleb128 0xd
 16122 1db4 C7130000 		.4byte	.LASF263
 16123 1db8 01       		.byte	0x1
 16124 1db9 430B     		.2byte	0xb43
 16125 1dbb A2000000 		.4byte	0xa2
 16126 1dbf 02       		.uleb128 0x2
 16127 1dc0 91       		.byte	0x91
 16128 1dc1 77       		.sleb128 -9
 16129 1dc2 00       		.byte	0
 16130 1dc3 0B       		.uleb128 0xb
 16131 1dc4 9D170000 		.4byte	.LASF268
 16132 1dc8 01       		.byte	0x1
 16133 1dc9 490B     		.2byte	0xb49
 16134 1dcb B8000000 		.4byte	0xb8
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 342


 16135 1dcf 00000000 		.4byte	.LFB223
 16136 1dd3 34000000 		.4byte	.LFE223-.LFB223
 16137 1dd7 01       		.uleb128 0x1
 16138 1dd8 9C       		.byte	0x9c
 16139 1dd9 0C       		.uleb128 0xc
 16140 1dda 37180000 		.4byte	.LASF269
 16141 1dde 01       		.byte	0x1
 16142 1ddf 4D0B     		.2byte	0xb4d
 16143 1de1 00000000 		.4byte	.LFB224
 16144 1de5 28000000 		.4byte	.LFE224-.LFB224
 16145 1de9 01       		.uleb128 0x1
 16146 1dea 9C       		.byte	0x9c
 16147 1deb FF1D0000 		.4byte	0x1dff
 16148 1def 0D       		.uleb128 0xd
 16149 1df0 90090000 		.4byte	.LASF256
 16150 1df4 01       		.byte	0x1
 16151 1df5 4D0B     		.2byte	0xb4d
 16152 1df7 B8000000 		.4byte	0xb8
 16153 1dfb 02       		.uleb128 0x2
 16154 1dfc 91       		.byte	0x91
 16155 1dfd 76       		.sleb128 -10
 16156 1dfe 00       		.byte	0
 16157 1dff 0B       		.uleb128 0xb
 16158 1e00 15010000 		.4byte	.LASF270
 16159 1e04 01       		.byte	0x1
 16160 1e05 530B     		.2byte	0xb53
 16161 1e07 B8000000 		.4byte	0xb8
 16162 1e0b 00000000 		.4byte	.LFB225
 16163 1e0f 34000000 		.4byte	.LFE225-.LFB225
 16164 1e13 01       		.uleb128 0x1
 16165 1e14 9C       		.byte	0x9c
 16166 1e15 0C       		.uleb128 0xc
 16167 1e16 96130000 		.4byte	.LASF271
 16168 1e1a 01       		.byte	0x1
 16169 1e1b 570B     		.2byte	0xb57
 16170 1e1d 00000000 		.4byte	.LFB226
 16171 1e21 28000000 		.4byte	.LFE226-.LFB226
 16172 1e25 01       		.uleb128 0x1
 16173 1e26 9C       		.byte	0x9c
 16174 1e27 3B1E0000 		.4byte	0x1e3b
 16175 1e2b 0D       		.uleb128 0xd
 16176 1e2c 90090000 		.4byte	.LASF256
 16177 1e30 01       		.byte	0x1
 16178 1e31 570B     		.2byte	0xb57
 16179 1e33 B8000000 		.4byte	0xb8
 16180 1e37 02       		.uleb128 0x2
 16181 1e38 91       		.byte	0x91
 16182 1e39 76       		.sleb128 -10
 16183 1e3a 00       		.byte	0
 16184 1e3b 0B       		.uleb128 0xb
 16185 1e3c 77100000 		.4byte	.LASF272
 16186 1e40 01       		.byte	0x1
 16187 1e41 5D0B     		.2byte	0xb5d
 16188 1e43 B8000000 		.4byte	0xb8
 16189 1e47 00000000 		.4byte	.LFB227
 16190 1e4b 34000000 		.4byte	.LFE227-.LFB227
 16191 1e4f 01       		.uleb128 0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 343


 16192 1e50 9C       		.byte	0x9c
 16193 1e51 0C       		.uleb128 0xc
 16194 1e52 F0100000 		.4byte	.LASF273
 16195 1e56 01       		.byte	0x1
 16196 1e57 610B     		.2byte	0xb61
 16197 1e59 00000000 		.4byte	.LFB228
 16198 1e5d 28000000 		.4byte	.LFE228-.LFB228
 16199 1e61 01       		.uleb128 0x1
 16200 1e62 9C       		.byte	0x9c
 16201 1e63 771E0000 		.4byte	0x1e77
 16202 1e67 0D       		.uleb128 0xd
 16203 1e68 90090000 		.4byte	.LASF256
 16204 1e6c 01       		.byte	0x1
 16205 1e6d 610B     		.2byte	0xb61
 16206 1e6f B8000000 		.4byte	0xb8
 16207 1e73 02       		.uleb128 0x2
 16208 1e74 91       		.byte	0x91
 16209 1e75 76       		.sleb128 -10
 16210 1e76 00       		.byte	0
 16211 1e77 0B       		.uleb128 0xb
 16212 1e78 D7050000 		.4byte	.LASF274
 16213 1e7c 01       		.byte	0x1
 16214 1e7d 670B     		.2byte	0xb67
 16215 1e7f B8000000 		.4byte	0xb8
 16216 1e83 00000000 		.4byte	.LFB229
 16217 1e87 34000000 		.4byte	.LFE229-.LFB229
 16218 1e8b 01       		.uleb128 0x1
 16219 1e8c 9C       		.byte	0x9c
 16220 1e8d 0C       		.uleb128 0xc
 16221 1e8e 6B110000 		.4byte	.LASF275
 16222 1e92 01       		.byte	0x1
 16223 1e93 6B0B     		.2byte	0xb6b
 16224 1e95 00000000 		.4byte	.LFB230
 16225 1e99 28000000 		.4byte	.LFE230-.LFB230
 16226 1e9d 01       		.uleb128 0x1
 16227 1e9e 9C       		.byte	0x9c
 16228 1e9f B31E0000 		.4byte	0x1eb3
 16229 1ea3 0D       		.uleb128 0xd
 16230 1ea4 90090000 		.4byte	.LASF256
 16231 1ea8 01       		.byte	0x1
 16232 1ea9 6B0B     		.2byte	0xb6b
 16233 1eab B8000000 		.4byte	0xb8
 16234 1eaf 02       		.uleb128 0x2
 16235 1eb0 91       		.byte	0x91
 16236 1eb1 76       		.sleb128 -10
 16237 1eb2 00       		.byte	0
 16238 1eb3 0B       		.uleb128 0xb
 16239 1eb4 6C070000 		.4byte	.LASF276
 16240 1eb8 01       		.byte	0x1
 16241 1eb9 710B     		.2byte	0xb71
 16242 1ebb B8000000 		.4byte	0xb8
 16243 1ebf 00000000 		.4byte	.LFB231
 16244 1ec3 34000000 		.4byte	.LFE231-.LFB231
 16245 1ec7 01       		.uleb128 0x1
 16246 1ec8 9C       		.byte	0x9c
 16247 1ec9 0C       		.uleb128 0xc
 16248 1eca 54150000 		.4byte	.LASF277
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 344


 16249 1ece 01       		.byte	0x1
 16250 1ecf 750B     		.2byte	0xb75
 16251 1ed1 00000000 		.4byte	.LFB232
 16252 1ed5 28000000 		.4byte	.LFE232-.LFB232
 16253 1ed9 01       		.uleb128 0x1
 16254 1eda 9C       		.byte	0x9c
 16255 1edb EF1E0000 		.4byte	0x1eef
 16256 1edf 0D       		.uleb128 0xd
 16257 1ee0 90090000 		.4byte	.LASF256
 16258 1ee4 01       		.byte	0x1
 16259 1ee5 750B     		.2byte	0xb75
 16260 1ee7 B8000000 		.4byte	0xb8
 16261 1eeb 02       		.uleb128 0x2
 16262 1eec 91       		.byte	0x91
 16263 1eed 76       		.sleb128 -10
 16264 1eee 00       		.byte	0
 16265 1eef 0B       		.uleb128 0xb
 16266 1ef0 950F0000 		.4byte	.LASF278
 16267 1ef4 01       		.byte	0x1
 16268 1ef5 7B0B     		.2byte	0xb7b
 16269 1ef7 B8000000 		.4byte	0xb8
 16270 1efb 00000000 		.4byte	.LFB233
 16271 1eff 34000000 		.4byte	.LFE233-.LFB233
 16272 1f03 01       		.uleb128 0x1
 16273 1f04 9C       		.byte	0x9c
 16274 1f05 0C       		.uleb128 0xc
 16275 1f06 E6010000 		.4byte	.LASF279
 16276 1f0a 01       		.byte	0x1
 16277 1f0b 7F0B     		.2byte	0xb7f
 16278 1f0d 00000000 		.4byte	.LFB234
 16279 1f11 28000000 		.4byte	.LFE234-.LFB234
 16280 1f15 01       		.uleb128 0x1
 16281 1f16 9C       		.byte	0x9c
 16282 1f17 2B1F0000 		.4byte	0x1f2b
 16283 1f1b 0D       		.uleb128 0xd
 16284 1f1c 90090000 		.4byte	.LASF256
 16285 1f20 01       		.byte	0x1
 16286 1f21 7F0B     		.2byte	0xb7f
 16287 1f23 B8000000 		.4byte	0xb8
 16288 1f27 02       		.uleb128 0x2
 16289 1f28 91       		.byte	0x91
 16290 1f29 76       		.sleb128 -10
 16291 1f2a 00       		.byte	0
 16292 1f2b 0B       		.uleb128 0xb
 16293 1f2c 01020000 		.4byte	.LASF280
 16294 1f30 01       		.byte	0x1
 16295 1f31 850B     		.2byte	0xb85
 16296 1f33 34010000 		.4byte	0x134
 16297 1f37 00000000 		.4byte	.LFB235
 16298 1f3b 2C000000 		.4byte	.LFE235-.LFB235
 16299 1f3f 01       		.uleb128 0x1
 16300 1f40 9C       		.byte	0x9c
 16301 1f41 0C       		.uleb128 0xc
 16302 1f42 3D170000 		.4byte	.LASF281
 16303 1f46 01       		.byte	0x1
 16304 1f47 890B     		.2byte	0xb89
 16305 1f49 00000000 		.4byte	.LFB236
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 345


 16306 1f4d 28000000 		.4byte	.LFE236-.LFB236
 16307 1f51 01       		.uleb128 0x1
 16308 1f52 9C       		.byte	0x9c
 16309 1f53 671F0000 		.4byte	0x1f67
 16310 1f57 0D       		.uleb128 0xd
 16311 1f58 A1160000 		.4byte	.LASF42
 16312 1f5c 01       		.byte	0x1
 16313 1f5d 890B     		.2byte	0xb89
 16314 1f5f 34010000 		.4byte	0x134
 16315 1f63 02       		.uleb128 0x2
 16316 1f64 91       		.byte	0x91
 16317 1f65 77       		.sleb128 -9
 16318 1f66 00       		.byte	0
 16319 1f67 0B       		.uleb128 0xb
 16320 1f68 3B150000 		.4byte	.LASF282
 16321 1f6c 01       		.byte	0x1
 16322 1f6d 8C0B     		.2byte	0xb8c
 16323 1f6f 34010000 		.4byte	0x134
 16324 1f73 00000000 		.4byte	.LFB237
 16325 1f77 2C000000 		.4byte	.LFE237-.LFB237
 16326 1f7b 01       		.uleb128 0x1
 16327 1f7c 9C       		.byte	0x9c
 16328 1f7d 0C       		.uleb128 0xc
 16329 1f7e FF0A0000 		.4byte	.LASF283
 16330 1f82 01       		.byte	0x1
 16331 1f83 900B     		.2byte	0xb90
 16332 1f85 00000000 		.4byte	.LFB238
 16333 1f89 28000000 		.4byte	.LFE238-.LFB238
 16334 1f8d 01       		.uleb128 0x1
 16335 1f8e 9C       		.byte	0x9c
 16336 1f8f A31F0000 		.4byte	0x1fa3
 16337 1f93 0D       		.uleb128 0xd
 16338 1f94 A1160000 		.4byte	.LASF42
 16339 1f98 01       		.byte	0x1
 16340 1f99 900B     		.2byte	0xb90
 16341 1f9b 34010000 		.4byte	0x134
 16342 1f9f 02       		.uleb128 0x2
 16343 1fa0 91       		.byte	0x91
 16344 1fa1 77       		.sleb128 -9
 16345 1fa2 00       		.byte	0
 16346 1fa3 0B       		.uleb128 0xb
 16347 1fa4 920C0000 		.4byte	.LASF284
 16348 1fa8 01       		.byte	0x1
 16349 1fa9 960B     		.2byte	0xb96
 16350 1fab 34010000 		.4byte	0x134
 16351 1faf 00000000 		.4byte	.LFB239
 16352 1fb3 2C000000 		.4byte	.LFE239-.LFB239
 16353 1fb7 01       		.uleb128 0x1
 16354 1fb8 9C       		.byte	0x9c
 16355 1fb9 0B       		.uleb128 0xb
 16356 1fba 911A0000 		.4byte	.LASF285
 16357 1fbe 01       		.byte	0x1
 16358 1fbf 9A0B     		.2byte	0xb9a
 16359 1fc1 34010000 		.4byte	0x134
 16360 1fc5 00000000 		.4byte	.LFB240
 16361 1fc9 2C000000 		.4byte	.LFE240-.LFB240
 16362 1fcd 01       		.uleb128 0x1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 346


 16363 1fce 9C       		.byte	0x9c
 16364 1fcf 0B       		.uleb128 0xb
 16365 1fd0 B0100000 		.4byte	.LASF286
 16366 1fd4 01       		.byte	0x1
 16367 1fd5 9E0B     		.2byte	0xb9e
 16368 1fd7 34010000 		.4byte	0x134
 16369 1fdb 00000000 		.4byte	.LFB241
 16370 1fdf 2C000000 		.4byte	.LFE241-.LFB241
 16371 1fe3 01       		.uleb128 0x1
 16372 1fe4 9C       		.byte	0x9c
 16373 1fe5 0B       		.uleb128 0xb
 16374 1fe6 45190000 		.4byte	.LASF287
 16375 1fea 01       		.byte	0x1
 16376 1feb A20B     		.2byte	0xba2
 16377 1fed 34010000 		.4byte	0x134
 16378 1ff1 00000000 		.4byte	.LFB242
 16379 1ff5 2C000000 		.4byte	.LFE242-.LFB242
 16380 1ff9 01       		.uleb128 0x1
 16381 1ffa 9C       		.byte	0x9c
 16382 1ffb 0B       		.uleb128 0xb
 16383 1ffc 2A1D0000 		.4byte	.LASF288
 16384 2000 01       		.byte	0x1
 16385 2001 A60B     		.2byte	0xba6
 16386 2003 34010000 		.4byte	0x134
 16387 2007 00000000 		.4byte	.LFB243
 16388 200b 2C000000 		.4byte	.LFE243-.LFB243
 16389 200f 01       		.uleb128 0x1
 16390 2010 9C       		.byte	0x9c
 16391 2011 0B       		.uleb128 0xb
 16392 2012 8F100000 		.4byte	.LASF289
 16393 2016 01       		.byte	0x1
 16394 2017 AA0B     		.2byte	0xbaa
 16395 2019 34010000 		.4byte	0x134
 16396 201d 00000000 		.4byte	.LFB244
 16397 2021 2C000000 		.4byte	.LFE244-.LFB244
 16398 2025 01       		.uleb128 0x1
 16399 2026 9C       		.byte	0x9c
 16400 2027 0B       		.uleb128 0xb
 16401 2028 8B1D0000 		.4byte	.LASF290
 16402 202c 01       		.byte	0x1
 16403 202d B10B     		.2byte	0xbb1
 16404 202f 34010000 		.4byte	0x134
 16405 2033 00000000 		.4byte	.LFB245
 16406 2037 2C000000 		.4byte	.LFE245-.LFB245
 16407 203b 01       		.uleb128 0x1
 16408 203c 9C       		.byte	0x9c
 16409 203d 0B       		.uleb128 0xb
 16410 203e B1040000 		.4byte	.LASF291
 16411 2042 01       		.byte	0x1
 16412 2043 B50B     		.2byte	0xbb5
 16413 2045 34010000 		.4byte	0x134
 16414 2049 00000000 		.4byte	.LFB246
 16415 204d 2C000000 		.4byte	.LFE246-.LFB246
 16416 2051 01       		.uleb128 0x1
 16417 2052 9C       		.byte	0x9c
 16418 2053 0B       		.uleb128 0xb
 16419 2054 A2150000 		.4byte	.LASF292
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 347


 16420 2058 01       		.byte	0x1
 16421 2059 BC0B     		.2byte	0xbbc
 16422 205b 34010000 		.4byte	0x134
 16423 205f 00000000 		.4byte	.LFB247
 16424 2063 2C000000 		.4byte	.LFE247-.LFB247
 16425 2067 01       		.uleb128 0x1
 16426 2068 9C       		.byte	0x9c
 16427 2069 0C       		.uleb128 0xc
 16428 206a 571D0000 		.4byte	.LASF293
 16429 206e 01       		.byte	0x1
 16430 206f C00B     		.2byte	0xbc0
 16431 2071 00000000 		.4byte	.LFB248
 16432 2075 28000000 		.4byte	.LFE248-.LFB248
 16433 2079 01       		.uleb128 0x1
 16434 207a 9C       		.byte	0x9c
 16435 207b 8F200000 		.4byte	0x208f
 16436 207f 0D       		.uleb128 0xd
 16437 2080 A1160000 		.4byte	.LASF42
 16438 2084 01       		.byte	0x1
 16439 2085 C00B     		.2byte	0xbc0
 16440 2087 34010000 		.4byte	0x134
 16441 208b 02       		.uleb128 0x2
 16442 208c 91       		.byte	0x91
 16443 208d 77       		.sleb128 -9
 16444 208e 00       		.byte	0
 16445 208f 13       		.uleb128 0x13
 16446 2090 B6000000 		.4byte	.LASF294
 16447 2094 01       		.byte	0x1
 16448 2095 C30B     		.2byte	0xbc3
 16449 2097 00000000 		.4byte	.LFB249
 16450 209b 1C000000 		.4byte	.LFE249-.LFB249
 16451 209f 01       		.uleb128 0x1
 16452 20a0 9C       		.byte	0x9c
 16453 20a1 0C       		.uleb128 0xc
 16454 20a2 981B0000 		.4byte	.LASF295
 16455 20a6 01       		.byte	0x1
 16456 20a7 C90B     		.2byte	0xbc9
 16457 20a9 00000000 		.4byte	.LFB250
 16458 20ad 70000000 		.4byte	.LFE250-.LFB250
 16459 20b1 01       		.uleb128 0x1
 16460 20b2 9C       		.byte	0x9c
 16461 20b3 E5200000 		.4byte	0x20e5
 16462 20b7 0D       		.uleb128 0xd
 16463 20b8 DC180000 		.4byte	.LASF296
 16464 20bc 01       		.byte	0x1
 16465 20bd C90B     		.2byte	0xbc9
 16466 20bf AD000000 		.4byte	0xad
 16467 20c3 02       		.uleb128 0x2
 16468 20c4 91       		.byte	0x91
 16469 20c5 6F       		.sleb128 -17
 16470 20c6 0D       		.uleb128 0xd
 16471 20c7 36100000 		.4byte	.LASF297
 16472 20cb 01       		.byte	0x1
 16473 20cc C90B     		.2byte	0xbc9
 16474 20ce 34010000 		.4byte	0x134
 16475 20d2 02       		.uleb128 0x2
 16476 20d3 91       		.byte	0x91
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 348


 16477 20d4 6E       		.sleb128 -18
 16478 20d5 0D       		.uleb128 0xd
 16479 20d6 BC030000 		.4byte	.LASF298
 16480 20da 01       		.byte	0x1
 16481 20db C90B     		.2byte	0xbc9
 16482 20dd 34010000 		.4byte	0x134
 16483 20e1 02       		.uleb128 0x2
 16484 20e2 91       		.byte	0x91
 16485 20e3 6D       		.sleb128 -19
 16486 20e4 00       		.byte	0
 16487 20e5 0C       		.uleb128 0xc
 16488 20e6 4E0F0000 		.4byte	.LASF299
 16489 20ea 01       		.byte	0x1
 16490 20eb D20B     		.2byte	0xbd2
 16491 20ed 00000000 		.4byte	.LFB251
 16492 20f1 28000000 		.4byte	.LFE251-.LFB251
 16493 20f5 01       		.uleb128 0x1
 16494 20f6 9C       		.byte	0x9c
 16495 20f7 0B210000 		.4byte	0x210b
 16496 20fb 0D       		.uleb128 0xd
 16497 20fc A8100000 		.4byte	.LASF26
 16498 2100 01       		.byte	0x1
 16499 2101 D20B     		.2byte	0xbd2
 16500 2103 AD000000 		.4byte	0xad
 16501 2107 02       		.uleb128 0x2
 16502 2108 91       		.byte	0x91
 16503 2109 77       		.sleb128 -9
 16504 210a 00       		.byte	0
 16505 210b 0B       		.uleb128 0xb
 16506 210c 6D000000 		.4byte	.LASF300
 16507 2110 01       		.byte	0x1
 16508 2111 D80B     		.2byte	0xbd8
 16509 2113 AD000000 		.4byte	0xad
 16510 2117 00000000 		.4byte	.LFB252
 16511 211b 24000000 		.4byte	.LFE252-.LFB252
 16512 211f 01       		.uleb128 0x1
 16513 2120 9C       		.byte	0x9c
 16514 2121 0C       		.uleb128 0xc
 16515 2122 D4170000 		.4byte	.LASF301
 16516 2126 01       		.byte	0x1
 16517 2127 DC0B     		.2byte	0xbdc
 16518 2129 00000000 		.4byte	.LFB253
 16519 212d 28000000 		.4byte	.LFE253-.LFB253
 16520 2131 01       		.uleb128 0x1
 16521 2132 9C       		.byte	0x9c
 16522 2133 47210000 		.4byte	0x2147
 16523 2137 0D       		.uleb128 0xd
 16524 2138 620C0000 		.4byte	.LASF113
 16525 213c 01       		.byte	0x1
 16526 213d DC0B     		.2byte	0xbdc
 16527 213f AD000000 		.4byte	0xad
 16528 2143 02       		.uleb128 0x2
 16529 2144 91       		.byte	0x91
 16530 2145 77       		.sleb128 -9
 16531 2146 00       		.byte	0
 16532 2147 0C       		.uleb128 0xc
 16533 2148 F00B0000 		.4byte	.LASF302
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 349


 16534 214c 01       		.byte	0x1
 16535 214d DF0B     		.2byte	0xbdf
 16536 214f 00000000 		.4byte	.LFB254
 16537 2153 34010000 		.4byte	.LFE254-.LFB254
 16538 2157 01       		.uleb128 0x1
 16539 2158 9C       		.byte	0x9c
 16540 2159 B6210000 		.4byte	0x21b6
 16541 215d 0D       		.uleb128 0xd
 16542 215e 620C0000 		.4byte	.LASF113
 16543 2162 01       		.byte	0x1
 16544 2163 DF0B     		.2byte	0xbdf
 16545 2165 B81B0000 		.4byte	0x1bb8
 16546 2169 02       		.uleb128 0x2
 16547 216a 91       		.byte	0x91
 16548 216b 64       		.sleb128 -28
 16549 216c 0D       		.uleb128 0xd
 16550 216d 1C0A0000 		.4byte	.LASF303
 16551 2171 01       		.byte	0x1
 16552 2172 DF0B     		.2byte	0xbdf
 16553 2174 C3000000 		.4byte	0xc3
 16554 2178 02       		.uleb128 0x2
 16555 2179 91       		.byte	0x91
 16556 217a 62       		.sleb128 -30
 16557 217b 0D       		.uleb128 0xd
 16558 217c DC180000 		.4byte	.LASF296
 16559 2180 01       		.byte	0x1
 16560 2181 DF0B     		.2byte	0xbdf
 16561 2183 AD000000 		.4byte	0xad
 16562 2187 02       		.uleb128 0x2
 16563 2188 91       		.byte	0x91
 16564 2189 61       		.sleb128 -31
 16565 218a 0D       		.uleb128 0xd
 16566 218b A8100000 		.4byte	.LASF26
 16567 218f 01       		.byte	0x1
 16568 2190 DF0B     		.2byte	0xbdf
 16569 2192 AD000000 		.4byte	0xad
 16570 2196 02       		.uleb128 0x2
 16571 2197 91       		.byte	0x91
 16572 2198 60       		.sleb128 -32
 16573 2199 12       		.uleb128 0x12
 16574 219a E6100000 		.4byte	.LASF304
 16575 219e 01       		.byte	0x1
 16576 219f E20B     		.2byte	0xbe2
 16577 21a1 AD000000 		.4byte	0xad
 16578 21a5 02       		.uleb128 0x2
 16579 21a6 91       		.byte	0x91
 16580 21a7 6F       		.sleb128 -17
 16581 21a8 14       		.uleb128 0x14
 16582 21a9 6900     		.ascii	"i\000"
 16583 21ab 01       		.byte	0x1
 16584 21ac E30B     		.2byte	0xbe3
 16585 21ae C3000000 		.4byte	0xc3
 16586 21b2 02       		.uleb128 0x2
 16587 21b3 91       		.byte	0x91
 16588 21b4 6C       		.sleb128 -20
 16589 21b5 00       		.byte	0
 16590 21b6 0B       		.uleb128 0xb
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 350


 16591 21b7 4A130000 		.4byte	.LASF305
 16592 21bb 01       		.byte	0x1
 16593 21bc A10C     		.2byte	0xca1
 16594 21be AD000000 		.4byte	0xad
 16595 21c2 00000000 		.4byte	.LFB255
 16596 21c6 24000000 		.4byte	.LFE255-.LFB255
 16597 21ca 01       		.uleb128 0x1
 16598 21cb 9C       		.byte	0x9c
 16599 21cc 0C       		.uleb128 0xc
 16600 21cd ED1D0000 		.4byte	.LASF306
 16601 21d1 01       		.byte	0x1
 16602 21d2 A50C     		.2byte	0xca5
 16603 21d4 00000000 		.4byte	.LFB256
 16604 21d8 28000000 		.4byte	.LFE256-.LFB256
 16605 21dc 01       		.uleb128 0x1
 16606 21dd 9C       		.byte	0x9c
 16607 21de F2210000 		.4byte	0x21f2
 16608 21e2 0D       		.uleb128 0xd
 16609 21e3 180B0000 		.4byte	.LASF307
 16610 21e7 01       		.byte	0x1
 16611 21e8 A50C     		.2byte	0xca5
 16612 21ea AD000000 		.4byte	0xad
 16613 21ee 02       		.uleb128 0x2
 16614 21ef 91       		.byte	0x91
 16615 21f0 77       		.sleb128 -9
 16616 21f1 00       		.byte	0
 16617 21f2 0B       		.uleb128 0xb
 16618 21f3 80130000 		.4byte	.LASF308
 16619 21f7 01       		.byte	0x1
 16620 21f8 AB0C     		.2byte	0xcab
 16621 21fa AD000000 		.4byte	0xad
 16622 21fe 00000000 		.4byte	.LFB257
 16623 2202 24000000 		.4byte	.LFE257-.LFB257
 16624 2206 01       		.uleb128 0x1
 16625 2207 9C       		.byte	0x9c
 16626 2208 0C       		.uleb128 0xc
 16627 2209 27170000 		.4byte	.LASF309
 16628 220d 01       		.byte	0x1
 16629 220e AF0C     		.2byte	0xcaf
 16630 2210 00000000 		.4byte	.LFB258
 16631 2214 28000000 		.4byte	.LFE258-.LFB258
 16632 2218 01       		.uleb128 0x1
 16633 2219 9C       		.byte	0x9c
 16634 221a 2E220000 		.4byte	0x222e
 16635 221e 0D       		.uleb128 0xd
 16636 221f 180B0000 		.4byte	.LASF307
 16637 2223 01       		.byte	0x1
 16638 2224 AF0C     		.2byte	0xcaf
 16639 2226 AD000000 		.4byte	0xad
 16640 222a 02       		.uleb128 0x2
 16641 222b 91       		.byte	0x91
 16642 222c 77       		.sleb128 -9
 16643 222d 00       		.byte	0
 16644 222e 13       		.uleb128 0x13
 16645 222f B8090000 		.4byte	.LASF310
 16646 2233 01       		.byte	0x1
 16647 2234 BF0C     		.2byte	0xcbf
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 351


 16648 2236 00000000 		.4byte	.LFB259
 16649 223a 70000000 		.4byte	.LFE259-.LFB259
 16650 223e 01       		.uleb128 0x1
 16651 223f 9C       		.byte	0x9c
 16652 2240 15       		.uleb128 0x15
 16653 2241 06000000 		.4byte	.LASF312
 16654 2245 04       		.byte	0x4
 16655 2246 9101     		.2byte	0x191
 16656 2248 AD000000 		.4byte	0xad
 16657 224c 05       		.uleb128 0x5
 16658 224d 03       		.byte	0x3
 16659 224e 00000000 		.4byte	devAddr
 16660 2252 16       		.uleb128 0x16
 16661 2253 AD000000 		.4byte	0xad
 16662 2257 62220000 		.4byte	0x2262
 16663 225b 17       		.uleb128 0x17
 16664 225c 62220000 		.4byte	0x2262
 16665 2260 15       		.byte	0x15
 16666 2261 00       		.byte	0
 16667 2262 03       		.uleb128 0x3
 16668 2263 04       		.byte	0x4
 16669 2264 07       		.byte	0x7
 16670 2265 C5160000 		.4byte	.LASF311
 16671 2269 15       		.uleb128 0x15
 16672 226a 75120000 		.4byte	.LASF313
 16673 226e 04       		.byte	0x4
 16674 226f 9201     		.2byte	0x192
 16675 2271 52220000 		.4byte	0x2252
 16676 2275 05       		.uleb128 0x5
 16677 2276 03       		.byte	0x3
 16678 2277 00000000 		.4byte	buffer
 16679 227b 00       		.byte	0
 16680              		.section	.debug_abbrev,"",%progbits
 16681              	.Ldebug_abbrev0:
 16682 0000 01       		.uleb128 0x1
 16683 0001 11       		.uleb128 0x11
 16684 0002 01       		.byte	0x1
 16685 0003 25       		.uleb128 0x25
 16686 0004 0E       		.uleb128 0xe
 16687 0005 13       		.uleb128 0x13
 16688 0006 0B       		.uleb128 0xb
 16689 0007 03       		.uleb128 0x3
 16690 0008 0E       		.uleb128 0xe
 16691 0009 1B       		.uleb128 0x1b
 16692 000a 0E       		.uleb128 0xe
 16693 000b 55       		.uleb128 0x55
 16694 000c 17       		.uleb128 0x17
 16695 000d 11       		.uleb128 0x11
 16696 000e 01       		.uleb128 0x1
 16697 000f 10       		.uleb128 0x10
 16698 0010 17       		.uleb128 0x17
 16699 0011 00       		.byte	0
 16700 0012 00       		.byte	0
 16701 0013 02       		.uleb128 0x2
 16702 0014 16       		.uleb128 0x16
 16703 0015 00       		.byte	0
 16704 0016 03       		.uleb128 0x3
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 352


 16705 0017 0E       		.uleb128 0xe
 16706 0018 3A       		.uleb128 0x3a
 16707 0019 0B       		.uleb128 0xb
 16708 001a 3B       		.uleb128 0x3b
 16709 001b 0B       		.uleb128 0xb
 16710 001c 49       		.uleb128 0x49
 16711 001d 13       		.uleb128 0x13
 16712 001e 00       		.byte	0
 16713 001f 00       		.byte	0
 16714 0020 03       		.uleb128 0x3
 16715 0021 24       		.uleb128 0x24
 16716 0022 00       		.byte	0
 16717 0023 0B       		.uleb128 0xb
 16718 0024 0B       		.uleb128 0xb
 16719 0025 3E       		.uleb128 0x3e
 16720 0026 0B       		.uleb128 0xb
 16721 0027 03       		.uleb128 0x3
 16722 0028 0E       		.uleb128 0xe
 16723 0029 00       		.byte	0
 16724 002a 00       		.byte	0
 16725 002b 04       		.uleb128 0x4
 16726 002c 24       		.uleb128 0x24
 16727 002d 00       		.byte	0
 16728 002e 0B       		.uleb128 0xb
 16729 002f 0B       		.uleb128 0xb
 16730 0030 3E       		.uleb128 0x3e
 16731 0031 0B       		.uleb128 0xb
 16732 0032 03       		.uleb128 0x3
 16733 0033 08       		.uleb128 0x8
 16734 0034 00       		.byte	0
 16735 0035 00       		.byte	0
 16736 0036 05       		.uleb128 0x5
 16737 0037 2E       		.uleb128 0x2e
 16738 0038 00       		.byte	0
 16739 0039 3F       		.uleb128 0x3f
 16740 003a 19       		.uleb128 0x19
 16741 003b 03       		.uleb128 0x3
 16742 003c 0E       		.uleb128 0xe
 16743 003d 3A       		.uleb128 0x3a
 16744 003e 0B       		.uleb128 0xb
 16745 003f 3B       		.uleb128 0x3b
 16746 0040 0B       		.uleb128 0xb
 16747 0041 11       		.uleb128 0x11
 16748 0042 01       		.uleb128 0x1
 16749 0043 12       		.uleb128 0x12
 16750 0044 06       		.uleb128 0x6
 16751 0045 40       		.uleb128 0x40
 16752 0046 18       		.uleb128 0x18
 16753 0047 9742     		.uleb128 0x2117
 16754 0049 19       		.uleb128 0x19
 16755 004a 00       		.byte	0
 16756 004b 00       		.byte	0
 16757 004c 06       		.uleb128 0x6
 16758 004d 2E       		.uleb128 0x2e
 16759 004e 01       		.byte	0x1
 16760 004f 3F       		.uleb128 0x3f
 16761 0050 19       		.uleb128 0x19
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 353


 16762 0051 03       		.uleb128 0x3
 16763 0052 0E       		.uleb128 0xe
 16764 0053 3A       		.uleb128 0x3a
 16765 0054 0B       		.uleb128 0xb
 16766 0055 3B       		.uleb128 0x3b
 16767 0056 0B       		.uleb128 0xb
 16768 0057 27       		.uleb128 0x27
 16769 0058 19       		.uleb128 0x19
 16770 0059 11       		.uleb128 0x11
 16771 005a 01       		.uleb128 0x1
 16772 005b 12       		.uleb128 0x12
 16773 005c 06       		.uleb128 0x6
 16774 005d 40       		.uleb128 0x40
 16775 005e 18       		.uleb128 0x18
 16776 005f 9742     		.uleb128 0x2117
 16777 0061 19       		.uleb128 0x19
 16778 0062 01       		.uleb128 0x1
 16779 0063 13       		.uleb128 0x13
 16780 0064 00       		.byte	0
 16781 0065 00       		.byte	0
 16782 0066 07       		.uleb128 0x7
 16783 0067 05       		.uleb128 0x5
 16784 0068 00       		.byte	0
 16785 0069 03       		.uleb128 0x3
 16786 006a 0E       		.uleb128 0xe
 16787 006b 3A       		.uleb128 0x3a
 16788 006c 0B       		.uleb128 0xb
 16789 006d 3B       		.uleb128 0x3b
 16790 006e 0B       		.uleb128 0xb
 16791 006f 49       		.uleb128 0x49
 16792 0070 13       		.uleb128 0x13
 16793 0071 02       		.uleb128 0x2
 16794 0072 18       		.uleb128 0x18
 16795 0073 00       		.byte	0
 16796 0074 00       		.byte	0
 16797 0075 08       		.uleb128 0x8
 16798 0076 2E       		.uleb128 0x2e
 16799 0077 00       		.byte	0
 16800 0078 3F       		.uleb128 0x3f
 16801 0079 19       		.uleb128 0x19
 16802 007a 03       		.uleb128 0x3
 16803 007b 0E       		.uleb128 0xe
 16804 007c 3A       		.uleb128 0x3a
 16805 007d 0B       		.uleb128 0xb
 16806 007e 3B       		.uleb128 0x3b
 16807 007f 0B       		.uleb128 0xb
 16808 0080 11       		.uleb128 0x11
 16809 0081 01       		.uleb128 0x1
 16810 0082 12       		.uleb128 0x12
 16811 0083 06       		.uleb128 0x6
 16812 0084 40       		.uleb128 0x40
 16813 0085 18       		.uleb128 0x18
 16814 0086 9642     		.uleb128 0x2116
 16815 0088 19       		.uleb128 0x19
 16816 0089 00       		.byte	0
 16817 008a 00       		.byte	0
 16818 008b 09       		.uleb128 0x9
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 354


 16819 008c 2E       		.uleb128 0x2e
 16820 008d 00       		.byte	0
 16821 008e 3F       		.uleb128 0x3f
 16822 008f 19       		.uleb128 0x19
 16823 0090 03       		.uleb128 0x3
 16824 0091 0E       		.uleb128 0xe
 16825 0092 3A       		.uleb128 0x3a
 16826 0093 0B       		.uleb128 0xb
 16827 0094 3B       		.uleb128 0x3b
 16828 0095 0B       		.uleb128 0xb
 16829 0096 49       		.uleb128 0x49
 16830 0097 13       		.uleb128 0x13
 16831 0098 11       		.uleb128 0x11
 16832 0099 01       		.uleb128 0x1
 16833 009a 12       		.uleb128 0x12
 16834 009b 06       		.uleb128 0x6
 16835 009c 40       		.uleb128 0x40
 16836 009d 18       		.uleb128 0x18
 16837 009e 9642     		.uleb128 0x2116
 16838 00a0 19       		.uleb128 0x19
 16839 00a1 00       		.byte	0
 16840 00a2 00       		.byte	0
 16841 00a3 0A       		.uleb128 0xa
 16842 00a4 2E       		.uleb128 0x2e
 16843 00a5 01       		.byte	0x1
 16844 00a6 3F       		.uleb128 0x3f
 16845 00a7 19       		.uleb128 0x19
 16846 00a8 03       		.uleb128 0x3
 16847 00a9 0E       		.uleb128 0xe
 16848 00aa 3A       		.uleb128 0x3a
 16849 00ab 0B       		.uleb128 0xb
 16850 00ac 3B       		.uleb128 0x3b
 16851 00ad 0B       		.uleb128 0xb
 16852 00ae 27       		.uleb128 0x27
 16853 00af 19       		.uleb128 0x19
 16854 00b0 11       		.uleb128 0x11
 16855 00b1 01       		.uleb128 0x1
 16856 00b2 12       		.uleb128 0x12
 16857 00b3 06       		.uleb128 0x6
 16858 00b4 40       		.uleb128 0x40
 16859 00b5 18       		.uleb128 0x18
 16860 00b6 9642     		.uleb128 0x2116
 16861 00b8 19       		.uleb128 0x19
 16862 00b9 01       		.uleb128 0x1
 16863 00ba 13       		.uleb128 0x13
 16864 00bb 00       		.byte	0
 16865 00bc 00       		.byte	0
 16866 00bd 0B       		.uleb128 0xb
 16867 00be 2E       		.uleb128 0x2e
 16868 00bf 00       		.byte	0
 16869 00c0 3F       		.uleb128 0x3f
 16870 00c1 19       		.uleb128 0x19
 16871 00c2 03       		.uleb128 0x3
 16872 00c3 0E       		.uleb128 0xe
 16873 00c4 3A       		.uleb128 0x3a
 16874 00c5 0B       		.uleb128 0xb
 16875 00c6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 355


 16876 00c7 05       		.uleb128 0x5
 16877 00c8 49       		.uleb128 0x49
 16878 00c9 13       		.uleb128 0x13
 16879 00ca 11       		.uleb128 0x11
 16880 00cb 01       		.uleb128 0x1
 16881 00cc 12       		.uleb128 0x12
 16882 00cd 06       		.uleb128 0x6
 16883 00ce 40       		.uleb128 0x40
 16884 00cf 18       		.uleb128 0x18
 16885 00d0 9642     		.uleb128 0x2116
 16886 00d2 19       		.uleb128 0x19
 16887 00d3 00       		.byte	0
 16888 00d4 00       		.byte	0
 16889 00d5 0C       		.uleb128 0xc
 16890 00d6 2E       		.uleb128 0x2e
 16891 00d7 01       		.byte	0x1
 16892 00d8 3F       		.uleb128 0x3f
 16893 00d9 19       		.uleb128 0x19
 16894 00da 03       		.uleb128 0x3
 16895 00db 0E       		.uleb128 0xe
 16896 00dc 3A       		.uleb128 0x3a
 16897 00dd 0B       		.uleb128 0xb
 16898 00de 3B       		.uleb128 0x3b
 16899 00df 05       		.uleb128 0x5
 16900 00e0 27       		.uleb128 0x27
 16901 00e1 19       		.uleb128 0x19
 16902 00e2 11       		.uleb128 0x11
 16903 00e3 01       		.uleb128 0x1
 16904 00e4 12       		.uleb128 0x12
 16905 00e5 06       		.uleb128 0x6
 16906 00e6 40       		.uleb128 0x40
 16907 00e7 18       		.uleb128 0x18
 16908 00e8 9642     		.uleb128 0x2116
 16909 00ea 19       		.uleb128 0x19
 16910 00eb 01       		.uleb128 0x1
 16911 00ec 13       		.uleb128 0x13
 16912 00ed 00       		.byte	0
 16913 00ee 00       		.byte	0
 16914 00ef 0D       		.uleb128 0xd
 16915 00f0 05       		.uleb128 0x5
 16916 00f1 00       		.byte	0
 16917 00f2 03       		.uleb128 0x3
 16918 00f3 0E       		.uleb128 0xe
 16919 00f4 3A       		.uleb128 0x3a
 16920 00f5 0B       		.uleb128 0xb
 16921 00f6 3B       		.uleb128 0x3b
 16922 00f7 05       		.uleb128 0x5
 16923 00f8 49       		.uleb128 0x49
 16924 00f9 13       		.uleb128 0x13
 16925 00fa 02       		.uleb128 0x2
 16926 00fb 18       		.uleb128 0x18
 16927 00fc 00       		.byte	0
 16928 00fd 00       		.byte	0
 16929 00fe 0E       		.uleb128 0xe
 16930 00ff 2E       		.uleb128 0x2e
 16931 0100 01       		.byte	0x1
 16932 0101 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 356


 16933 0102 19       		.uleb128 0x19
 16934 0103 03       		.uleb128 0x3
 16935 0104 0E       		.uleb128 0xe
 16936 0105 3A       		.uleb128 0x3a
 16937 0106 0B       		.uleb128 0xb
 16938 0107 3B       		.uleb128 0x3b
 16939 0108 05       		.uleb128 0x5
 16940 0109 27       		.uleb128 0x27
 16941 010a 19       		.uleb128 0x19
 16942 010b 49       		.uleb128 0x49
 16943 010c 13       		.uleb128 0x13
 16944 010d 11       		.uleb128 0x11
 16945 010e 01       		.uleb128 0x1
 16946 010f 12       		.uleb128 0x12
 16947 0110 06       		.uleb128 0x6
 16948 0111 40       		.uleb128 0x40
 16949 0112 18       		.uleb128 0x18
 16950 0113 9642     		.uleb128 0x2116
 16951 0115 19       		.uleb128 0x19
 16952 0116 01       		.uleb128 0x1
 16953 0117 13       		.uleb128 0x13
 16954 0118 00       		.byte	0
 16955 0119 00       		.byte	0
 16956 011a 0F       		.uleb128 0xf
 16957 011b 05       		.uleb128 0x5
 16958 011c 00       		.byte	0
 16959 011d 03       		.uleb128 0x3
 16960 011e 08       		.uleb128 0x8
 16961 011f 3A       		.uleb128 0x3a
 16962 0120 0B       		.uleb128 0xb
 16963 0121 3B       		.uleb128 0x3b
 16964 0122 05       		.uleb128 0x5
 16965 0123 49       		.uleb128 0x49
 16966 0124 13       		.uleb128 0x13
 16967 0125 02       		.uleb128 0x2
 16968 0126 18       		.uleb128 0x18
 16969 0127 00       		.byte	0
 16970 0128 00       		.byte	0
 16971 0129 10       		.uleb128 0x10
 16972 012a 0F       		.uleb128 0xf
 16973 012b 00       		.byte	0
 16974 012c 0B       		.uleb128 0xb
 16975 012d 0B       		.uleb128 0xb
 16976 012e 49       		.uleb128 0x49
 16977 012f 13       		.uleb128 0x13
 16978 0130 00       		.byte	0
 16979 0131 00       		.byte	0
 16980 0132 11       		.uleb128 0x11
 16981 0133 2E       		.uleb128 0x2e
 16982 0134 01       		.byte	0x1
 16983 0135 3F       		.uleb128 0x3f
 16984 0136 19       		.uleb128 0x19
 16985 0137 03       		.uleb128 0x3
 16986 0138 0E       		.uleb128 0xe
 16987 0139 3A       		.uleb128 0x3a
 16988 013a 0B       		.uleb128 0xb
 16989 013b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 357


 16990 013c 05       		.uleb128 0x5
 16991 013d 49       		.uleb128 0x49
 16992 013e 13       		.uleb128 0x13
 16993 013f 11       		.uleb128 0x11
 16994 0140 01       		.uleb128 0x1
 16995 0141 12       		.uleb128 0x12
 16996 0142 06       		.uleb128 0x6
 16997 0143 40       		.uleb128 0x40
 16998 0144 18       		.uleb128 0x18
 16999 0145 9642     		.uleb128 0x2116
 17000 0147 19       		.uleb128 0x19
 17001 0148 01       		.uleb128 0x1
 17002 0149 13       		.uleb128 0x13
 17003 014a 00       		.byte	0
 17004 014b 00       		.byte	0
 17005 014c 12       		.uleb128 0x12
 17006 014d 34       		.uleb128 0x34
 17007 014e 00       		.byte	0
 17008 014f 03       		.uleb128 0x3
 17009 0150 0E       		.uleb128 0xe
 17010 0151 3A       		.uleb128 0x3a
 17011 0152 0B       		.uleb128 0xb
 17012 0153 3B       		.uleb128 0x3b
 17013 0154 05       		.uleb128 0x5
 17014 0155 49       		.uleb128 0x49
 17015 0156 13       		.uleb128 0x13
 17016 0157 02       		.uleb128 0x2
 17017 0158 18       		.uleb128 0x18
 17018 0159 00       		.byte	0
 17019 015a 00       		.byte	0
 17020 015b 13       		.uleb128 0x13
 17021 015c 2E       		.uleb128 0x2e
 17022 015d 00       		.byte	0
 17023 015e 3F       		.uleb128 0x3f
 17024 015f 19       		.uleb128 0x19
 17025 0160 03       		.uleb128 0x3
 17026 0161 0E       		.uleb128 0xe
 17027 0162 3A       		.uleb128 0x3a
 17028 0163 0B       		.uleb128 0xb
 17029 0164 3B       		.uleb128 0x3b
 17030 0165 05       		.uleb128 0x5
 17031 0166 11       		.uleb128 0x11
 17032 0167 01       		.uleb128 0x1
 17033 0168 12       		.uleb128 0x12
 17034 0169 06       		.uleb128 0x6
 17035 016a 40       		.uleb128 0x40
 17036 016b 18       		.uleb128 0x18
 17037 016c 9642     		.uleb128 0x2116
 17038 016e 19       		.uleb128 0x19
 17039 016f 00       		.byte	0
 17040 0170 00       		.byte	0
 17041 0171 14       		.uleb128 0x14
 17042 0172 34       		.uleb128 0x34
 17043 0173 00       		.byte	0
 17044 0174 03       		.uleb128 0x3
 17045 0175 08       		.uleb128 0x8
 17046 0176 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 358


 17047 0177 0B       		.uleb128 0xb
 17048 0178 3B       		.uleb128 0x3b
 17049 0179 05       		.uleb128 0x5
 17050 017a 49       		.uleb128 0x49
 17051 017b 13       		.uleb128 0x13
 17052 017c 02       		.uleb128 0x2
 17053 017d 18       		.uleb128 0x18
 17054 017e 00       		.byte	0
 17055 017f 00       		.byte	0
 17056 0180 15       		.uleb128 0x15
 17057 0181 34       		.uleb128 0x34
 17058 0182 00       		.byte	0
 17059 0183 03       		.uleb128 0x3
 17060 0184 0E       		.uleb128 0xe
 17061 0185 3A       		.uleb128 0x3a
 17062 0186 0B       		.uleb128 0xb
 17063 0187 3B       		.uleb128 0x3b
 17064 0188 05       		.uleb128 0x5
 17065 0189 49       		.uleb128 0x49
 17066 018a 13       		.uleb128 0x13
 17067 018b 3F       		.uleb128 0x3f
 17068 018c 19       		.uleb128 0x19
 17069 018d 02       		.uleb128 0x2
 17070 018e 18       		.uleb128 0x18
 17071 018f 00       		.byte	0
 17072 0190 00       		.byte	0
 17073 0191 16       		.uleb128 0x16
 17074 0192 01       		.uleb128 0x1
 17075 0193 01       		.byte	0x1
 17076 0194 49       		.uleb128 0x49
 17077 0195 13       		.uleb128 0x13
 17078 0196 01       		.uleb128 0x1
 17079 0197 13       		.uleb128 0x13
 17080 0198 00       		.byte	0
 17081 0199 00       		.byte	0
 17082 019a 17       		.uleb128 0x17
 17083 019b 21       		.uleb128 0x21
 17084 019c 00       		.byte	0
 17085 019d 49       		.uleb128 0x49
 17086 019e 13       		.uleb128 0x13
 17087 019f 2F       		.uleb128 0x2f
 17088 01a0 0B       		.uleb128 0xb
 17089 01a1 00       		.byte	0
 17090 01a2 00       		.byte	0
 17091 01a3 00       		.byte	0
 17092              		.section	.debug_aranges,"",%progbits
 17093 0000 34080000 		.4byte	0x834
 17094 0004 0200     		.2byte	0x2
 17095 0006 00000000 		.4byte	.Ldebug_info0
 17096 000a 04       		.byte	0x4
 17097 000b 00       		.byte	0
 17098 000c 0000     		.2byte	0
 17099 000e 0000     		.2byte	0
 17100 0010 00000000 		.4byte	.LFB0
 17101 0014 14000000 		.4byte	.LFE0-.LFB0
 17102 0018 00000000 		.4byte	.LFB1
 17103 001c 20000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 359


 17104 0020 00000000 		.4byte	.LFB2
 17105 0024 22000000 		.4byte	.LFE2-.LFB2
 17106 0028 00000000 		.4byte	.LFB3
 17107 002c 18000000 		.4byte	.LFE3-.LFB3
 17108 0030 00000000 		.4byte	.LFB4
 17109 0034 24000000 		.4byte	.LFE4-.LFB4
 17110 0038 00000000 		.4byte	.LFB5
 17111 003c 28000000 		.4byte	.LFE5-.LFB5
 17112 0040 00000000 		.4byte	.LFB6
 17113 0044 24000000 		.4byte	.LFE6-.LFB6
 17114 0048 00000000 		.4byte	.LFB7
 17115 004c 28000000 		.4byte	.LFE7-.LFB7
 17116 0050 00000000 		.4byte	.LFB8
 17117 0054 2C000000 		.4byte	.LFE8-.LFB8
 17118 0058 00000000 		.4byte	.LFB9
 17119 005c 2C000000 		.4byte	.LFE9-.LFB9
 17120 0060 00000000 		.4byte	.LFB10
 17121 0064 2C000000 		.4byte	.LFE10-.LFB10
 17122 0068 00000000 		.4byte	.LFB11
 17123 006c 2C000000 		.4byte	.LFE11-.LFB11
 17124 0070 00000000 		.4byte	.LFB12
 17125 0074 2C000000 		.4byte	.LFE12-.LFB12
 17126 0078 00000000 		.4byte	.LFB13
 17127 007c 2C000000 		.4byte	.LFE13-.LFB13
 17128 0080 00000000 		.4byte	.LFB14
 17129 0084 2C000000 		.4byte	.LFE14-.LFB14
 17130 0088 00000000 		.4byte	.LFB15
 17131 008c 28000000 		.4byte	.LFE15-.LFB15
 17132 0090 00000000 		.4byte	.LFB16
 17133 0094 2C000000 		.4byte	.LFE16-.LFB16
 17134 0098 00000000 		.4byte	.LFB17
 17135 009c 28000000 		.4byte	.LFE17-.LFB17
 17136 00a0 00000000 		.4byte	.LFB18
 17137 00a4 2C000000 		.4byte	.LFE18-.LFB18
 17138 00a8 00000000 		.4byte	.LFB19
 17139 00ac 28000000 		.4byte	.LFE19-.LFB19
 17140 00b0 00000000 		.4byte	.LFB20
 17141 00b4 2C000000 		.4byte	.LFE20-.LFB20
 17142 00b8 00000000 		.4byte	.LFB21
 17143 00bc 2C000000 		.4byte	.LFE21-.LFB21
 17144 00c0 00000000 		.4byte	.LFB22
 17145 00c4 2C000000 		.4byte	.LFE22-.LFB22
 17146 00c8 00000000 		.4byte	.LFB23
 17147 00cc 2C000000 		.4byte	.LFE23-.LFB23
 17148 00d0 00000000 		.4byte	.LFB24
 17149 00d4 24000000 		.4byte	.LFE24-.LFB24
 17150 00d8 00000000 		.4byte	.LFB25
 17151 00dc 28000000 		.4byte	.LFE25-.LFB25
 17152 00e0 00000000 		.4byte	.LFB26
 17153 00e4 24000000 		.4byte	.LFE26-.LFB26
 17154 00e8 00000000 		.4byte	.LFB27
 17155 00ec 28000000 		.4byte	.LFE27-.LFB27
 17156 00f0 00000000 		.4byte	.LFB28
 17157 00f4 24000000 		.4byte	.LFE28-.LFB28
 17158 00f8 00000000 		.4byte	.LFB29
 17159 00fc 28000000 		.4byte	.LFE29-.LFB29
 17160 0100 00000000 		.4byte	.LFB30
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 360


 17161 0104 24000000 		.4byte	.LFE30-.LFB30
 17162 0108 00000000 		.4byte	.LFB31
 17163 010c 28000000 		.4byte	.LFE31-.LFB31
 17164 0110 00000000 		.4byte	.LFB32
 17165 0114 24000000 		.4byte	.LFE32-.LFB32
 17166 0118 00000000 		.4byte	.LFB33
 17167 011c 28000000 		.4byte	.LFE33-.LFB33
 17168 0120 00000000 		.4byte	.LFB34
 17169 0124 24000000 		.4byte	.LFE34-.LFB34
 17170 0128 00000000 		.4byte	.LFB35
 17171 012c 28000000 		.4byte	.LFE35-.LFB35
 17172 0130 00000000 		.4byte	.LFB36
 17173 0134 2C000000 		.4byte	.LFE36-.LFB36
 17174 0138 00000000 		.4byte	.LFB37
 17175 013c 28000000 		.4byte	.LFE37-.LFB37
 17176 0140 00000000 		.4byte	.LFB38
 17177 0144 2C000000 		.4byte	.LFE38-.LFB38
 17178 0148 00000000 		.4byte	.LFB39
 17179 014c 28000000 		.4byte	.LFE39-.LFB39
 17180 0150 00000000 		.4byte	.LFB40
 17181 0154 2C000000 		.4byte	.LFE40-.LFB40
 17182 0158 00000000 		.4byte	.LFB41
 17183 015c 28000000 		.4byte	.LFE41-.LFB41
 17184 0160 00000000 		.4byte	.LFB42
 17185 0164 2C000000 		.4byte	.LFE42-.LFB42
 17186 0168 00000000 		.4byte	.LFB43
 17187 016c 28000000 		.4byte	.LFE43-.LFB43
 17188 0170 00000000 		.4byte	.LFB44
 17189 0174 2C000000 		.4byte	.LFE44-.LFB44
 17190 0178 00000000 		.4byte	.LFB45
 17191 017c 28000000 		.4byte	.LFE45-.LFB45
 17192 0180 00000000 		.4byte	.LFB46
 17193 0184 2C000000 		.4byte	.LFE46-.LFB46
 17194 0188 00000000 		.4byte	.LFB47
 17195 018c 28000000 		.4byte	.LFE47-.LFB47
 17196 0190 00000000 		.4byte	.LFB48
 17197 0194 2C000000 		.4byte	.LFE48-.LFB48
 17198 0198 00000000 		.4byte	.LFB49
 17199 019c 28000000 		.4byte	.LFE49-.LFB49
 17200 01a0 00000000 		.4byte	.LFB50
 17201 01a4 2C000000 		.4byte	.LFE50-.LFB50
 17202 01a8 00000000 		.4byte	.LFB51
 17203 01ac 28000000 		.4byte	.LFE51-.LFB51
 17204 01b0 00000000 		.4byte	.LFB52
 17205 01b4 2C000000 		.4byte	.LFE52-.LFB52
 17206 01b8 00000000 		.4byte	.LFB53
 17207 01bc 28000000 		.4byte	.LFE53-.LFB53
 17208 01c0 00000000 		.4byte	.LFB54
 17209 01c4 2C000000 		.4byte	.LFE54-.LFB54
 17210 01c8 00000000 		.4byte	.LFB55
 17211 01cc 28000000 		.4byte	.LFE55-.LFB55
 17212 01d0 00000000 		.4byte	.LFB56
 17213 01d4 2C000000 		.4byte	.LFE56-.LFB56
 17214 01d8 00000000 		.4byte	.LFB57
 17215 01dc 28000000 		.4byte	.LFE57-.LFB57
 17216 01e0 00000000 		.4byte	.LFB58
 17217 01e4 2C000000 		.4byte	.LFE58-.LFB58
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 361


 17218 01e8 00000000 		.4byte	.LFB59
 17219 01ec 28000000 		.4byte	.LFE59-.LFB59
 17220 01f0 00000000 		.4byte	.LFB60
 17221 01f4 2C000000 		.4byte	.LFE60-.LFB60
 17222 01f8 00000000 		.4byte	.LFB61
 17223 01fc 2C000000 		.4byte	.LFE61-.LFB61
 17224 0200 00000000 		.4byte	.LFB62
 17225 0204 48000000 		.4byte	.LFE62-.LFB62
 17226 0208 00000000 		.4byte	.LFB63
 17227 020c 48000000 		.4byte	.LFE63-.LFB63
 17228 0210 00000000 		.4byte	.LFB64
 17229 0214 48000000 		.4byte	.LFE64-.LFB64
 17230 0218 00000000 		.4byte	.LFB65
 17231 021c 48000000 		.4byte	.LFE65-.LFB65
 17232 0220 00000000 		.4byte	.LFB66
 17233 0224 50000000 		.4byte	.LFE66-.LFB66
 17234 0228 00000000 		.4byte	.LFB67
 17235 022c 48000000 		.4byte	.LFE67-.LFB67
 17236 0230 00000000 		.4byte	.LFB68
 17237 0234 50000000 		.4byte	.LFE68-.LFB68
 17238 0238 00000000 		.4byte	.LFB69
 17239 023c 48000000 		.4byte	.LFE69-.LFB69
 17240 0240 00000000 		.4byte	.LFB70
 17241 0244 50000000 		.4byte	.LFE70-.LFB70
 17242 0248 00000000 		.4byte	.LFB71
 17243 024c 48000000 		.4byte	.LFE71-.LFB71
 17244 0250 00000000 		.4byte	.LFB72
 17245 0254 50000000 		.4byte	.LFE72-.LFB72
 17246 0258 00000000 		.4byte	.LFB73
 17247 025c 48000000 		.4byte	.LFE73-.LFB73
 17248 0260 00000000 		.4byte	.LFB74
 17249 0264 4C000000 		.4byte	.LFE74-.LFB74
 17250 0268 00000000 		.4byte	.LFB75
 17251 026c 4C000000 		.4byte	.LFE75-.LFB75
 17252 0270 00000000 		.4byte	.LFB76
 17253 0274 24000000 		.4byte	.LFE76-.LFB76
 17254 0278 00000000 		.4byte	.LFB77
 17255 027c 28000000 		.4byte	.LFE77-.LFB77
 17256 0280 00000000 		.4byte	.LFB78
 17257 0284 24000000 		.4byte	.LFE78-.LFB78
 17258 0288 00000000 		.4byte	.LFB79
 17259 028c 28000000 		.4byte	.LFE79-.LFB79
 17260 0290 00000000 		.4byte	.LFB80
 17261 0294 28000000 		.4byte	.LFE80-.LFB80
 17262 0298 00000000 		.4byte	.LFB81
 17263 029c 2C000000 		.4byte	.LFE81-.LFB81
 17264 02a0 00000000 		.4byte	.LFB82
 17265 02a4 28000000 		.4byte	.LFE82-.LFB82
 17266 02a8 00000000 		.4byte	.LFB83
 17267 02ac 2C000000 		.4byte	.LFE83-.LFB83
 17268 02b0 00000000 		.4byte	.LFB84
 17269 02b4 28000000 		.4byte	.LFE84-.LFB84
 17270 02b8 00000000 		.4byte	.LFB85
 17271 02bc 2C000000 		.4byte	.LFE85-.LFB85
 17272 02c0 00000000 		.4byte	.LFB86
 17273 02c4 28000000 		.4byte	.LFE86-.LFB86
 17274 02c8 00000000 		.4byte	.LFB87
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 362


 17275 02cc 2C000000 		.4byte	.LFE87-.LFB87
 17276 02d0 00000000 		.4byte	.LFB88
 17277 02d4 2C000000 		.4byte	.LFE88-.LFB88
 17278 02d8 00000000 		.4byte	.LFB89
 17279 02dc 24000000 		.4byte	.LFE89-.LFB89
 17280 02e0 00000000 		.4byte	.LFB90
 17281 02e4 2C000000 		.4byte	.LFE90-.LFB90
 17282 02e8 00000000 		.4byte	.LFB91
 17283 02ec 2C000000 		.4byte	.LFE91-.LFB91
 17284 02f0 00000000 		.4byte	.LFB92
 17285 02f4 2C000000 		.4byte	.LFE92-.LFB92
 17286 02f8 00000000 		.4byte	.LFB93
 17287 02fc 2C000000 		.4byte	.LFE93-.LFB93
 17288 0300 00000000 		.4byte	.LFB94
 17289 0304 2C000000 		.4byte	.LFE94-.LFB94
 17290 0308 00000000 		.4byte	.LFB95
 17291 030c 2C000000 		.4byte	.LFE95-.LFB95
 17292 0310 00000000 		.4byte	.LFB96
 17293 0314 2C000000 		.4byte	.LFE96-.LFB96
 17294 0318 00000000 		.4byte	.LFB97
 17295 031c 2C000000 		.4byte	.LFE97-.LFB97
 17296 0320 00000000 		.4byte	.LFB98
 17297 0324 2C000000 		.4byte	.LFE98-.LFB98
 17298 0328 00000000 		.4byte	.LFB99
 17299 032c 28000000 		.4byte	.LFE99-.LFB99
 17300 0330 00000000 		.4byte	.LFB100
 17301 0334 2C000000 		.4byte	.LFE100-.LFB100
 17302 0338 00000000 		.4byte	.LFB101
 17303 033c 28000000 		.4byte	.LFE101-.LFB101
 17304 0340 00000000 		.4byte	.LFB102
 17305 0344 2C000000 		.4byte	.LFE102-.LFB102
 17306 0348 00000000 		.4byte	.LFB103
 17307 034c 28000000 		.4byte	.LFE103-.LFB103
 17308 0350 00000000 		.4byte	.LFB104
 17309 0354 2C000000 		.4byte	.LFE104-.LFB104
 17310 0358 00000000 		.4byte	.LFB105
 17311 035c 28000000 		.4byte	.LFE105-.LFB105
 17312 0360 00000000 		.4byte	.LFB106
 17313 0364 2C000000 		.4byte	.LFE106-.LFB106
 17314 0368 00000000 		.4byte	.LFB107
 17315 036c 28000000 		.4byte	.LFE107-.LFB107
 17316 0370 00000000 		.4byte	.LFB108
 17317 0374 2C000000 		.4byte	.LFE108-.LFB108
 17318 0378 00000000 		.4byte	.LFB109
 17319 037c 28000000 		.4byte	.LFE109-.LFB109
 17320 0380 00000000 		.4byte	.LFB110
 17321 0384 2C000000 		.4byte	.LFE110-.LFB110
 17322 0388 00000000 		.4byte	.LFB111
 17323 038c 28000000 		.4byte	.LFE111-.LFB111
 17324 0390 00000000 		.4byte	.LFB112
 17325 0394 2C000000 		.4byte	.LFE112-.LFB112
 17326 0398 00000000 		.4byte	.LFB113
 17327 039c 28000000 		.4byte	.LFE113-.LFB113
 17328 03a0 00000000 		.4byte	.LFB114
 17329 03a4 24000000 		.4byte	.LFE114-.LFB114
 17330 03a8 00000000 		.4byte	.LFB115
 17331 03ac 28000000 		.4byte	.LFE115-.LFB115
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 363


 17332 03b0 00000000 		.4byte	.LFB116
 17333 03b4 2C000000 		.4byte	.LFE116-.LFB116
 17334 03b8 00000000 		.4byte	.LFB117
 17335 03bc 28000000 		.4byte	.LFE117-.LFB117
 17336 03c0 00000000 		.4byte	.LFB118
 17337 03c4 2C000000 		.4byte	.LFE118-.LFB118
 17338 03c8 00000000 		.4byte	.LFB119
 17339 03cc 28000000 		.4byte	.LFE119-.LFB119
 17340 03d0 00000000 		.4byte	.LFB120
 17341 03d4 2C000000 		.4byte	.LFE120-.LFB120
 17342 03d8 00000000 		.4byte	.LFB121
 17343 03dc 28000000 		.4byte	.LFE121-.LFB121
 17344 03e0 00000000 		.4byte	.LFB122
 17345 03e4 2C000000 		.4byte	.LFE122-.LFB122
 17346 03e8 00000000 		.4byte	.LFB123
 17347 03ec 28000000 		.4byte	.LFE123-.LFB123
 17348 03f0 00000000 		.4byte	.LFB124
 17349 03f4 2C000000 		.4byte	.LFE124-.LFB124
 17350 03f8 00000000 		.4byte	.LFB125
 17351 03fc 28000000 		.4byte	.LFE125-.LFB125
 17352 0400 00000000 		.4byte	.LFB126
 17353 0404 2C000000 		.4byte	.LFE126-.LFB126
 17354 0408 00000000 		.4byte	.LFB127
 17355 040c 28000000 		.4byte	.LFE127-.LFB127
 17356 0410 00000000 		.4byte	.LFB128
 17357 0414 24000000 		.4byte	.LFE128-.LFB128
 17358 0418 00000000 		.4byte	.LFB129
 17359 041c 2C000000 		.4byte	.LFE129-.LFB129
 17360 0420 00000000 		.4byte	.LFB130
 17361 0424 2C000000 		.4byte	.LFE130-.LFB130
 17362 0428 00000000 		.4byte	.LFB131
 17363 042c 2C000000 		.4byte	.LFE131-.LFB131
 17364 0430 00000000 		.4byte	.LFB132
 17365 0434 2C000000 		.4byte	.LFE132-.LFB132
 17366 0438 00000000 		.4byte	.LFB133
 17367 043c 2C000000 		.4byte	.LFE133-.LFB133
 17368 0440 00000000 		.4byte	.LFB134
 17369 0444 2C000000 		.4byte	.LFE134-.LFB134
 17370 0448 00000000 		.4byte	.LFB135
 17371 044c EC000000 		.4byte	.LFE135-.LFB135
 17372 0450 00000000 		.4byte	.LFB136
 17373 0454 04010000 		.4byte	.LFE136-.LFB136
 17374 0458 00000000 		.4byte	.LFB137
 17375 045c B0000000 		.4byte	.LFE137-.LFB137
 17376 0460 00000000 		.4byte	.LFB138
 17377 0464 C8000000 		.4byte	.LFE138-.LFB138
 17378 0468 00000000 		.4byte	.LFB139
 17379 046c 6C000000 		.4byte	.LFE139-.LFB139
 17380 0470 00000000 		.4byte	.LFB140
 17381 0474 58000000 		.4byte	.LFE140-.LFB140
 17382 0478 00000000 		.4byte	.LFB141
 17383 047c 58000000 		.4byte	.LFE141-.LFB141
 17384 0480 00000000 		.4byte	.LFB142
 17385 0484 58000000 		.4byte	.LFE142-.LFB142
 17386 0488 00000000 		.4byte	.LFB143
 17387 048c 34000000 		.4byte	.LFE143-.LFB143
 17388 0490 00000000 		.4byte	.LFB144
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 364


 17389 0494 6C000000 		.4byte	.LFE144-.LFB144
 17390 0498 00000000 		.4byte	.LFB145
 17391 049c 58000000 		.4byte	.LFE145-.LFB145
 17392 04a0 00000000 		.4byte	.LFB146
 17393 04a4 58000000 		.4byte	.LFE146-.LFB146
 17394 04a8 00000000 		.4byte	.LFB147
 17395 04ac 58000000 		.4byte	.LFE147-.LFB147
 17396 04b0 00000000 		.4byte	.LFB148
 17397 04b4 30000000 		.4byte	.LFE148-.LFB148
 17398 04b8 00000000 		.4byte	.LFB149
 17399 04bc 40000000 		.4byte	.LFE149-.LFB149
 17400 04c0 00000000 		.4byte	.LFB150
 17401 04c4 48000000 		.4byte	.LFE150-.LFB150
 17402 04c8 00000000 		.4byte	.LFB151
 17403 04cc 2C000000 		.4byte	.LFE151-.LFB151
 17404 04d0 00000000 		.4byte	.LFB152
 17405 04d4 2C000000 		.4byte	.LFE152-.LFB152
 17406 04d8 00000000 		.4byte	.LFB153
 17407 04dc 2C000000 		.4byte	.LFE153-.LFB153
 17408 04e0 00000000 		.4byte	.LFB154
 17409 04e4 2C000000 		.4byte	.LFE154-.LFB154
 17410 04e8 00000000 		.4byte	.LFB155
 17411 04ec 2C000000 		.4byte	.LFE155-.LFB155
 17412 04f0 00000000 		.4byte	.LFB156
 17413 04f4 2C000000 		.4byte	.LFE156-.LFB156
 17414 04f8 00000000 		.4byte	.LFB157
 17415 04fc 2C000000 		.4byte	.LFE157-.LFB157
 17416 0500 00000000 		.4byte	.LFB158
 17417 0504 40000000 		.4byte	.LFE158-.LFB158
 17418 0508 00000000 		.4byte	.LFB159
 17419 050c 2C000000 		.4byte	.LFE159-.LFB159
 17420 0510 00000000 		.4byte	.LFB160
 17421 0514 28000000 		.4byte	.LFE160-.LFB160
 17422 0518 00000000 		.4byte	.LFB161
 17423 051c 44000000 		.4byte	.LFE161-.LFB161
 17424 0520 00000000 		.4byte	.LFB162
 17425 0524 34000000 		.4byte	.LFE162-.LFB162
 17426 0528 00000000 		.4byte	.LFB163
 17427 052c 1C000000 		.4byte	.LFE163-.LFB163
 17428 0530 00000000 		.4byte	.LFB164
 17429 0534 1C000000 		.4byte	.LFE164-.LFB164
 17430 0538 00000000 		.4byte	.LFB165
 17431 053c 1C000000 		.4byte	.LFE165-.LFB165
 17432 0540 00000000 		.4byte	.LFB166
 17433 0544 2C000000 		.4byte	.LFE166-.LFB166
 17434 0548 00000000 		.4byte	.LFB167
 17435 054c 2C000000 		.4byte	.LFE167-.LFB167
 17436 0550 00000000 		.4byte	.LFB168
 17437 0554 2C000000 		.4byte	.LFE168-.LFB168
 17438 0558 00000000 		.4byte	.LFB169
 17439 055c 2C000000 		.4byte	.LFE169-.LFB169
 17440 0560 00000000 		.4byte	.LFB170
 17441 0564 2C000000 		.4byte	.LFE170-.LFB170
 17442 0568 00000000 		.4byte	.LFB171
 17443 056c 2C000000 		.4byte	.LFE171-.LFB171
 17444 0570 00000000 		.4byte	.LFB172
 17445 0574 2C000000 		.4byte	.LFE172-.LFB172
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 365


 17446 0578 00000000 		.4byte	.LFB173
 17447 057c 28000000 		.4byte	.LFE173-.LFB173
 17448 0580 00000000 		.4byte	.LFB174
 17449 0584 2C000000 		.4byte	.LFE174-.LFB174
 17450 0588 00000000 		.4byte	.LFB175
 17451 058c 28000000 		.4byte	.LFE175-.LFB175
 17452 0590 00000000 		.4byte	.LFB176
 17453 0594 28000000 		.4byte	.LFE176-.LFB176
 17454 0598 00000000 		.4byte	.LFB177
 17455 059c 1C000000 		.4byte	.LFE177-.LFB177
 17456 05a0 00000000 		.4byte	.LFB178
 17457 05a4 1C000000 		.4byte	.LFE178-.LFB178
 17458 05a8 00000000 		.4byte	.LFB179
 17459 05ac 1C000000 		.4byte	.LFE179-.LFB179
 17460 05b0 00000000 		.4byte	.LFB180
 17461 05b4 1C000000 		.4byte	.LFE180-.LFB180
 17462 05b8 00000000 		.4byte	.LFB181
 17463 05bc 2C000000 		.4byte	.LFE181-.LFB181
 17464 05c0 00000000 		.4byte	.LFB182
 17465 05c4 28000000 		.4byte	.LFE182-.LFB182
 17466 05c8 00000000 		.4byte	.LFB183
 17467 05cc 2C000000 		.4byte	.LFE183-.LFB183
 17468 05d0 00000000 		.4byte	.LFB184
 17469 05d4 28000000 		.4byte	.LFE184-.LFB184
 17470 05d8 00000000 		.4byte	.LFB185
 17471 05dc 2C000000 		.4byte	.LFE185-.LFB185
 17472 05e0 00000000 		.4byte	.LFB186
 17473 05e4 30000000 		.4byte	.LFE186-.LFB186
 17474 05e8 00000000 		.4byte	.LFB187
 17475 05ec 2C000000 		.4byte	.LFE187-.LFB187
 17476 05f0 00000000 		.4byte	.LFB188
 17477 05f4 2C000000 		.4byte	.LFE188-.LFB188
 17478 05f8 00000000 		.4byte	.LFB189
 17479 05fc 2C000000 		.4byte	.LFE189-.LFB189
 17480 0600 00000000 		.4byte	.LFB190
 17481 0604 2C000000 		.4byte	.LFE190-.LFB190
 17482 0608 00000000 		.4byte	.LFB191
 17483 060c 2C000000 		.4byte	.LFE191-.LFB191
 17484 0610 00000000 		.4byte	.LFB192
 17485 0614 28000000 		.4byte	.LFE192-.LFB192
 17486 0618 00000000 		.4byte	.LFB193
 17487 061c 2C000000 		.4byte	.LFE193-.LFB193
 17488 0620 00000000 		.4byte	.LFB194
 17489 0624 28000000 		.4byte	.LFE194-.LFB194
 17490 0628 00000000 		.4byte	.LFB195
 17491 062c 2C000000 		.4byte	.LFE195-.LFB195
 17492 0630 00000000 		.4byte	.LFB196
 17493 0634 28000000 		.4byte	.LFE196-.LFB196
 17494 0638 00000000 		.4byte	.LFB197
 17495 063c 2C000000 		.4byte	.LFE197-.LFB197
 17496 0640 00000000 		.4byte	.LFB198
 17497 0644 28000000 		.4byte	.LFE198-.LFB198
 17498 0648 00000000 		.4byte	.LFB199
 17499 064c 2C000000 		.4byte	.LFE199-.LFB199
 17500 0650 00000000 		.4byte	.LFB200
 17501 0654 28000000 		.4byte	.LFE200-.LFB200
 17502 0658 00000000 		.4byte	.LFB201
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 366


 17503 065c 2C000000 		.4byte	.LFE201-.LFB201
 17504 0660 00000000 		.4byte	.LFB202
 17505 0664 28000000 		.4byte	.LFE202-.LFB202
 17506 0668 00000000 		.4byte	.LFB203
 17507 066c 34000000 		.4byte	.LFE203-.LFB203
 17508 0670 00000000 		.4byte	.LFB204
 17509 0674 24000000 		.4byte	.LFE204-.LFB204
 17510 0678 00000000 		.4byte	.LFB205
 17511 067c 2C000000 		.4byte	.LFE205-.LFB205
 17512 0680 00000000 		.4byte	.LFB206
 17513 0684 28000000 		.4byte	.LFE206-.LFB206
 17514 0688 00000000 		.4byte	.LFB207
 17515 068c 2C000000 		.4byte	.LFE207-.LFB207
 17516 0690 00000000 		.4byte	.LFB208
 17517 0694 2C000000 		.4byte	.LFE208-.LFB208
 17518 0698 00000000 		.4byte	.LFB209
 17519 069c 24000000 		.4byte	.LFE209-.LFB209
 17520 06a0 00000000 		.4byte	.LFB210
 17521 06a4 28000000 		.4byte	.LFE210-.LFB210
 17522 06a8 00000000 		.4byte	.LFB211
 17523 06ac 2C000000 		.4byte	.LFE211-.LFB211
 17524 06b0 00000000 		.4byte	.LFB212
 17525 06b4 2C000000 		.4byte	.LFE212-.LFB212
 17526 06b8 00000000 		.4byte	.LFB213
 17527 06bc 2C000000 		.4byte	.LFE213-.LFB213
 17528 06c0 00000000 		.4byte	.LFB214
 17529 06c4 2C000000 		.4byte	.LFE214-.LFB214
 17530 06c8 00000000 		.4byte	.LFB215
 17531 06cc 2C000000 		.4byte	.LFE215-.LFB215
 17532 06d0 00000000 		.4byte	.LFB216
 17533 06d4 2C000000 		.4byte	.LFE216-.LFB216
 17534 06d8 00000000 		.4byte	.LFB217
 17535 06dc 28000000 		.4byte	.LFE217-.LFB217
 17536 06e0 00000000 		.4byte	.LFB218
 17537 06e4 28000000 		.4byte	.LFE218-.LFB218
 17538 06e8 00000000 		.4byte	.LFB219
 17539 06ec 28000000 		.4byte	.LFE219-.LFB219
 17540 06f0 00000000 		.4byte	.LFB220
 17541 06f4 28000000 		.4byte	.LFE220-.LFB220
 17542 06f8 00000000 		.4byte	.LFB221
 17543 06fc 28000000 		.4byte	.LFE221-.LFB221
 17544 0700 00000000 		.4byte	.LFB222
 17545 0704 28000000 		.4byte	.LFE222-.LFB222
 17546 0708 00000000 		.4byte	.LFB223
 17547 070c 34000000 		.4byte	.LFE223-.LFB223
 17548 0710 00000000 		.4byte	.LFB224
 17549 0714 28000000 		.4byte	.LFE224-.LFB224
 17550 0718 00000000 		.4byte	.LFB225
 17551 071c 34000000 		.4byte	.LFE225-.LFB225
 17552 0720 00000000 		.4byte	.LFB226
 17553 0724 28000000 		.4byte	.LFE226-.LFB226
 17554 0728 00000000 		.4byte	.LFB227
 17555 072c 34000000 		.4byte	.LFE227-.LFB227
 17556 0730 00000000 		.4byte	.LFB228
 17557 0734 28000000 		.4byte	.LFE228-.LFB228
 17558 0738 00000000 		.4byte	.LFB229
 17559 073c 34000000 		.4byte	.LFE229-.LFB229
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 367


 17560 0740 00000000 		.4byte	.LFB230
 17561 0744 28000000 		.4byte	.LFE230-.LFB230
 17562 0748 00000000 		.4byte	.LFB231
 17563 074c 34000000 		.4byte	.LFE231-.LFB231
 17564 0750 00000000 		.4byte	.LFB232
 17565 0754 28000000 		.4byte	.LFE232-.LFB232
 17566 0758 00000000 		.4byte	.LFB233
 17567 075c 34000000 		.4byte	.LFE233-.LFB233
 17568 0760 00000000 		.4byte	.LFB234
 17569 0764 28000000 		.4byte	.LFE234-.LFB234
 17570 0768 00000000 		.4byte	.LFB235
 17571 076c 2C000000 		.4byte	.LFE235-.LFB235
 17572 0770 00000000 		.4byte	.LFB236
 17573 0774 28000000 		.4byte	.LFE236-.LFB236
 17574 0778 00000000 		.4byte	.LFB237
 17575 077c 2C000000 		.4byte	.LFE237-.LFB237
 17576 0780 00000000 		.4byte	.LFB238
 17577 0784 28000000 		.4byte	.LFE238-.LFB238
 17578 0788 00000000 		.4byte	.LFB239
 17579 078c 2C000000 		.4byte	.LFE239-.LFB239
 17580 0790 00000000 		.4byte	.LFB240
 17581 0794 2C000000 		.4byte	.LFE240-.LFB240
 17582 0798 00000000 		.4byte	.LFB241
 17583 079c 2C000000 		.4byte	.LFE241-.LFB241
 17584 07a0 00000000 		.4byte	.LFB242
 17585 07a4 2C000000 		.4byte	.LFE242-.LFB242
 17586 07a8 00000000 		.4byte	.LFB243
 17587 07ac 2C000000 		.4byte	.LFE243-.LFB243
 17588 07b0 00000000 		.4byte	.LFB244
 17589 07b4 2C000000 		.4byte	.LFE244-.LFB244
 17590 07b8 00000000 		.4byte	.LFB245
 17591 07bc 2C000000 		.4byte	.LFE245-.LFB245
 17592 07c0 00000000 		.4byte	.LFB246
 17593 07c4 2C000000 		.4byte	.LFE246-.LFB246
 17594 07c8 00000000 		.4byte	.LFB247
 17595 07cc 2C000000 		.4byte	.LFE247-.LFB247
 17596 07d0 00000000 		.4byte	.LFB248
 17597 07d4 28000000 		.4byte	.LFE248-.LFB248
 17598 07d8 00000000 		.4byte	.LFB249
 17599 07dc 1C000000 		.4byte	.LFE249-.LFB249
 17600 07e0 00000000 		.4byte	.LFB250
 17601 07e4 70000000 		.4byte	.LFE250-.LFB250
 17602 07e8 00000000 		.4byte	.LFB251
 17603 07ec 28000000 		.4byte	.LFE251-.LFB251
 17604 07f0 00000000 		.4byte	.LFB252
 17605 07f4 24000000 		.4byte	.LFE252-.LFB252
 17606 07f8 00000000 		.4byte	.LFB253
 17607 07fc 28000000 		.4byte	.LFE253-.LFB253
 17608 0800 00000000 		.4byte	.LFB254
 17609 0804 34010000 		.4byte	.LFE254-.LFB254
 17610 0808 00000000 		.4byte	.LFB255
 17611 080c 24000000 		.4byte	.LFE255-.LFB255
 17612 0810 00000000 		.4byte	.LFB256
 17613 0814 28000000 		.4byte	.LFE256-.LFB256
 17614 0818 00000000 		.4byte	.LFB257
 17615 081c 24000000 		.4byte	.LFE257-.LFB257
 17616 0820 00000000 		.4byte	.LFB258
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 368


 17617 0824 28000000 		.4byte	.LFE258-.LFB258
 17618 0828 00000000 		.4byte	.LFB259
 17619 082c 70000000 		.4byte	.LFE259-.LFB259
 17620 0830 00000000 		.4byte	0
 17621 0834 00000000 		.4byte	0
 17622              		.section	.debug_ranges,"",%progbits
 17623              	.Ldebug_ranges0:
 17624 0000 00000000 		.4byte	.LFB0
 17625 0004 14000000 		.4byte	.LFE0
 17626 0008 00000000 		.4byte	.LFB1
 17627 000c 20000000 		.4byte	.LFE1
 17628 0010 00000000 		.4byte	.LFB2
 17629 0014 22000000 		.4byte	.LFE2
 17630 0018 00000000 		.4byte	.LFB3
 17631 001c 18000000 		.4byte	.LFE3
 17632 0020 00000000 		.4byte	.LFB4
 17633 0024 24000000 		.4byte	.LFE4
 17634 0028 00000000 		.4byte	.LFB5
 17635 002c 28000000 		.4byte	.LFE5
 17636 0030 00000000 		.4byte	.LFB6
 17637 0034 24000000 		.4byte	.LFE6
 17638 0038 00000000 		.4byte	.LFB7
 17639 003c 28000000 		.4byte	.LFE7
 17640 0040 00000000 		.4byte	.LFB8
 17641 0044 2C000000 		.4byte	.LFE8
 17642 0048 00000000 		.4byte	.LFB9
 17643 004c 2C000000 		.4byte	.LFE9
 17644 0050 00000000 		.4byte	.LFB10
 17645 0054 2C000000 		.4byte	.LFE10
 17646 0058 00000000 		.4byte	.LFB11
 17647 005c 2C000000 		.4byte	.LFE11
 17648 0060 00000000 		.4byte	.LFB12
 17649 0064 2C000000 		.4byte	.LFE12
 17650 0068 00000000 		.4byte	.LFB13
 17651 006c 2C000000 		.4byte	.LFE13
 17652 0070 00000000 		.4byte	.LFB14
 17653 0074 2C000000 		.4byte	.LFE14
 17654 0078 00000000 		.4byte	.LFB15
 17655 007c 28000000 		.4byte	.LFE15
 17656 0080 00000000 		.4byte	.LFB16
 17657 0084 2C000000 		.4byte	.LFE16
 17658 0088 00000000 		.4byte	.LFB17
 17659 008c 28000000 		.4byte	.LFE17
 17660 0090 00000000 		.4byte	.LFB18
 17661 0094 2C000000 		.4byte	.LFE18
 17662 0098 00000000 		.4byte	.LFB19
 17663 009c 28000000 		.4byte	.LFE19
 17664 00a0 00000000 		.4byte	.LFB20
 17665 00a4 2C000000 		.4byte	.LFE20
 17666 00a8 00000000 		.4byte	.LFB21
 17667 00ac 2C000000 		.4byte	.LFE21
 17668 00b0 00000000 		.4byte	.LFB22
 17669 00b4 2C000000 		.4byte	.LFE22
 17670 00b8 00000000 		.4byte	.LFB23
 17671 00bc 2C000000 		.4byte	.LFE23
 17672 00c0 00000000 		.4byte	.LFB24
 17673 00c4 24000000 		.4byte	.LFE24
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 369


 17674 00c8 00000000 		.4byte	.LFB25
 17675 00cc 28000000 		.4byte	.LFE25
 17676 00d0 00000000 		.4byte	.LFB26
 17677 00d4 24000000 		.4byte	.LFE26
 17678 00d8 00000000 		.4byte	.LFB27
 17679 00dc 28000000 		.4byte	.LFE27
 17680 00e0 00000000 		.4byte	.LFB28
 17681 00e4 24000000 		.4byte	.LFE28
 17682 00e8 00000000 		.4byte	.LFB29
 17683 00ec 28000000 		.4byte	.LFE29
 17684 00f0 00000000 		.4byte	.LFB30
 17685 00f4 24000000 		.4byte	.LFE30
 17686 00f8 00000000 		.4byte	.LFB31
 17687 00fc 28000000 		.4byte	.LFE31
 17688 0100 00000000 		.4byte	.LFB32
 17689 0104 24000000 		.4byte	.LFE32
 17690 0108 00000000 		.4byte	.LFB33
 17691 010c 28000000 		.4byte	.LFE33
 17692 0110 00000000 		.4byte	.LFB34
 17693 0114 24000000 		.4byte	.LFE34
 17694 0118 00000000 		.4byte	.LFB35
 17695 011c 28000000 		.4byte	.LFE35
 17696 0120 00000000 		.4byte	.LFB36
 17697 0124 2C000000 		.4byte	.LFE36
 17698 0128 00000000 		.4byte	.LFB37
 17699 012c 28000000 		.4byte	.LFE37
 17700 0130 00000000 		.4byte	.LFB38
 17701 0134 2C000000 		.4byte	.LFE38
 17702 0138 00000000 		.4byte	.LFB39
 17703 013c 28000000 		.4byte	.LFE39
 17704 0140 00000000 		.4byte	.LFB40
 17705 0144 2C000000 		.4byte	.LFE40
 17706 0148 00000000 		.4byte	.LFB41
 17707 014c 28000000 		.4byte	.LFE41
 17708 0150 00000000 		.4byte	.LFB42
 17709 0154 2C000000 		.4byte	.LFE42
 17710 0158 00000000 		.4byte	.LFB43
 17711 015c 28000000 		.4byte	.LFE43
 17712 0160 00000000 		.4byte	.LFB44
 17713 0164 2C000000 		.4byte	.LFE44
 17714 0168 00000000 		.4byte	.LFB45
 17715 016c 28000000 		.4byte	.LFE45
 17716 0170 00000000 		.4byte	.LFB46
 17717 0174 2C000000 		.4byte	.LFE46
 17718 0178 00000000 		.4byte	.LFB47
 17719 017c 28000000 		.4byte	.LFE47
 17720 0180 00000000 		.4byte	.LFB48
 17721 0184 2C000000 		.4byte	.LFE48
 17722 0188 00000000 		.4byte	.LFB49
 17723 018c 28000000 		.4byte	.LFE49
 17724 0190 00000000 		.4byte	.LFB50
 17725 0194 2C000000 		.4byte	.LFE50
 17726 0198 00000000 		.4byte	.LFB51
 17727 019c 28000000 		.4byte	.LFE51
 17728 01a0 00000000 		.4byte	.LFB52
 17729 01a4 2C000000 		.4byte	.LFE52
 17730 01a8 00000000 		.4byte	.LFB53
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 370


 17731 01ac 28000000 		.4byte	.LFE53
 17732 01b0 00000000 		.4byte	.LFB54
 17733 01b4 2C000000 		.4byte	.LFE54
 17734 01b8 00000000 		.4byte	.LFB55
 17735 01bc 28000000 		.4byte	.LFE55
 17736 01c0 00000000 		.4byte	.LFB56
 17737 01c4 2C000000 		.4byte	.LFE56
 17738 01c8 00000000 		.4byte	.LFB57
 17739 01cc 28000000 		.4byte	.LFE57
 17740 01d0 00000000 		.4byte	.LFB58
 17741 01d4 2C000000 		.4byte	.LFE58
 17742 01d8 00000000 		.4byte	.LFB59
 17743 01dc 28000000 		.4byte	.LFE59
 17744 01e0 00000000 		.4byte	.LFB60
 17745 01e4 2C000000 		.4byte	.LFE60
 17746 01e8 00000000 		.4byte	.LFB61
 17747 01ec 2C000000 		.4byte	.LFE61
 17748 01f0 00000000 		.4byte	.LFB62
 17749 01f4 48000000 		.4byte	.LFE62
 17750 01f8 00000000 		.4byte	.LFB63
 17751 01fc 48000000 		.4byte	.LFE63
 17752 0200 00000000 		.4byte	.LFB64
 17753 0204 48000000 		.4byte	.LFE64
 17754 0208 00000000 		.4byte	.LFB65
 17755 020c 48000000 		.4byte	.LFE65
 17756 0210 00000000 		.4byte	.LFB66
 17757 0214 50000000 		.4byte	.LFE66
 17758 0218 00000000 		.4byte	.LFB67
 17759 021c 48000000 		.4byte	.LFE67
 17760 0220 00000000 		.4byte	.LFB68
 17761 0224 50000000 		.4byte	.LFE68
 17762 0228 00000000 		.4byte	.LFB69
 17763 022c 48000000 		.4byte	.LFE69
 17764 0230 00000000 		.4byte	.LFB70
 17765 0234 50000000 		.4byte	.LFE70
 17766 0238 00000000 		.4byte	.LFB71
 17767 023c 48000000 		.4byte	.LFE71
 17768 0240 00000000 		.4byte	.LFB72
 17769 0244 50000000 		.4byte	.LFE72
 17770 0248 00000000 		.4byte	.LFB73
 17771 024c 48000000 		.4byte	.LFE73
 17772 0250 00000000 		.4byte	.LFB74
 17773 0254 4C000000 		.4byte	.LFE74
 17774 0258 00000000 		.4byte	.LFB75
 17775 025c 4C000000 		.4byte	.LFE75
 17776 0260 00000000 		.4byte	.LFB76
 17777 0264 24000000 		.4byte	.LFE76
 17778 0268 00000000 		.4byte	.LFB77
 17779 026c 28000000 		.4byte	.LFE77
 17780 0270 00000000 		.4byte	.LFB78
 17781 0274 24000000 		.4byte	.LFE78
 17782 0278 00000000 		.4byte	.LFB79
 17783 027c 28000000 		.4byte	.LFE79
 17784 0280 00000000 		.4byte	.LFB80
 17785 0284 28000000 		.4byte	.LFE80
 17786 0288 00000000 		.4byte	.LFB81
 17787 028c 2C000000 		.4byte	.LFE81
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 371


 17788 0290 00000000 		.4byte	.LFB82
 17789 0294 28000000 		.4byte	.LFE82
 17790 0298 00000000 		.4byte	.LFB83
 17791 029c 2C000000 		.4byte	.LFE83
 17792 02a0 00000000 		.4byte	.LFB84
 17793 02a4 28000000 		.4byte	.LFE84
 17794 02a8 00000000 		.4byte	.LFB85
 17795 02ac 2C000000 		.4byte	.LFE85
 17796 02b0 00000000 		.4byte	.LFB86
 17797 02b4 28000000 		.4byte	.LFE86
 17798 02b8 00000000 		.4byte	.LFB87
 17799 02bc 2C000000 		.4byte	.LFE87
 17800 02c0 00000000 		.4byte	.LFB88
 17801 02c4 2C000000 		.4byte	.LFE88
 17802 02c8 00000000 		.4byte	.LFB89
 17803 02cc 24000000 		.4byte	.LFE89
 17804 02d0 00000000 		.4byte	.LFB90
 17805 02d4 2C000000 		.4byte	.LFE90
 17806 02d8 00000000 		.4byte	.LFB91
 17807 02dc 2C000000 		.4byte	.LFE91
 17808 02e0 00000000 		.4byte	.LFB92
 17809 02e4 2C000000 		.4byte	.LFE92
 17810 02e8 00000000 		.4byte	.LFB93
 17811 02ec 2C000000 		.4byte	.LFE93
 17812 02f0 00000000 		.4byte	.LFB94
 17813 02f4 2C000000 		.4byte	.LFE94
 17814 02f8 00000000 		.4byte	.LFB95
 17815 02fc 2C000000 		.4byte	.LFE95
 17816 0300 00000000 		.4byte	.LFB96
 17817 0304 2C000000 		.4byte	.LFE96
 17818 0308 00000000 		.4byte	.LFB97
 17819 030c 2C000000 		.4byte	.LFE97
 17820 0310 00000000 		.4byte	.LFB98
 17821 0314 2C000000 		.4byte	.LFE98
 17822 0318 00000000 		.4byte	.LFB99
 17823 031c 28000000 		.4byte	.LFE99
 17824 0320 00000000 		.4byte	.LFB100
 17825 0324 2C000000 		.4byte	.LFE100
 17826 0328 00000000 		.4byte	.LFB101
 17827 032c 28000000 		.4byte	.LFE101
 17828 0330 00000000 		.4byte	.LFB102
 17829 0334 2C000000 		.4byte	.LFE102
 17830 0338 00000000 		.4byte	.LFB103
 17831 033c 28000000 		.4byte	.LFE103
 17832 0340 00000000 		.4byte	.LFB104
 17833 0344 2C000000 		.4byte	.LFE104
 17834 0348 00000000 		.4byte	.LFB105
 17835 034c 28000000 		.4byte	.LFE105
 17836 0350 00000000 		.4byte	.LFB106
 17837 0354 2C000000 		.4byte	.LFE106
 17838 0358 00000000 		.4byte	.LFB107
 17839 035c 28000000 		.4byte	.LFE107
 17840 0360 00000000 		.4byte	.LFB108
 17841 0364 2C000000 		.4byte	.LFE108
 17842 0368 00000000 		.4byte	.LFB109
 17843 036c 28000000 		.4byte	.LFE109
 17844 0370 00000000 		.4byte	.LFB110
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 372


 17845 0374 2C000000 		.4byte	.LFE110
 17846 0378 00000000 		.4byte	.LFB111
 17847 037c 28000000 		.4byte	.LFE111
 17848 0380 00000000 		.4byte	.LFB112
 17849 0384 2C000000 		.4byte	.LFE112
 17850 0388 00000000 		.4byte	.LFB113
 17851 038c 28000000 		.4byte	.LFE113
 17852 0390 00000000 		.4byte	.LFB114
 17853 0394 24000000 		.4byte	.LFE114
 17854 0398 00000000 		.4byte	.LFB115
 17855 039c 28000000 		.4byte	.LFE115
 17856 03a0 00000000 		.4byte	.LFB116
 17857 03a4 2C000000 		.4byte	.LFE116
 17858 03a8 00000000 		.4byte	.LFB117
 17859 03ac 28000000 		.4byte	.LFE117
 17860 03b0 00000000 		.4byte	.LFB118
 17861 03b4 2C000000 		.4byte	.LFE118
 17862 03b8 00000000 		.4byte	.LFB119
 17863 03bc 28000000 		.4byte	.LFE119
 17864 03c0 00000000 		.4byte	.LFB120
 17865 03c4 2C000000 		.4byte	.LFE120
 17866 03c8 00000000 		.4byte	.LFB121
 17867 03cc 28000000 		.4byte	.LFE121
 17868 03d0 00000000 		.4byte	.LFB122
 17869 03d4 2C000000 		.4byte	.LFE122
 17870 03d8 00000000 		.4byte	.LFB123
 17871 03dc 28000000 		.4byte	.LFE123
 17872 03e0 00000000 		.4byte	.LFB124
 17873 03e4 2C000000 		.4byte	.LFE124
 17874 03e8 00000000 		.4byte	.LFB125
 17875 03ec 28000000 		.4byte	.LFE125
 17876 03f0 00000000 		.4byte	.LFB126
 17877 03f4 2C000000 		.4byte	.LFE126
 17878 03f8 00000000 		.4byte	.LFB127
 17879 03fc 28000000 		.4byte	.LFE127
 17880 0400 00000000 		.4byte	.LFB128
 17881 0404 24000000 		.4byte	.LFE128
 17882 0408 00000000 		.4byte	.LFB129
 17883 040c 2C000000 		.4byte	.LFE129
 17884 0410 00000000 		.4byte	.LFB130
 17885 0414 2C000000 		.4byte	.LFE130
 17886 0418 00000000 		.4byte	.LFB131
 17887 041c 2C000000 		.4byte	.LFE131
 17888 0420 00000000 		.4byte	.LFB132
 17889 0424 2C000000 		.4byte	.LFE132
 17890 0428 00000000 		.4byte	.LFB133
 17891 042c 2C000000 		.4byte	.LFE133
 17892 0430 00000000 		.4byte	.LFB134
 17893 0434 2C000000 		.4byte	.LFE134
 17894 0438 00000000 		.4byte	.LFB135
 17895 043c EC000000 		.4byte	.LFE135
 17896 0440 00000000 		.4byte	.LFB136
 17897 0444 04010000 		.4byte	.LFE136
 17898 0448 00000000 		.4byte	.LFB137
 17899 044c B0000000 		.4byte	.LFE137
 17900 0450 00000000 		.4byte	.LFB138
 17901 0454 C8000000 		.4byte	.LFE138
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 373


 17902 0458 00000000 		.4byte	.LFB139
 17903 045c 6C000000 		.4byte	.LFE139
 17904 0460 00000000 		.4byte	.LFB140
 17905 0464 58000000 		.4byte	.LFE140
 17906 0468 00000000 		.4byte	.LFB141
 17907 046c 58000000 		.4byte	.LFE141
 17908 0470 00000000 		.4byte	.LFB142
 17909 0474 58000000 		.4byte	.LFE142
 17910 0478 00000000 		.4byte	.LFB143
 17911 047c 34000000 		.4byte	.LFE143
 17912 0480 00000000 		.4byte	.LFB144
 17913 0484 6C000000 		.4byte	.LFE144
 17914 0488 00000000 		.4byte	.LFB145
 17915 048c 58000000 		.4byte	.LFE145
 17916 0490 00000000 		.4byte	.LFB146
 17917 0494 58000000 		.4byte	.LFE146
 17918 0498 00000000 		.4byte	.LFB147
 17919 049c 58000000 		.4byte	.LFE147
 17920 04a0 00000000 		.4byte	.LFB148
 17921 04a4 30000000 		.4byte	.LFE148
 17922 04a8 00000000 		.4byte	.LFB149
 17923 04ac 40000000 		.4byte	.LFE149
 17924 04b0 00000000 		.4byte	.LFB150
 17925 04b4 48000000 		.4byte	.LFE150
 17926 04b8 00000000 		.4byte	.LFB151
 17927 04bc 2C000000 		.4byte	.LFE151
 17928 04c0 00000000 		.4byte	.LFB152
 17929 04c4 2C000000 		.4byte	.LFE152
 17930 04c8 00000000 		.4byte	.LFB153
 17931 04cc 2C000000 		.4byte	.LFE153
 17932 04d0 00000000 		.4byte	.LFB154
 17933 04d4 2C000000 		.4byte	.LFE154
 17934 04d8 00000000 		.4byte	.LFB155
 17935 04dc 2C000000 		.4byte	.LFE155
 17936 04e0 00000000 		.4byte	.LFB156
 17937 04e4 2C000000 		.4byte	.LFE156
 17938 04e8 00000000 		.4byte	.LFB157
 17939 04ec 2C000000 		.4byte	.LFE157
 17940 04f0 00000000 		.4byte	.LFB158
 17941 04f4 40000000 		.4byte	.LFE158
 17942 04f8 00000000 		.4byte	.LFB159
 17943 04fc 2C000000 		.4byte	.LFE159
 17944 0500 00000000 		.4byte	.LFB160
 17945 0504 28000000 		.4byte	.LFE160
 17946 0508 00000000 		.4byte	.LFB161
 17947 050c 44000000 		.4byte	.LFE161
 17948 0510 00000000 		.4byte	.LFB162
 17949 0514 34000000 		.4byte	.LFE162
 17950 0518 00000000 		.4byte	.LFB163
 17951 051c 1C000000 		.4byte	.LFE163
 17952 0520 00000000 		.4byte	.LFB164
 17953 0524 1C000000 		.4byte	.LFE164
 17954 0528 00000000 		.4byte	.LFB165
 17955 052c 1C000000 		.4byte	.LFE165
 17956 0530 00000000 		.4byte	.LFB166
 17957 0534 2C000000 		.4byte	.LFE166
 17958 0538 00000000 		.4byte	.LFB167
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 374


 17959 053c 2C000000 		.4byte	.LFE167
 17960 0540 00000000 		.4byte	.LFB168
 17961 0544 2C000000 		.4byte	.LFE168
 17962 0548 00000000 		.4byte	.LFB169
 17963 054c 2C000000 		.4byte	.LFE169
 17964 0550 00000000 		.4byte	.LFB170
 17965 0554 2C000000 		.4byte	.LFE170
 17966 0558 00000000 		.4byte	.LFB171
 17967 055c 2C000000 		.4byte	.LFE171
 17968 0560 00000000 		.4byte	.LFB172
 17969 0564 2C000000 		.4byte	.LFE172
 17970 0568 00000000 		.4byte	.LFB173
 17971 056c 28000000 		.4byte	.LFE173
 17972 0570 00000000 		.4byte	.LFB174
 17973 0574 2C000000 		.4byte	.LFE174
 17974 0578 00000000 		.4byte	.LFB175
 17975 057c 28000000 		.4byte	.LFE175
 17976 0580 00000000 		.4byte	.LFB176
 17977 0584 28000000 		.4byte	.LFE176
 17978 0588 00000000 		.4byte	.LFB177
 17979 058c 1C000000 		.4byte	.LFE177
 17980 0590 00000000 		.4byte	.LFB178
 17981 0594 1C000000 		.4byte	.LFE178
 17982 0598 00000000 		.4byte	.LFB179
 17983 059c 1C000000 		.4byte	.LFE179
 17984 05a0 00000000 		.4byte	.LFB180
 17985 05a4 1C000000 		.4byte	.LFE180
 17986 05a8 00000000 		.4byte	.LFB181
 17987 05ac 2C000000 		.4byte	.LFE181
 17988 05b0 00000000 		.4byte	.LFB182
 17989 05b4 28000000 		.4byte	.LFE182
 17990 05b8 00000000 		.4byte	.LFB183
 17991 05bc 2C000000 		.4byte	.LFE183
 17992 05c0 00000000 		.4byte	.LFB184
 17993 05c4 28000000 		.4byte	.LFE184
 17994 05c8 00000000 		.4byte	.LFB185
 17995 05cc 2C000000 		.4byte	.LFE185
 17996 05d0 00000000 		.4byte	.LFB186
 17997 05d4 30000000 		.4byte	.LFE186
 17998 05d8 00000000 		.4byte	.LFB187
 17999 05dc 2C000000 		.4byte	.LFE187
 18000 05e0 00000000 		.4byte	.LFB188
 18001 05e4 2C000000 		.4byte	.LFE188
 18002 05e8 00000000 		.4byte	.LFB189
 18003 05ec 2C000000 		.4byte	.LFE189
 18004 05f0 00000000 		.4byte	.LFB190
 18005 05f4 2C000000 		.4byte	.LFE190
 18006 05f8 00000000 		.4byte	.LFB191
 18007 05fc 2C000000 		.4byte	.LFE191
 18008 0600 00000000 		.4byte	.LFB192
 18009 0604 28000000 		.4byte	.LFE192
 18010 0608 00000000 		.4byte	.LFB193
 18011 060c 2C000000 		.4byte	.LFE193
 18012 0610 00000000 		.4byte	.LFB194
 18013 0614 28000000 		.4byte	.LFE194
 18014 0618 00000000 		.4byte	.LFB195
 18015 061c 2C000000 		.4byte	.LFE195
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 375


 18016 0620 00000000 		.4byte	.LFB196
 18017 0624 28000000 		.4byte	.LFE196
 18018 0628 00000000 		.4byte	.LFB197
 18019 062c 2C000000 		.4byte	.LFE197
 18020 0630 00000000 		.4byte	.LFB198
 18021 0634 28000000 		.4byte	.LFE198
 18022 0638 00000000 		.4byte	.LFB199
 18023 063c 2C000000 		.4byte	.LFE199
 18024 0640 00000000 		.4byte	.LFB200
 18025 0644 28000000 		.4byte	.LFE200
 18026 0648 00000000 		.4byte	.LFB201
 18027 064c 2C000000 		.4byte	.LFE201
 18028 0650 00000000 		.4byte	.LFB202
 18029 0654 28000000 		.4byte	.LFE202
 18030 0658 00000000 		.4byte	.LFB203
 18031 065c 34000000 		.4byte	.LFE203
 18032 0660 00000000 		.4byte	.LFB204
 18033 0664 24000000 		.4byte	.LFE204
 18034 0668 00000000 		.4byte	.LFB205
 18035 066c 2C000000 		.4byte	.LFE205
 18036 0670 00000000 		.4byte	.LFB206
 18037 0674 28000000 		.4byte	.LFE206
 18038 0678 00000000 		.4byte	.LFB207
 18039 067c 2C000000 		.4byte	.LFE207
 18040 0680 00000000 		.4byte	.LFB208
 18041 0684 2C000000 		.4byte	.LFE208
 18042 0688 00000000 		.4byte	.LFB209
 18043 068c 24000000 		.4byte	.LFE209
 18044 0690 00000000 		.4byte	.LFB210
 18045 0694 28000000 		.4byte	.LFE210
 18046 0698 00000000 		.4byte	.LFB211
 18047 069c 2C000000 		.4byte	.LFE211
 18048 06a0 00000000 		.4byte	.LFB212
 18049 06a4 2C000000 		.4byte	.LFE212
 18050 06a8 00000000 		.4byte	.LFB213
 18051 06ac 2C000000 		.4byte	.LFE213
 18052 06b0 00000000 		.4byte	.LFB214
 18053 06b4 2C000000 		.4byte	.LFE214
 18054 06b8 00000000 		.4byte	.LFB215
 18055 06bc 2C000000 		.4byte	.LFE215
 18056 06c0 00000000 		.4byte	.LFB216
 18057 06c4 2C000000 		.4byte	.LFE216
 18058 06c8 00000000 		.4byte	.LFB217
 18059 06cc 28000000 		.4byte	.LFE217
 18060 06d0 00000000 		.4byte	.LFB218
 18061 06d4 28000000 		.4byte	.LFE218
 18062 06d8 00000000 		.4byte	.LFB219
 18063 06dc 28000000 		.4byte	.LFE219
 18064 06e0 00000000 		.4byte	.LFB220
 18065 06e4 28000000 		.4byte	.LFE220
 18066 06e8 00000000 		.4byte	.LFB221
 18067 06ec 28000000 		.4byte	.LFE221
 18068 06f0 00000000 		.4byte	.LFB222
 18069 06f4 28000000 		.4byte	.LFE222
 18070 06f8 00000000 		.4byte	.LFB223
 18071 06fc 34000000 		.4byte	.LFE223
 18072 0700 00000000 		.4byte	.LFB224
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 376


 18073 0704 28000000 		.4byte	.LFE224
 18074 0708 00000000 		.4byte	.LFB225
 18075 070c 34000000 		.4byte	.LFE225
 18076 0710 00000000 		.4byte	.LFB226
 18077 0714 28000000 		.4byte	.LFE226
 18078 0718 00000000 		.4byte	.LFB227
 18079 071c 34000000 		.4byte	.LFE227
 18080 0720 00000000 		.4byte	.LFB228
 18081 0724 28000000 		.4byte	.LFE228
 18082 0728 00000000 		.4byte	.LFB229
 18083 072c 34000000 		.4byte	.LFE229
 18084 0730 00000000 		.4byte	.LFB230
 18085 0734 28000000 		.4byte	.LFE230
 18086 0738 00000000 		.4byte	.LFB231
 18087 073c 34000000 		.4byte	.LFE231
 18088 0740 00000000 		.4byte	.LFB232
 18089 0744 28000000 		.4byte	.LFE232
 18090 0748 00000000 		.4byte	.LFB233
 18091 074c 34000000 		.4byte	.LFE233
 18092 0750 00000000 		.4byte	.LFB234
 18093 0754 28000000 		.4byte	.LFE234
 18094 0758 00000000 		.4byte	.LFB235
 18095 075c 2C000000 		.4byte	.LFE235
 18096 0760 00000000 		.4byte	.LFB236
 18097 0764 28000000 		.4byte	.LFE236
 18098 0768 00000000 		.4byte	.LFB237
 18099 076c 2C000000 		.4byte	.LFE237
 18100 0770 00000000 		.4byte	.LFB238
 18101 0774 28000000 		.4byte	.LFE238
 18102 0778 00000000 		.4byte	.LFB239
 18103 077c 2C000000 		.4byte	.LFE239
 18104 0780 00000000 		.4byte	.LFB240
 18105 0784 2C000000 		.4byte	.LFE240
 18106 0788 00000000 		.4byte	.LFB241
 18107 078c 2C000000 		.4byte	.LFE241
 18108 0790 00000000 		.4byte	.LFB242
 18109 0794 2C000000 		.4byte	.LFE242
 18110 0798 00000000 		.4byte	.LFB243
 18111 079c 2C000000 		.4byte	.LFE243
 18112 07a0 00000000 		.4byte	.LFB244
 18113 07a4 2C000000 		.4byte	.LFE244
 18114 07a8 00000000 		.4byte	.LFB245
 18115 07ac 2C000000 		.4byte	.LFE245
 18116 07b0 00000000 		.4byte	.LFB246
 18117 07b4 2C000000 		.4byte	.LFE246
 18118 07b8 00000000 		.4byte	.LFB247
 18119 07bc 2C000000 		.4byte	.LFE247
 18120 07c0 00000000 		.4byte	.LFB248
 18121 07c4 28000000 		.4byte	.LFE248
 18122 07c8 00000000 		.4byte	.LFB249
 18123 07cc 1C000000 		.4byte	.LFE249
 18124 07d0 00000000 		.4byte	.LFB250
 18125 07d4 70000000 		.4byte	.LFE250
 18126 07d8 00000000 		.4byte	.LFB251
 18127 07dc 28000000 		.4byte	.LFE251
 18128 07e0 00000000 		.4byte	.LFB252
 18129 07e4 24000000 		.4byte	.LFE252
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 377


 18130 07e8 00000000 		.4byte	.LFB253
 18131 07ec 28000000 		.4byte	.LFE253
 18132 07f0 00000000 		.4byte	.LFB254
 18133 07f4 34010000 		.4byte	.LFE254
 18134 07f8 00000000 		.4byte	.LFB255
 18135 07fc 24000000 		.4byte	.LFE255
 18136 0800 00000000 		.4byte	.LFB256
 18137 0804 28000000 		.4byte	.LFE256
 18138 0808 00000000 		.4byte	.LFB257
 18139 080c 24000000 		.4byte	.LFE257
 18140 0810 00000000 		.4byte	.LFB258
 18141 0814 28000000 		.4byte	.LFE258
 18142 0818 00000000 		.4byte	.LFB259
 18143 081c 70000000 		.4byte	.LFE259
 18144 0820 00000000 		.4byte	0
 18145 0824 00000000 		.4byte	0
 18146              		.section	.debug_line,"",%progbits
 18147              	.Ldebug_line0:
 18148 0000 A0140000 		.section	.debug_str,"MS",%progbits,1
 18148      0200FC00 
 18148      00000201 
 18148      FB0E0D00 
 18148      01010101 
 18149              	.LASF136:
 18150 0000 64726976 		.ascii	"drive\000"
 18150      6500
 18151              	.LASF312:
 18152 0006 64657641 		.ascii	"devAddr\000"
 18152      64647200 
 18153              	.LASF125:
 18154 000e 4D505536 		.ascii	"MPU6050_getSlave4IsDone\000"
 18154      3035305F 
 18154      67657453 
 18154      6C617665 
 18154      34497344 
 18155              	.LASF139:
 18156 0026 6C617463 		.ascii	"latch\000"
 18156      6800
 18157              	.LASF94:
 18158 002c 4D505536 		.ascii	"MPU6050_getSlaveAddress\000"
 18158      3035305F 
 18158      67657453 
 18158      6C617665 
 18158      41646472 
 18159              	.LASF23:
 18160 0044 4D505536 		.ascii	"MPU6050_getAuxVDDIOLevel\000"
 18160      3035305F 
 18160      67657441 
 18160      75785644 
 18160      44494F4C 
 18161              	.LASF29:
 18162 005d 4D505536 		.ascii	"MPU6050_setRate\000"
 18162      3035305F 
 18162      73657452 
 18162      61746500 
 18163              	.LASF300:
 18164 006d 4D505536 		.ascii	"MPU6050_readMemoryByte\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 378


 18164      3035305F 
 18164      72656164 
 18164      4D656D6F 
 18164      72794279 
 18165              	.LASF127:
 18166 0084 4D505536 		.ascii	"MPU6050_getSlave4Nack\000"
 18166      3035305F 
 18166      67657453 
 18166      6C617665 
 18166      344E6163 
 18167              	.LASF75:
 18168 009a 4D505536 		.ascii	"MPU6050_setAccelFIFOEnabled\000"
 18168      3035305F 
 18168      73657441 
 18168      6363656C 
 18168      4649464F 
 18169              	.LASF294:
 18170 00b6 4D505536 		.ascii	"MPU6050_resetDMP\000"
 18170      3035305F 
 18170      72657365 
 18170      74444D50 
 18170      00
 18171              	.LASF232:
 18172 00c7 4D505536 		.ascii	"MPU6050_setWakeFrequency\000"
 18172      3035305F 
 18172      73657457 
 18172      616B6546 
 18172      72657175 
 18173              	.LASF226:
 18174 00e0 4D505536 		.ascii	"MPU6050_getTempSensorEnabled\000"
 18174      3035305F 
 18174      67657454 
 18174      656D7053 
 18174      656E736F 
 18175              	.LASF176:
 18176 00fd 4D505536 		.ascii	"MPU6050_getAcceleration\000"
 18176      3035305F 
 18176      67657441 
 18176      6363656C 
 18176      65726174 
 18177              	.LASF270:
 18178 0115 4D505536 		.ascii	"MPU6050_getYAccelOffset\000"
 18178      3035305F 
 18178      67657459 
 18178      41636365 
 18178      6C4F6666 
 18179              	.LASF216:
 18180 012d 4D505536 		.ascii	"MPU6050_setI2CMasterModeEnabled\000"
 18180      3035305F 
 18180      73657449 
 18180      32434D61 
 18180      73746572 
 18181              	.LASF257:
 18182 014d 4D505536 		.ascii	"MPU6050_getYGyroOffset\000"
 18182      3035305F 
 18182      67657459 
 18182      4779726F 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 379


 18182      4F666673 
 18183              	.LASF1:
 18184 0164 5F5F7569 		.ascii	"__uint8_t\000"
 18184      6E74385F 
 18184      7400
 18185              	.LASF224:
 18186 016e 4D505536 		.ascii	"MPU6050_getWakeCycleEnabled\000"
 18186      3035305F 
 18186      67657457 
 18186      616B6543 
 18186      79636C65 
 18187              	.LASF220:
 18188 018a 4D505536 		.ascii	"MPU6050_resetSensors\000"
 18188      3035305F 
 18188      72657365 
 18188      7453656E 
 18188      736F7273 
 18189              	.LASF105:
 18190 019f 4D505536 		.ascii	"MPU6050_getSlaveDataLength\000"
 18190      3035305F 
 18190      67657453 
 18190      6C617665 
 18190      44617461 
 18191              	.LASF221:
 18192 01ba 4D505536 		.ascii	"MPU6050_reset\000"
 18192      3035305F 
 18192      72657365 
 18192      7400
 18193              	.LASF196:
 18194 01c8 4D505536 		.ascii	"MPU6050_getZPosMotionDetected\000"
 18194      3035305F 
 18194      6765745A 
 18194      506F734D 
 18194      6F74696F 
 18195              	.LASF279:
 18196 01e6 4D505536 		.ascii	"MPU6050_setZGyroOffsetUser\000"
 18196      3035305F 
 18196      7365745A 
 18196      4779726F 
 18196      4F666673 
 18197              	.LASF280:
 18198 0201 4D505536 		.ascii	"MPU6050_getIntPLLReadyEnabled\000"
 18198      3035305F 
 18198      67657449 
 18198      6E74504C 
 18198      4C526561 
 18199              	.LASF71:
 18200 021f 4D505536 		.ascii	"MPU6050_setYGyroFIFOEnabled\000"
 18200      3035305F 
 18200      73657459 
 18200      4779726F 
 18200      4649464F 
 18201              	.LASF116:
 18202 023b 4D505536 		.ascii	"MPU6050_getSlave4InterruptEnabled\000"
 18202      3035305F 
 18202      67657453 
 18202      6C617665 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 380


 18202      34496E74 
 18203              	.LASF19:
 18204 025d 4D505536 		.ascii	"MPU6050_init\000"
 18204      3035305F 
 18204      696E6974 
 18204      00
 18205              	.LASF237:
 18206 026a 4D505536 		.ascii	"MPU6050_setStandbyYAccelEnabled\000"
 18206      3035305F 
 18206      73657453 
 18206      74616E64 
 18206      62795941 
 18207              	.LASF84:
 18208 028a 4D505536 		.ascii	"MPU6050_getWaitForExternalSensorEnabled\000"
 18208      3035305F 
 18208      67657457 
 18208      61697446 
 18208      6F724578 
 18209              	.LASF12:
 18210 02b2 6C6F6E67 		.ascii	"long long unsigned int\000"
 18210      206C6F6E 
 18210      6720756E 
 18210      7369676E 
 18210      65642069 
 18211              	.LASF66:
 18212 02c9 4D505536 		.ascii	"MPU6050_getTempFIFOEnabled\000"
 18212      3035305F 
 18212      67657454 
 18212      656D7046 
 18212      49464F45 
 18213              	.LASF163:
 18214 02e4 4D505536 		.ascii	"MPU6050_getIntDataReadyEnabled\000"
 18214      3035305F 
 18214      67657449 
 18214      6E744461 
 18214      74615265 
 18215              	.LASF215:
 18216 0303 4D505536 		.ascii	"MPU6050_getI2CMasterModeEnabled\000"
 18216      3035305F 
 18216      67657449 
 18216      32434D61 
 18216      73746572 
 18217              	.LASF99:
 18218 0323 4D505536 		.ascii	"MPU6050_getSlaveWordByteSwap\000"
 18218      3035305F 
 18218      67657453 
 18218      6C617665 
 18218      576F7264 
 18219              	.LASF191:
 18220 0340 4D505536 		.ascii	"MPU6050_getXNegMotionDetected\000"
 18220      3035305F 
 18220      67657458 
 18220      4E65674D 
 18220      6F74696F 
 18221              	.LASF189:
 18222 035e 4D505536 		.ascii	"MPU6050_getExternalSensorWord\000"
 18222      3035305F 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 381


 18222      67657445 
 18222      78746572 
 18222      6E616C53 
 18223              	.LASF158:
 18224 037c 4D505536 		.ascii	"MPU6050_setIntZeroMotionEnabled\000"
 18224      3035305F 
 18224      73657449 
 18224      6E745A65 
 18224      726F4D6F 
 18225              	.LASF0:
 18226 039c 5F5F696E 		.ascii	"__int8_t\000"
 18226      74385F74 
 18226      00
 18227              	.LASF228:
 18228 03a5 4D505536 		.ascii	"MPU6050_getClockSource\000"
 18228      3035305F 
 18228      67657443 
 18228      6C6F636B 
 18228      536F7572 
 18229              	.LASF298:
 18230 03bc 75736572 		.ascii	"userBank\000"
 18230      42616E6B 
 18230      00
 18231              	.LASF233:
 18232 03c5 66726571 		.ascii	"frequency\000"
 18232      75656E63 
 18232      7900
 18233              	.LASF83:
 18234 03cf 4D505536 		.ascii	"MPU6050_setMultiMasterEnabled\000"
 18234      3035305F 
 18234      7365744D 
 18234      756C7469 
 18234      4D617374 
 18235              	.LASF76:
 18236 03ed 4D505536 		.ascii	"MPU6050_getSlave2FIFOEnabled\000"
 18236      3035305F 
 18236      67657453 
 18236      6C617665 
 18236      32464946 
 18237              	.LASF217:
 18238 040a 4D505536 		.ascii	"MPU6050_switchSPIEnabled\000"
 18238      3035305F 
 18238      73776974 
 18238      63685350 
 18238      49456E61 
 18239              	.LASF316:
 18240 0423 433A5C55 		.ascii	"C:\\Users\\Sebas\\Desktop\\MPU-6050-master\\Example"
 18240      73657273 
 18240      5C536562 
 18240      61735C44 
 18240      65736B74 
 18241 0451 735C3120 		.ascii	"s\\1 MPU-6050-PSoC-GettingStarted\\MPU-6050-PSoC-Ge"
 18241      4D50552D 
 18241      36303530 
 18241      2D50536F 
 18241      432D4765 
 18242 0482 7474696E 		.ascii	"ttingStarted.cydsn\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 382


 18242      67537461 
 18242      72746564 
 18242      2E637964 
 18242      736E00
 18243              	.LASF72:
 18244 0495 4D505536 		.ascii	"MPU6050_getZGyroFIFOEnabled\000"
 18244      3035305F 
 18244      6765745A 
 18244      4779726F 
 18244      4649464F 
 18245              	.LASF291:
 18246 04b1 4D505536 		.ascii	"MPU6050_getIntDMPStatus\000"
 18246      3035305F 
 18246      67657449 
 18246      6E74444D 
 18246      50537461 
 18247              	.LASF16:
 18248 04c9 696E7431 		.ascii	"int16_t\000"
 18248      365F7400 
 18249              	.LASF241:
 18250 04d1 4D505536 		.ascii	"MPU6050_setStandbyXGyroEnabled\000"
 18250      3035305F 
 18250      73657453 
 18250      74616E64 
 18250      62795847 
 18251              	.LASF11:
 18252 04f0 6C6F6E67 		.ascii	"long long int\000"
 18252      206C6F6E 
 18252      6720696E 
 18252      7400
 18253              	.LASF2:
 18254 04fe 7369676E 		.ascii	"signed char\000"
 18254      65642063 
 18254      68617200 
 18255              	.LASF130:
 18256 050a 4D505536 		.ascii	"MPU6050_getSlave1Nack\000"
 18256      3035305F 
 18256      67657453 
 18256      6C617665 
 18256      314E6163 
 18257              	.LASF194:
 18258 0520 4D505536 		.ascii	"MPU6050_getYPosMotionDetected\000"
 18258      3035305F 
 18258      67657459 
 18258      506F734D 
 18258      6F74696F 
 18259              	.LASF30:
 18260 053e 72617465 		.ascii	"rate\000"
 18260      00
 18261              	.LASF197:
 18262 0543 4D505536 		.ascii	"MPU6050_getZeroMotionDetected\000"
 18262      3035305F 
 18262      6765745A 
 18262      65726F4D 
 18262      6F74696F 
 18263              	.LASF77:
 18264 0561 4D505536 		.ascii	"MPU6050_setSlave2FIFOEnabled\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 383


 18264      3035305F 
 18264      73657453 
 18264      6C617665 
 18264      32464946 
 18265              	.LASF59:
 18266 057e 4D505536 		.ascii	"MPU6050_setMotionDetectionThreshold\000"
 18266      3035305F 
 18266      7365744D 
 18266      6F74696F 
 18266      6E446574 
 18267              	.LASF183:
 18268 05a2 4D505536 		.ascii	"MPU6050_getRotation\000"
 18268      3035305F 
 18268      67657452 
 18268      6F746174 
 18268      696F6E00 
 18269              	.LASF145:
 18270 05b6 4D505536 		.ascii	"MPU6050_getFSyncInterruptEnabled\000"
 18270      3035305F 
 18270      67657446 
 18270      53796E63 
 18270      496E7465 
 18271              	.LASF274:
 18272 05d7 4D505536 		.ascii	"MPU6050_getXGyroOffsetUser\000"
 18272      3035305F 
 18272      67657458 
 18272      4779726F 
 18272      4F666673 
 18273              	.LASF25:
 18274 05f2 4D505536 		.ascii	"MPU6050_setAuxVDDIOLevel\000"
 18274      3035305F 
 18274      73657441 
 18274      75785644 
 18274      44494F4C 
 18275              	.LASF93:
 18276 060b 4D505536 		.ascii	"MPU6050_setSlaveAddress\000"
 18276      3035305F 
 18276      73657453 
 18276      6C617665 
 18276      41646472 
 18277              	.LASF73:
 18278 0623 4D505536 		.ascii	"MPU6050_setZGyroFIFOEnabled\000"
 18278      3035305F 
 18278      7365745A 
 18278      4779726F 
 18278      4649464F 
 18279              	.LASF251:
 18280 063f 4D505536 		.ascii	"MPU6050_setDeviceID\000"
 18280      3035305F 
 18280      73657444 
 18280      65766963 
 18280      65494400 
 18281              	.LASF8:
 18282 0653 6C6F6E67 		.ascii	"long int\000"
 18282      20696E74 
 18282      00
 18283              	.LASF172:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 384


 18284 065c 4D505536 		.ascii	"MPU6050_getMotion9\000"
 18284      3035305F 
 18284      6765744D 
 18284      6F74696F 
 18284      6E3900
 18285              	.LASF161:
 18286 066f 4D505536 		.ascii	"MPU6050_getIntI2CMasterEnabled\000"
 18286      3035305F 
 18286      67657449 
 18286      6E744932 
 18286      434D6173 
 18287              	.LASF177:
 18288 068e 4D505536 		.ascii	"MPU6050_getAccelerationX\000"
 18288      3035305F 
 18288      67657441 
 18288      6363656C 
 18288      65726174 
 18289              	.LASF213:
 18290 06a7 4D505536 		.ascii	"MPU6050_getFIFOEnabled\000"
 18290      3035305F 
 18290      67657446 
 18290      49464F45 
 18290      6E61626C 
 18291              	.LASF180:
 18292 06be 4D505536 		.ascii	"MPU6050_getAccelerationY\000"
 18292      3035305F 
 18292      67657441 
 18292      6363656C 
 18292      65726174 
 18293              	.LASF259:
 18294 06d7 4D505536 		.ascii	"MPU6050_getZGyroOffset\000"
 18294      3035305F 
 18294      6765745A 
 18294      4779726F 
 18294      4F666673 
 18295              	.LASF61:
 18296 06ee 4D505536 		.ascii	"MPU6050_setMotionDetectionDuration\000"
 18296      3035305F 
 18296      7365744D 
 18296      6F74696F 
 18296      6E446574 
 18297              	.LASF32:
 18298 0711 4D505536 		.ascii	"MPU6050_setExternalFrameSync\000"
 18298      3035305F 
 18298      73657445 
 18298      78746572 
 18298      6E616C46 
 18299              	.LASF245:
 18300 072e 4D505536 		.ascii	"MPU6050_setStandbyZGyroEnabled\000"
 18300      3035305F 
 18300      73657453 
 18300      74616E64 
 18300      62795A47 
 18301              	.LASF48:
 18302 074d 4D505536 		.ascii	"MPU6050_setFullScaleAccelRange\000"
 18302      3035305F 
 18302      73657446 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 385


 18302      756C6C53 
 18302      63616C65 
 18303              	.LASF276:
 18304 076c 4D505536 		.ascii	"MPU6050_getYGyroOffsetUser\000"
 18304      3035305F 
 18304      67657459 
 18304      4779726F 
 18304      4F666673 
 18305              	.LASF17:
 18306 0787 75696E74 		.ascii	"uint16_t\000"
 18306      31365F74 
 18306      00
 18307              	.LASF78:
 18308 0790 4D505536 		.ascii	"MPU6050_getSlave1FIFOEnabled\000"
 18308      3035305F 
 18308      67657453 
 18308      6C617665 
 18308      31464946 
 18309              	.LASF184:
 18310 07ad 4D505536 		.ascii	"MPU6050_getRotationX\000"
 18310      3035305F 
 18310      67657452 
 18310      6F746174 
 18310      696F6E58 
 18311              	.LASF185:
 18312 07c2 4D505536 		.ascii	"MPU6050_getRotationY\000"
 18312      3035305F 
 18312      67657452 
 18312      6F746174 
 18312      696F6E59 
 18313              	.LASF186:
 18314 07d7 4D505536 		.ascii	"MPU6050_getRotationZ\000"
 18314      3035305F 
 18314      67657452 
 18314      6F746174 
 18314      696F6E5A 
 18315              	.LASF266:
 18316 07ec 4D505536 		.ascii	"MPU6050_getZFineGain\000"
 18316      3035305F 
 18316      6765745A 
 18316      46696E65 
 18316      4761696E 
 18317              	.LASF91:
 18318 0801 4D505536 		.ascii	"MPU6050_setMasterClockSpeed\000"
 18318      3035305F 
 18318      7365744D 
 18318      61737465 
 18318      72436C6F 
 18319              	.LASF243:
 18320 081d 4D505536 		.ascii	"MPU6050_setStandbyYGyroEnabled\000"
 18320      3035305F 
 18320      73657453 
 18320      74616E64 
 18320      62795947 
 18321              	.LASF117:
 18322 083c 4D505536 		.ascii	"MPU6050_setSlave4InterruptEnabled\000"
 18322      3035305F 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 386


 18322      73657453 
 18322      6C617665 
 18322      34496E74 
 18323              	.LASF193:
 18324 085e 4D505536 		.ascii	"MPU6050_getYNegMotionDetected\000"
 18324      3035305F 
 18324      67657459 
 18324      4E65674D 
 18324      6F74696F 
 18325              	.LASF154:
 18326 087c 4D505536 		.ascii	"MPU6050_setIntFreefallEnabled\000"
 18326      3035305F 
 18326      73657449 
 18326      6E744672 
 18326      65656661 
 18327              	.LASF146:
 18328 089a 4D505536 		.ascii	"MPU6050_setFSyncInterruptEnabled\000"
 18328      3035305F 
 18328      73657446 
 18328      53796E63 
 18328      496E7465 
 18329              	.LASF119:
 18330 08bb 4D505536 		.ascii	"MPU6050_setSlave4WriteMode\000"
 18330      3035305F 
 18330      73657453 
 18330      6C617665 
 18330      34577269 
 18331              	.LASF200:
 18332 08d6 4D505536 		.ascii	"MPU6050_setExternalShadowDelayEnabled\000"
 18332      3035305F 
 18332      73657445 
 18332      78746572 
 18332      6E616C53 
 18333              	.LASF22:
 18334 08fc 4D505536 		.ascii	"MPU6050_testConnection\000"
 18334      3035305F 
 18334      74657374 
 18334      436F6E6E 
 18334      65637469 
 18335              	.LASF171:
 18336 0913 4D505536 		.ascii	"MPU6050_getIntDataReadyStatus\000"
 18336      3035305F 
 18336      67657449 
 18336      6E744461 
 18336      74615265 
 18337              	.LASF9:
 18338 0931 5F5F7569 		.ascii	"__uint32_t\000"
 18338      6E743332 
 18338      5F7400
 18339              	.LASF132:
 18340 093c 4D505536 		.ascii	"MPU6050_getInterruptMode\000"
 18340      3035305F 
 18340      67657449 
 18340      6E746572 
 18340      72757074 
 18341              	.LASF236:
 18342 0955 4D505536 		.ascii	"MPU6050_getStandbyYAccelEnabled\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 387


 18342      3035305F 
 18342      67657453 
 18342      74616E64 
 18342      62795941 
 18343              	.LASF203:
 18344 0975 4D505536 		.ascii	"MPU6050_resetGyroscopePath\000"
 18344      3035305F 
 18344      72657365 
 18344      74477972 
 18344      6F73636F 
 18345              	.LASF256:
 18346 0990 6F666673 		.ascii	"offset\000"
 18346      657400
 18347              	.LASF219:
 18348 0997 4D505536 		.ascii	"MPU6050_resetI2CMaster\000"
 18348      3035305F 
 18348      72657365 
 18348      74493243 
 18348      4D617374 
 18349              	.LASF4:
 18350 09ae 5F5F696E 		.ascii	"__int16_t\000"
 18350      7431365F 
 18350      7400
 18351              	.LASF310:
 18352 09b8 4D505536 		.ascii	"MPU6050_setup_compass\000"
 18352      3035305F 
 18352      73657475 
 18352      705F636F 
 18352      6D706173 
 18353              	.LASF57:
 18354 09ce 64757261 		.ascii	"duration\000"
 18354      74696F6E 
 18354      00
 18355              	.LASF63:
 18356 09d7 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionThreshold\000"
 18356      3035305F 
 18356      7365745A 
 18356      65726F4D 
 18356      6F74696F 
 18357              	.LASF100:
 18358 09ff 4D505536 		.ascii	"MPU6050_setSlaveWordByteSwap\000"
 18358      3035305F 
 18358      73657453 
 18358      6C617665 
 18358      576F7264 
 18359              	.LASF303:
 18360 0a1c 64617461 		.ascii	"dataSize\000"
 18360      53697A65 
 18360      00
 18361              	.LASF182:
 18362 0a25 4D505536 		.ascii	"MPU6050_getTemperature\000"
 18362      3035305F 
 18362      67657454 
 18362      656D7065 
 18362      72617475 
 18363              	.LASF140:
 18364 0a3c 4D505536 		.ascii	"MPU6050_getInterruptLatchClear\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 388


 18364      3035305F 
 18364      67657449 
 18364      6E746572 
 18364      72757074 
 18365              	.LASF192:
 18366 0a5b 4D505536 		.ascii	"MPU6050_getXPosMotionDetected\000"
 18366      3035305F 
 18366      67657458 
 18366      506F734D 
 18366      6F74696F 
 18367              	.LASF74:
 18368 0a79 4D505536 		.ascii	"MPU6050_getAccelFIFOEnabled\000"
 18368      3035305F 
 18368      67657441 
 18368      6363656C 
 18368      4649464F 
 18369              	.LASF110:
 18370 0a95 4D505536 		.ascii	"MPU6050_getSlave4Register\000"
 18370      3035305F 
 18370      67657453 
 18370      6C617665 
 18370      34526567 
 18371              	.LASF13:
 18372 0aaf 756E7369 		.ascii	"unsigned int\000"
 18372      676E6564 
 18372      20696E74 
 18372      00
 18373              	.LASF112:
 18374 0abc 4D505536 		.ascii	"MPU6050_setSlave4OutputByte\000"
 18374      3035305F 
 18374      73657453 
 18374      6C617665 
 18374      344F7574 
 18375              	.LASF188:
 18376 0ad8 706F7369 		.ascii	"position\000"
 18376      74696F6E 
 18376      00
 18377              	.LASF149:
 18378 0ae1 4D505536 		.ascii	"MPU6050_getClockOutputEnabled\000"
 18378      3035305F 
 18378      67657443 
 18378      6C6F636B 
 18378      4F757470 
 18379              	.LASF283:
 18380 0aff 4D505536 		.ascii	"MPU6050_setIntDMPEnabled\000"
 18380      3035305F 
 18380      73657449 
 18380      6E74444D 
 18380      50456E61 
 18381              	.LASF307:
 18382 0b18 636F6E66 		.ascii	"config\000"
 18382      696700
 18383              	.LASF101:
 18384 0b1f 4D505536 		.ascii	"MPU6050_getSlaveWriteMode\000"
 18384      3035305F 
 18384      67657453 
 18384      6C617665 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 389


 18384      57726974 
 18385              	.LASF209:
 18386 0b39 4D505536 		.ascii	"MPU6050_setFreefallDetectionCounterDecrement\000"
 18386      3035305F 
 18386      73657446 
 18386      72656566 
 18386      616C6C44 
 18387              	.LASF252:
 18388 0b66 4D505536 		.ascii	"MPU6050_getOTPBankValid\000"
 18388      3035305F 
 18388      6765744F 
 18388      54504261 
 18388      6E6B5661 
 18389              	.LASF10:
 18390 0b7e 6C6F6E67 		.ascii	"long unsigned int\000"
 18390      20756E73 
 18390      69676E65 
 18390      6420696E 
 18390      7400
 18391              	.LASF144:
 18392 0b90 4D505536 		.ascii	"MPU6050_setFSyncInterruptLevel\000"
 18392      3035305F 
 18392      73657446 
 18392      53796E63 
 18392      496E7465 
 18393              	.LASF56:
 18394 0baf 4D505536 		.ascii	"MPU6050_setFreefallDetectionDuration\000"
 18394      3035305F 
 18394      73657446 
 18394      72656566 
 18394      616C6C44 
 18395              	.LASF70:
 18396 0bd4 4D505536 		.ascii	"MPU6050_getYGyroFIFOEnabled\000"
 18396      3035305F 
 18396      67657459 
 18396      4779726F 
 18396      4649464F 
 18397              	.LASF302:
 18398 0bf0 4D505536 		.ascii	"MPU6050_readMemoryBlock\000"
 18398      3035305F 
 18398      72656164 
 18398      4D656D6F 
 18398      7279426C 
 18399              	.LASF210:
 18400 0c08 64656372 		.ascii	"decrement\000"
 18400      656D656E 
 18400      7400
 18401              	.LASF212:
 18402 0c12 4D505536 		.ascii	"MPU6050_setMotionDetectionCounterDecrement\000"
 18402      3035305F 
 18402      7365744D 
 18402      6F74696F 
 18402      6E446574 
 18403              	.LASF244:
 18404 0c3d 4D505536 		.ascii	"MPU6050_getStandbyZGyroEnabled\000"
 18404      3035305F 
 18404      67657453 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 390


 18404      74616E64 
 18404      62795A47 
 18405              	.LASF27:
 18406 0c5c 6C657665 		.ascii	"level\000"
 18406      6C00
 18407              	.LASF113:
 18408 0c62 64617461 		.ascii	"data\000"
 18408      00
 18409              	.LASF222:
 18410 0c67 4D505536 		.ascii	"MPU6050_getSleepEnabled\000"
 18410      3035305F 
 18410      67657453 
 18410      6C656570 
 18410      456E6162 
 18411              	.LASF7:
 18412 0c7f 73686F72 		.ascii	"short unsigned int\000"
 18412      7420756E 
 18412      7369676E 
 18412      65642069 
 18412      6E7400
 18413              	.LASF284:
 18414 0c92 4D505536 		.ascii	"MPU6050_getDMPInt5Status\000"
 18414      3035305F 
 18414      67657444 
 18414      4D50496E 
 18414      74355374 
 18415              	.LASF20:
 18416 0cab 4D505536 		.ascii	"MPU6050_initialize\000"
 18416      3035305F 
 18416      696E6974 
 18416      69616C69 
 18416      7A6500
 18417              	.LASF80:
 18418 0cbe 4D505536 		.ascii	"MPU6050_getSlave0FIFOEnabled\000"
 18418      3035305F 
 18418      67657453 
 18418      6C617665 
 18418      30464946 
 18419              	.LASF258:
 18420 0cdb 4D505536 		.ascii	"MPU6050_setYGyroOffset\000"
 18420      3035305F 
 18420      73657459 
 18420      4779726F 
 18420      4F666673 
 18421              	.LASF239:
 18422 0cf2 4D505536 		.ascii	"MPU6050_setStandbyZAccelEnabled\000"
 18422      3035305F 
 18422      73657453 
 18422      74616E64 
 18422      62795A41 
 18423              	.LASF128:
 18424 0d12 4D505536 		.ascii	"MPU6050_getSlave3Nack\000"
 18424      3035305F 
 18424      67657453 
 18424      6C617665 
 18424      334E6163 
 18425              	.LASF98:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 391


 18426 0d28 4D505536 		.ascii	"MPU6050_setSlaveEnabled\000"
 18426      3035305F 
 18426      73657453 
 18426      6C617665 
 18426      456E6162 
 18427              	.LASF85:
 18428 0d40 4D505536 		.ascii	"MPU6050_setWaitForExternalSensorEnabled\000"
 18428      3035305F 
 18428      73657457 
 18428      61697446 
 18428      6F724578 
 18429              	.LASF120:
 18430 0d68 4D505536 		.ascii	"MPU6050_getSlave4MasterDelay\000"
 18430      3035305F 
 18430      67657453 
 18430      6C617665 
 18430      344D6173 
 18431              	.LASF58:
 18432 0d85 4D505536 		.ascii	"MPU6050_getMotionDetectionThreshold\000"
 18432      3035305F 
 18432      6765744D 
 18432      6F74696F 
 18432      6E446574 
 18433              	.LASF235:
 18434 0da9 4D505536 		.ascii	"MPU6050_setStandbyXAccelEnabled\000"
 18434      3035305F 
 18434      73657453 
 18434      74616E64 
 18434      62795841 
 18435              	.LASF103:
 18436 0dc9 4D505536 		.ascii	"MPU6050_getSlaveWordGroupOffset\000"
 18436      3035305F 
 18436      67657453 
 18436      6C617665 
 18436      576F7264 
 18437              	.LASF250:
 18438 0de9 4D505536 		.ascii	"MPU6050_getDeviceID\000"
 18438      3035305F 
 18438      67657444 
 18438      65766963 
 18438      65494400 
 18439              	.LASF53:
 18440 0dfd 4D505536 		.ascii	"MPU6050_setFreefallDetectionThreshold\000"
 18440      3035305F 
 18440      73657446 
 18440      72656566 
 18440      616C6C44 
 18441              	.LASF207:
 18442 0e23 4D505536 		.ascii	"MPU6050_setAccelerometerPowerOnDelay\000"
 18442      3035305F 
 18442      73657441 
 18442      6363656C 
 18442      65726F6D 
 18443              	.LASF147:
 18444 0e48 4D505536 		.ascii	"MPU6050_getI2CBypassEnabled\000"
 18444      3035305F 
 18444      67657449 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 392


 18444      32434279 
 18444      70617373 
 18445              	.LASF314:
 18446 0e64 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 18446      43313120 
 18446      352E342E 
 18446      31203230 
 18446      31363036 
 18447 0e97 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 18447      20726576 
 18447      6973696F 
 18447      6E203233 
 18447      37373135 
 18448 0eca 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 18448      66756E63 
 18448      74696F6E 
 18448      2D736563 
 18448      74696F6E 
 18449              	.LASF211:
 18450 0ef2 4D505536 		.ascii	"MPU6050_getMotionDetectionCounterDecrement\000"
 18450      3035305F 
 18450      6765744D 
 18450      6F74696F 
 18450      6E446574 
 18451              	.LASF50:
 18452 0f1d 4D505536 		.ascii	"MPU6050_setDHPFMode\000"
 18452      3035305F 
 18452      73657444 
 18452      4850464D 
 18452      6F646500 
 18453              	.LASF121:
 18454 0f31 4D505536 		.ascii	"MPU6050_setSlave4MasterDelay\000"
 18454      3035305F 
 18454      73657453 
 18454      6C617665 
 18454      344D6173 
 18455              	.LASF299:
 18456 0f4e 4D505536 		.ascii	"MPU6050_setMemoryStartAddress\000"
 18456      3035305F 
 18456      7365744D 
 18456      656D6F72 
 18456      79537461 
 18457              	.LASF242:
 18458 0f6c 4D505536 		.ascii	"MPU6050_getStandbyYGyroEnabled\000"
 18458      3035305F 
 18458      67657453 
 18458      74616E64 
 18458      62795947 
 18459              	.LASF315:
 18460 0f8b 6D707536 		.ascii	"mpu6050.c\000"
 18460      3035302E 
 18460      6300
 18461              	.LASF278:
 18462 0f95 4D505536 		.ascii	"MPU6050_getZGyroOffsetUser\000"
 18462      3035305F 
 18462      6765745A 
 18462      4779726F 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 393


 18462      4F666673 
 18463              	.LASF201:
 18464 0fb0 4D505536 		.ascii	"MPU6050_getSlaveDelayEnabled\000"
 18464      3035305F 
 18464      67657453 
 18464      6C617665 
 18464      44656C61 
 18465              	.LASF124:
 18466 0fcd 4D505536 		.ascii	"MPU6050_getPassthroughStatus\000"
 18466      3035305F 
 18466      67657450 
 18466      61737374 
 18466      68726F75 
 18467              	.LASF160:
 18468 0fea 4D505536 		.ascii	"MPU6050_setIntFIFOBufferOverflowEnabled\000"
 18468      3035305F 
 18468      73657449 
 18468      6E744649 
 18468      464F4275 
 18469              	.LASF86:
 18470 1012 4D505536 		.ascii	"MPU6050_getSlave3FIFOEnabled\000"
 18470      3035305F 
 18470      67657453 
 18470      6C617665 
 18470      33464946 
 18471              	.LASF230:
 18472 102f 736F7572 		.ascii	"source\000"
 18472      636500
 18473              	.LASF297:
 18474 1036 70726566 		.ascii	"prefetchEnabled\000"
 18474      65746368 
 18474      456E6162 
 18474      6C656400 
 18475              	.LASF202:
 18476 1046 4D505536 		.ascii	"MPU6050_setSlaveDelayEnabled\000"
 18476      3035305F 
 18476      73657453 
 18476      6C617665 
 18476      44656C61 
 18477              	.LASF35:
 18478 1063 4D505536 		.ascii	"MPU6050_setDLPFMode\000"
 18478      3035305F 
 18478      73657444 
 18478      4C50464D 
 18478      6F646500 
 18479              	.LASF272:
 18480 1077 4D505536 		.ascii	"MPU6050_getZAccelOffset\000"
 18480      3035305F 
 18480      6765745A 
 18480      41636365 
 18480      6C4F6666 
 18481              	.LASF289:
 18482 108f 4D505536 		.ascii	"MPU6050_getDMPInt0Status\000"
 18482      3035305F 
 18482      67657444 
 18482      4D50496E 
 18482      74305374 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 394


 18483              	.LASF26:
 18484 10a8 61646472 		.ascii	"address\000"
 18484      65737300 
 18485              	.LASF286:
 18486 10b0 4D505536 		.ascii	"MPU6050_getDMPInt3Status\000"
 18486      3035305F 
 18486      67657444 
 18486      4D50496E 
 18486      74335374 
 18487              	.LASF87:
 18488 10c9 4D505536 		.ascii	"MPU6050_setSlave3FIFOEnabled\000"
 18488      3035305F 
 18488      73657453 
 18488      6C617665 
 18488      33464946 
 18489              	.LASF304:
 18490 10e6 6368756E 		.ascii	"chunkSize\000"
 18490      6B53697A 
 18490      6500
 18491              	.LASF273:
 18492 10f0 4D505536 		.ascii	"MPU6050_setZAccelOffset\000"
 18492      3035305F 
 18492      7365745A 
 18492      41636365 
 18492      6C4F6666 
 18493              	.LASF90:
 18494 1108 4D505536 		.ascii	"MPU6050_getMasterClockSpeed\000"
 18494      3035305F 
 18494      6765744D 
 18494      61737465 
 18494      72436C6F 
 18495              	.LASF28:
 18496 1124 4D505536 		.ascii	"MPU6050_getRate\000"
 18496      3035305F 
 18496      67657452 
 18496      61746500 
 18497              	.LASF118:
 18498 1134 4D505536 		.ascii	"MPU6050_getSlave4WriteMode\000"
 18498      3035305F 
 18498      67657453 
 18498      6C617665 
 18498      34577269 
 18499              	.LASF156:
 18500 114f 4D505536 		.ascii	"MPU6050_setIntMotionEnabled\000"
 18500      3035305F 
 18500      73657449 
 18500      6E744D6F 
 18500      74696F6E 
 18501              	.LASF275:
 18502 116b 4D505536 		.ascii	"MPU6050_setXGyroOffsetUser\000"
 18502      3035305F 
 18502      73657458 
 18502      4779726F 
 18502      4F666673 
 18503              	.LASF40:
 18504 1186 4D505536 		.ascii	"MPU6050_getAccelXSelfTest\000"
 18504      3035305F 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 395


 18504      67657441 
 18504      6363656C 
 18504      5853656C 
 18505              	.LASF240:
 18506 11a0 4D505536 		.ascii	"MPU6050_getStandbyXGyroEnabled\000"
 18506      3035305F 
 18506      67657453 
 18506      74616E64 
 18506      62795847 
 18507              	.LASF214:
 18508 11bf 4D505536 		.ascii	"MPU6050_setFIFOEnabled\000"
 18508      3035305F 
 18508      73657446 
 18508      49464F45 
 18508      6E61626C 
 18509              	.LASF264:
 18510 11d6 4D505536 		.ascii	"MPU6050_getYFineGain\000"
 18510      3035305F 
 18510      67657459 
 18510      46696E65 
 18510      4761696E 
 18511              	.LASF238:
 18512 11eb 4D505536 		.ascii	"MPU6050_getStandbyZAccelEnabled\000"
 18512      3035305F 
 18512      67657453 
 18512      74616E64 
 18512      62795A41 
 18513              	.LASF153:
 18514 120b 4D505536 		.ascii	"MPU6050_getIntFreefallEnabled\000"
 18514      3035305F 
 18514      67657449 
 18514      6E744672 
 18514      65656661 
 18515              	.LASF262:
 18516 1229 4D505536 		.ascii	"MPU6050_setXFineGain\000"
 18516      3035305F 
 18516      73657458 
 18516      46696E65 
 18516      4761696E 
 18517              	.LASF51:
 18518 123e 62616E64 		.ascii	"bandwidth\000"
 18518      77696474 
 18518      6800
 18519              	.LASF39:
 18520 1248 72616E67 		.ascii	"range\000"
 18520      6500
 18521              	.LASF169:
 18522 124e 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowStatus\000"
 18522      3035305F 
 18522      67657449 
 18522      6E744649 
 18522      464F4275 
 18523              	.LASF313:
 18524 1275 62756666 		.ascii	"buffer\000"
 18524      657200
 18525              	.LASF133:
 18526 127c 4D505536 		.ascii	"MPU6050_setInterruptMode\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 396


 18526      3035305F 
 18526      73657449 
 18526      6E746572 
 18526      72757074 
 18527              	.LASF157:
 18528 1295 4D505536 		.ascii	"MPU6050_getIntZeroMotionEnabled\000"
 18528      3035305F 
 18528      67657449 
 18528      6E745A65 
 18528      726F4D6F 
 18529              	.LASF206:
 18530 12b5 4D505536 		.ascii	"MPU6050_getAccelerometerPowerOnDelay\000"
 18530      3035305F 
 18530      67657441 
 18530      6363656C 
 18530      65726F6D 
 18531              	.LASF159:
 18532 12da 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowEnabled\000"
 18532      3035305F 
 18532      67657449 
 18532      6E744649 
 18532      464F4275 
 18533              	.LASF69:
 18534 1302 4D505536 		.ascii	"MPU6050_setXGyroFIFOEnabled\000"
 18534      3035305F 
 18534      73657458 
 18534      4779726F 
 18534      4649464F 
 18535              	.LASF64:
 18536 131e 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionDuration\000"
 18536      3035305F 
 18536      6765745A 
 18536      65726F4D 
 18536      6F74696F 
 18537              	.LASF179:
 18538 1345 6C56616C 		.ascii	"lVal\000"
 18538      00
 18539              	.LASF305:
 18540 134a 4D505536 		.ascii	"MPU6050_getDMPConfig1\000"
 18540      3035305F 
 18540      67657444 
 18540      4D50436F 
 18540      6E666967 
 18541              	.LASF234:
 18542 1360 4D505536 		.ascii	"MPU6050_getStandbyXAccelEnabled\000"
 18542      3035305F 
 18542      67657453 
 18542      74616E64 
 18542      62795841 
 18543              	.LASF308:
 18544 1380 4D505536 		.ascii	"MPU6050_getDMPConfig2\000"
 18544      3035305F 
 18544      67657444 
 18544      4D50436F 
 18544      6E666967 
 18545              	.LASF271:
 18546 1396 4D505536 		.ascii	"MPU6050_setYAccelOffset\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 397


 18546      3035305F 
 18546      73657459 
 18546      41636365 
 18546      6C4F6666 
 18547              	.LASF114:
 18548 13ae 4D505536 		.ascii	"MPU6050_getSlave4Enabled\000"
 18548      3035305F 
 18548      67657453 
 18548      6C617665 
 18548      34456E61 
 18549              	.LASF263:
 18550 13c7 6761696E 		.ascii	"gain\000"
 18550      00
 18551              	.LASF89:
 18552 13cc 4D505536 		.ascii	"MPU6050_setSlaveReadWriteTransitionEnabled\000"
 18552      3035305F 
 18552      73657453 
 18552      6C617665 
 18552      52656164 
 18553              	.LASF54:
 18554 13f7 74687265 		.ascii	"threshold\000"
 18554      73686F6C 
 18554      6400
 18555              	.LASF47:
 18556 1401 4D505536 		.ascii	"MPU6050_getFullScaleAccelRange\000"
 18556      3035305F 
 18556      67657446 
 18556      756C6C53 
 18556      63616C65 
 18557              	.LASF21:
 18558 1420 5F426F6F 		.ascii	"_Bool\000"
 18558      6C00
 18559              	.LASF3:
 18560 1426 756E7369 		.ascii	"unsigned char\000"
 18560      676E6564 
 18560      20636861 
 18560      7200
 18561              	.LASF198:
 18562 1434 4D505536 		.ascii	"MPU6050_setSlaveOutputByte\000"
 18562      3035305F 
 18562      73657453 
 18562      6C617665 
 18562      4F757470 
 18563              	.LASF166:
 18564 144f 4D505536 		.ascii	"MPU6050_getIntFreefallStatus\000"
 18564      3035305F 
 18564      67657449 
 18564      6E744672 
 18564      65656661 
 18565              	.LASF246:
 18566 146c 4D505536 		.ascii	"MPU6050_getFIFOCount\000"
 18566      3035305F 
 18566      67657446 
 18566      49464F43 
 18566      6F756E74 
 18567              	.LASF38:
 18568 1481 4D505536 		.ascii	"MPU6050_setFullScaleGyroRange\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 398


 18568      3035305F 
 18568      73657446 
 18568      756C6C53 
 18568      63616C65 
 18569              	.LASF122:
 18570 149f 64656C61 		.ascii	"delay\000"
 18570      7900
 18571              	.LASF5:
 18572 14a5 73686F72 		.ascii	"short int\000"
 18572      7420696E 
 18572      7400
 18573              	.LASF62:
 18574 14af 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionThreshold\000"
 18574      3035305F 
 18574      6765745A 
 18574      65726F4D 
 18574      6F74696F 
 18575              	.LASF151:
 18576 14d7 4D505536 		.ascii	"MPU6050_getIntEnabled\000"
 18576      3035305F 
 18576      67657449 
 18576      6E74456E 
 18576      61626C65 
 18577              	.LASF164:
 18578 14ed 4D505536 		.ascii	"MPU6050_setIntDataReadyEnabled\000"
 18578      3035305F 
 18578      73657449 
 18578      6E744461 
 18578      74615265 
 18579              	.LASF41:
 18580 150c 4D505536 		.ascii	"MPU6050_setAccelXSelfTest\000"
 18580      3035305F 
 18580      73657441 
 18580      6363656C 
 18580      5853656C 
 18581              	.LASF265:
 18582 1526 4D505536 		.ascii	"MPU6050_setYFineGain\000"
 18582      3035305F 
 18582      73657459 
 18582      46696E65 
 18582      4761696E 
 18583              	.LASF282:
 18584 153b 4D505536 		.ascii	"MPU6050_getIntDMPEnabled\000"
 18584      3035305F 
 18584      67657449 
 18584      6E74444D 
 18584      50456E61 
 18585              	.LASF277:
 18586 1554 4D505536 		.ascii	"MPU6050_setYGyroOffsetUser\000"
 18586      3035305F 
 18586      73657459 
 18586      4779726F 
 18586      4F666673 
 18587              	.LASF43:
 18588 156f 4D505536 		.ascii	"MPU6050_getAccelYSelfTest\000"
 18588      3035305F 
 18588      67657441 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 399


 18588      6363656C 
 18588      5953656C 
 18589              	.LASF108:
 18590 1589 4D505536 		.ascii	"MPU6050_getSlave4Address\000"
 18590      3035305F 
 18590      67657453 
 18590      6C617665 
 18590      34416464 
 18591              	.LASF292:
 18592 15a2 4D505536 		.ascii	"MPU6050_getDMPEnabled\000"
 18592      3035305F 
 18592      67657444 
 18592      4D50456E 
 18592      61626C65 
 18593              	.LASF104:
 18594 15b8 4D505536 		.ascii	"MPU6050_setSlaveWordGroupOffset\000"
 18594      3035305F 
 18594      73657453 
 18594      6C617665 
 18594      576F7264 
 18595              	.LASF248:
 18596 15d8 4D505536 		.ascii	"MPU6050_getFIFOBytes\000"
 18596      3035305F 
 18596      67657446 
 18596      49464F42 
 18596      79746573 
 18597              	.LASF195:
 18598 15ed 4D505536 		.ascii	"MPU6050_getZNegMotionDetected\000"
 18598      3035305F 
 18598      6765745A 
 18598      4E65674D 
 18598      6F74696F 
 18599              	.LASF142:
 18600 160b 636C6561 		.ascii	"clear\000"
 18600      7200
 18601              	.LASF199:
 18602 1611 4D505536 		.ascii	"MPU6050_getExternalShadowDelayEnabled\000"
 18602      3035305F 
 18602      67657445 
 18602      78746572 
 18602      6E616C53 
 18603              	.LASF174:
 18604 1637 4D505536 		.ascii	"MPU6050_getMotion6\000"
 18604      3035305F 
 18604      6765744D 
 18604      6F74696F 
 18604      6E3600
 18605              	.LASF81:
 18606 164a 4D505536 		.ascii	"MPU6050_setSlave0FIFOEnabled\000"
 18606      3035305F 
 18606      73657453 
 18606      6C617665 
 18606      30464946 
 18607              	.LASF18:
 18608 1667 75696E74 		.ascii	"uint32_t\000"
 18608      33325F74 
 18608      00
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 400


 18609              	.LASF126:
 18610 1670 4D505536 		.ascii	"MPU6050_getLostArbitration\000"
 18610      3035305F 
 18610      6765744C 
 18610      6F737441 
 18610      72626974 
 18611              	.LASF129:
 18612 168b 4D505536 		.ascii	"MPU6050_getSlave2Nack\000"
 18612      3035305F 
 18612      67657453 
 18612      6C617665 
 18612      324E6163 
 18613              	.LASF42:
 18614 16a1 656E6162 		.ascii	"enabled\000"
 18614      6C656400 
 18615              	.LASF68:
 18616 16a9 4D505536 		.ascii	"MPU6050_getXGyroFIFOEnabled\000"
 18616      3035305F 
 18616      67657458 
 18616      4779726F 
 18616      4649464F 
 18617              	.LASF311:
 18618 16c5 73697A65 		.ascii	"sizetype\000"
 18618      74797065 
 18618      00
 18619              	.LASF247:
 18620 16ce 4D505536 		.ascii	"MPU6050_getFIFOByte\000"
 18620      3035305F 
 18620      67657446 
 18620      49464F42 
 18620      79746500 
 18621              	.LASF107:
 18622 16e2 6C656E67 		.ascii	"length\000"
 18622      746800
 18623              	.LASF111:
 18624 16e9 4D505536 		.ascii	"MPU6050_setSlave4Register\000"
 18624      3035305F 
 18624      73657453 
 18624      6C617665 
 18624      34526567 
 18625              	.LASF36:
 18626 1703 6D6F6465 		.ascii	"mode\000"
 18626      00
 18627              	.LASF143:
 18628 1708 4D505536 		.ascii	"MPU6050_getFSyncInterruptLevel\000"
 18628      3035305F 
 18628      67657446 
 18628      53796E63 
 18628      496E7465 
 18629              	.LASF309:
 18630 1727 4D505536 		.ascii	"MPU6050_setDMPConfig2\000"
 18630      3035305F 
 18630      73657444 
 18630      4D50436F 
 18630      6E666967 
 18631              	.LASF281:
 18632 173d 4D505536 		.ascii	"MPU6050_setIntPLLReadyEnabled\000"
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 401


 18632      3035305F 
 18632      73657449 
 18632      6E74504C 
 18632      4C526561 
 18633              	.LASF6:
 18634 175b 5F5F7569 		.ascii	"__uint16_t\000"
 18634      6E743136 
 18634      5F7400
 18635              	.LASF227:
 18636 1766 4D505536 		.ascii	"MPU6050_setTempSensorEnabled\000"
 18636      3035305F 
 18636      73657454 
 18636      656D7053 
 18636      656E736F 
 18637              	.LASF102:
 18638 1783 4D505536 		.ascii	"MPU6050_setSlaveWriteMode\000"
 18638      3035305F 
 18638      73657453 
 18638      6C617665 
 18638      57726974 
 18639              	.LASF268:
 18640 179d 4D505536 		.ascii	"MPU6050_getXAccelOffset\000"
 18640      3035305F 
 18640      67657458 
 18640      41636365 
 18640      6C4F6666 
 18641              	.LASF162:
 18642 17b5 4D505536 		.ascii	"MPU6050_setIntI2CMasterEnabled\000"
 18642      3035305F 
 18642      73657449 
 18642      6E744932 
 18642      434D6173 
 18643              	.LASF301:
 18644 17d4 4D505536 		.ascii	"MPU6050_writeMemoryByte\000"
 18644      3035305F 
 18644      77726974 
 18644      654D656D 
 18644      6F727942 
 18645              	.LASF79:
 18646 17ec 4D505536 		.ascii	"MPU6050_setSlave1FIFOEnabled\000"
 18646      3035305F 
 18646      73657453 
 18646      6C617665 
 18646      31464946 
 18647              	.LASF267:
 18648 1809 4D505536 		.ascii	"MPU6050_setZFineGain\000"
 18648      3035305F 
 18648      7365745A 
 18648      46696E65 
 18648      4761696E 
 18649              	.LASF115:
 18650 181e 4D505536 		.ascii	"MPU6050_setSlave4Enabled\000"
 18650      3035305F 
 18650      73657453 
 18650      6C617665 
 18650      34456E61 
 18651              	.LASF269:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 402


 18652 1837 4D505536 		.ascii	"MPU6050_setXAccelOffset\000"
 18652      3035305F 
 18652      73657458 
 18652      41636365 
 18652      6C4F6666 
 18653              	.LASF254:
 18654 184f 4D505536 		.ascii	"MPU6050_getXGyroOffset\000"
 18654      3035305F 
 18654      67657458 
 18654      4779726F 
 18654      4F666673 
 18655              	.LASF175:
 18656 1866 4D505536 		.ascii	"MPU6050_getMotion6t\000"
 18656      3035305F 
 18656      6765744D 
 18656      6F74696F 
 18656      6E367400 
 18657              	.LASF67:
 18658 187a 4D505536 		.ascii	"MPU6050_setTempFIFOEnabled\000"
 18658      3035305F 
 18658      73657454 
 18658      656D7046 
 18658      49464F45 
 18659              	.LASF95:
 18660 1895 4D505536 		.ascii	"MPU6050_getSlaveRegister\000"
 18660      3035305F 
 18660      67657453 
 18660      6C617665 
 18660      52656769 
 18661              	.LASF152:
 18662 18ae 4D505536 		.ascii	"MPU6050_setIntEnabled\000"
 18662      3035305F 
 18662      73657449 
 18662      6E74456E 
 18662      61626C65 
 18663              	.LASF253:
 18664 18c4 4D505536 		.ascii	"MPU6050_setOTPBankValid\000"
 18664      3035305F 
 18664      7365744F 
 18664      54504261 
 18664      6E6B5661 
 18665              	.LASF296:
 18666 18dc 62616E6B 		.ascii	"bank\000"
 18666      00
 18667              	.LASF44:
 18668 18e1 4D505536 		.ascii	"MPU6050_setAccelYSelfTest\000"
 18668      3035305F 
 18668      73657441 
 18668      6363656C 
 18668      5953656C 
 18669              	.LASF170:
 18670 18fb 4D505536 		.ascii	"MPU6050_getIntI2CMasterStatus\000"
 18670      3035305F 
 18670      67657449 
 18670      6E744932 
 18670      434D6173 
 18671              	.LASF55:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 403


 18672 1919 4D505536 		.ascii	"MPU6050_getFreefallDetectionDuration\000"
 18672      3035305F 
 18672      67657446 
 18672      72656566 
 18672      616C6C44 
 18673              	.LASF14:
 18674 193e 696E7438 		.ascii	"int8_t\000"
 18674      5F7400
 18675              	.LASF287:
 18676 1945 4D505536 		.ascii	"MPU6050_getDMPInt2Status\000"
 18676      3035305F 
 18676      67657444 
 18676      4D50496E 
 18676      74325374 
 18677              	.LASF138:
 18678 195e 4D505536 		.ascii	"MPU6050_setInterruptLatch\000"
 18678      3035305F 
 18678      73657449 
 18678      6E746572 
 18678      72757074 
 18679              	.LASF45:
 18680 1978 4D505536 		.ascii	"MPU6050_getAccelZSelfTest\000"
 18680      3035305F 
 18680      67657441 
 18680      6363656C 
 18680      5A53656C 
 18681              	.LASF167:
 18682 1992 4D505536 		.ascii	"MPU6050_getIntMotionStatus\000"
 18682      3035305F 
 18682      67657449 
 18682      6E744D6F 
 18682      74696F6E 
 18683              	.LASF225:
 18684 19ad 4D505536 		.ascii	"MPU6050_setWakeCycleEnabled\000"
 18684      3035305F 
 18684      73657457 
 18684      616B6543 
 18684      79636C65 
 18685              	.LASF255:
 18686 19c9 4D505536 		.ascii	"MPU6050_setXGyroOffset\000"
 18686      3035305F 
 18686      73657458 
 18686      4779726F 
 18686      4F666673 
 18687              	.LASF249:
 18688 19e0 4D505536 		.ascii	"MPU6050_setFIFOByte\000"
 18688      3035305F 
 18688      73657446 
 18688      49464F42 
 18688      79746500 
 18689              	.LASF223:
 18690 19f4 4D505536 		.ascii	"MPU6050_setSleepEnabled\000"
 18690      3035305F 
 18690      73657453 
 18690      6C656570 
 18690      456E6162 
 18691              	.LASF49:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 404


 18692 1a0c 4D505536 		.ascii	"MPU6050_getDHPFMode\000"
 18692      3035305F 
 18692      67657444 
 18692      4850464D 
 18692      6F646500 
 18693              	.LASF82:
 18694 1a20 4D505536 		.ascii	"MPU6050_getMultiMasterEnabled\000"
 18694      3035305F 
 18694      6765744D 
 18694      756C7469 
 18694      4D617374 
 18695              	.LASF231:
 18696 1a3e 4D505536 		.ascii	"MPU6050_getWakeFrequency\000"
 18696      3035305F 
 18696      67657457 
 18696      616B6546 
 18696      72657175 
 18697              	.LASF148:
 18698 1a57 4D505536 		.ascii	"MPU6050_setI2CBypassEnabled\000"
 18698      3035305F 
 18698      73657449 
 18698      32434279 
 18698      70617373 
 18699              	.LASF187:
 18700 1a73 4D505536 		.ascii	"MPU6050_getExternalSensorByte\000"
 18700      3035305F 
 18700      67657445 
 18700      78746572 
 18700      6E616C53 
 18701              	.LASF285:
 18702 1a91 4D505536 		.ascii	"MPU6050_getDMPInt4Status\000"
 18702      3035305F 
 18702      67657444 
 18702      4D50496E 
 18702      74345374 
 18703              	.LASF109:
 18704 1aaa 4D505536 		.ascii	"MPU6050_setSlave4Address\000"
 18704      3035305F 
 18704      73657453 
 18704      6C617665 
 18704      34416464 
 18705              	.LASF150:
 18706 1ac3 4D505536 		.ascii	"MPU6050_setClockOutputEnabled\000"
 18706      3035305F 
 18706      73657443 
 18706      6C6F636B 
 18706      4F757470 
 18707              	.LASF131:
 18708 1ae1 4D505536 		.ascii	"MPU6050_getSlave0Nack\000"
 18708      3035305F 
 18708      67657453 
 18708      6C617665 
 18708      304E6163 
 18709              	.LASF178:
 18710 1af7 6856616C 		.ascii	"hVal\000"
 18710      00
 18711              	.LASF31:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 405


 18712 1afc 4D505536 		.ascii	"MPU6050_getExternalFrameSync\000"
 18712      3035305F 
 18712      67657445 
 18712      78746572 
 18712      6E616C46 
 18713              	.LASF52:
 18714 1b19 4D505536 		.ascii	"MPU6050_getFreefallDetectionThreshold\000"
 18714      3035305F 
 18714      67657446 
 18714      72656566 
 18714      616C6C44 
 18715              	.LASF24:
 18716 1b3f 4932435F 		.ascii	"I2C_MPU6050_I2CAddress\000"
 18716      4D505536 
 18716      3035305F 
 18716      49324341 
 18716      64647265 
 18717              	.LASF123:
 18718 1b56 4D505536 		.ascii	"MPU6050_getSlate4InputByte\000"
 18718      3035305F 
 18718      67657453 
 18718      6C617465 
 18718      34496E70 
 18719              	.LASF15:
 18720 1b71 75696E74 		.ascii	"uint8_t\000"
 18720      385F7400 
 18721              	.LASF141:
 18722 1b79 4D505536 		.ascii	"MPU6050_setInterruptLatchClear\000"
 18722      3035305F 
 18722      73657449 
 18722      6E746572 
 18722      72757074 
 18723              	.LASF295:
 18724 1b98 4D505536 		.ascii	"MPU6050_setMemoryBank\000"
 18724      3035305F 
 18724      7365744D 
 18724      656D6F72 
 18724      7942616E 
 18725              	.LASF33:
 18726 1bae 73796E63 		.ascii	"sync\000"
 18726      00
 18727              	.LASF155:
 18728 1bb3 4D505536 		.ascii	"MPU6050_getIntMotionEnabled\000"
 18728      3035305F 
 18728      67657449 
 18728      6E744D6F 
 18728      74696F6E 
 18729              	.LASF181:
 18730 1bcf 4D505536 		.ascii	"MPU6050_getAccelerationZ\000"
 18730      3035305F 
 18730      67657441 
 18730      6363656C 
 18730      65726174 
 18731              	.LASF168:
 18732 1be8 4D505536 		.ascii	"MPU6050_getIntZeroMotionStatus\000"
 18732      3035305F 
 18732      67657449 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 406


 18732      6E745A65 
 18732      726F4D6F 
 18733              	.LASF106:
 18734 1c07 4D505536 		.ascii	"MPU6050_setSlaveDataLength\000"
 18734      3035305F 
 18734      73657453 
 18734      6C617665 
 18734      44617461 
 18735              	.LASF137:
 18736 1c22 4D505536 		.ascii	"MPU6050_getInterruptLatch\000"
 18736      3035305F 
 18736      67657449 
 18736      6E746572 
 18736      72757074 
 18737              	.LASF190:
 18738 1c3c 4D505536 		.ascii	"MPU6050_getExternalSensorDWord\000"
 18738      3035305F 
 18738      67657445 
 18738      78746572 
 18738      6E616C53 
 18739              	.LASF34:
 18740 1c5b 4D505536 		.ascii	"MPU6050_getDLPFMode\000"
 18740      3035305F 
 18740      67657444 
 18740      4C50464D 
 18740      6F646500 
 18741              	.LASF92:
 18742 1c6f 73706565 		.ascii	"speed\000"
 18742      6400
 18743              	.LASF97:
 18744 1c75 4D505536 		.ascii	"MPU6050_getSlaveEnabled\000"
 18744      3035305F 
 18744      67657453 
 18744      6C617665 
 18744      456E6162 
 18745              	.LASF165:
 18746 1c8d 4D505536 		.ascii	"MPU6050_getIntStatus\000"
 18746      3035305F 
 18746      67657449 
 18746      6E745374 
 18746      61747573 
 18747              	.LASF65:
 18748 1ca2 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionDuration\000"
 18748      3035305F 
 18748      7365745A 
 18748      65726F4D 
 18748      6F74696F 
 18749              	.LASF229:
 18750 1cc9 4D505536 		.ascii	"MPU6050_setClockSource\000"
 18750      3035305F 
 18750      73657443 
 18750      6C6F636B 
 18750      536F7572 
 18751              	.LASF208:
 18752 1ce0 4D505536 		.ascii	"MPU6050_getFreefallDetectionCounterDecrement\000"
 18752      3035305F 
 18752      67657446 
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 407


 18752      72656566 
 18752      616C6C44 
 18753              	.LASF205:
 18754 1d0d 4D505536 		.ascii	"MPU6050_resetTemperaturePath\000"
 18754      3035305F 
 18754      72657365 
 18754      7454656D 
 18754      70657261 
 18755              	.LASF288:
 18756 1d2a 4D505536 		.ascii	"MPU6050_getDMPInt1Status\000"
 18756      3035305F 
 18756      67657444 
 18756      4D50496E 
 18756      74315374 
 18757              	.LASF173:
 18758 1d43 4D505536 		.ascii	"MPU6050_getMotion9t\000"
 18758      3035305F 
 18758      6765744D 
 18758      6F74696F 
 18758      6E397400 
 18759              	.LASF293:
 18760 1d57 4D505536 		.ascii	"MPU6050_setDMPEnabled\000"
 18760      3035305F 
 18760      73657444 
 18760      4D50456E 
 18760      61626C65 
 18761              	.LASF37:
 18762 1d6d 4D505536 		.ascii	"MPU6050_getFullScaleGyroRange\000"
 18762      3035305F 
 18762      67657446 
 18762      756C6C53 
 18762      63616C65 
 18763              	.LASF290:
 18764 1d8b 4D505536 		.ascii	"MPU6050_getIntPLLReadyStatus\000"
 18764      3035305F 
 18764      67657449 
 18764      6E74504C 
 18764      4C526561 
 18765              	.LASF260:
 18766 1da8 4D505536 		.ascii	"MPU6050_setZGyroOffset\000"
 18766      3035305F 
 18766      7365745A 
 18766      4779726F 
 18766      4F666673 
 18767              	.LASF96:
 18768 1dbf 4D505536 		.ascii	"MPU6050_setSlaveRegister\000"
 18768      3035305F 
 18768      73657453 
 18768      6C617665 
 18768      52656769 
 18769              	.LASF261:
 18770 1dd8 4D505536 		.ascii	"MPU6050_getXFineGain\000"
 18770      3035305F 
 18770      67657458 
 18770      46696E65 
 18770      4761696E 
 18771              	.LASF306:
ARM GAS  C:\Users\Sebas\AppData\Local\Temp\ccgugTAy.s 			page 408


 18772 1ded 4D505536 		.ascii	"MPU6050_setDMPConfig1\000"
 18772      3035305F 
 18772      73657444 
 18772      4D50436F 
 18772      6E666967 
 18773              	.LASF46:
 18774 1e03 4D505536 		.ascii	"MPU6050_setAccelZSelfTest\000"
 18774      3035305F 
 18774      73657441 
 18774      6363656C 
 18774      5A53656C 
 18775              	.LASF88:
 18776 1e1d 4D505536 		.ascii	"MPU6050_getSlaveReadWriteTransitionEnabled\000"
 18776      3035305F 
 18776      67657453 
 18776      6C617665 
 18776      52656164 
 18777              	.LASF135:
 18778 1e48 4D505536 		.ascii	"MPU6050_setInterruptDrive\000"
 18778      3035305F 
 18778      73657449 
 18778      6E746572 
 18778      72757074 
 18779              	.LASF204:
 18780 1e62 4D505536 		.ascii	"MPU6050_resetAccelerometerPath\000"
 18780      3035305F 
 18780      72657365 
 18780      74416363 
 18780      656C6572 
 18781              	.LASF60:
 18782 1e81 4D505536 		.ascii	"MPU6050_getMotionDetectionDuration\000"
 18782      3035305F 
 18782      6765744D 
 18782      6F74696F 
 18782      6E446574 
 18783              	.LASF134:
 18784 1ea4 4D505536 		.ascii	"MPU6050_getInterruptDrive\000"
 18784      3035305F 
 18784      67657449 
 18784      6E746572 
 18784      72757074 
 18785              	.LASF218:
 18786 1ebe 4D505536 		.ascii	"MPU6050_resetFIFO\000"
 18786      3035305F 
 18786      72657365 
 18786      74464946 
 18786      4F00
 18787              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
